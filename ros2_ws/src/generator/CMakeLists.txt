cmake_minimum_required(VERSION 3.8)
project(generator)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

set(AUTOGENERATED_FILE_NAME can1_main_ft24)
set(CAN_DBC_FILE_NAME CAN1MainFT24.dbc)

include_directories(include/${PROJECT_NAME})

add_custom_command(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/${AUTOGENERATED_FILE_NAME}.h ${CMAKE_CURRENT_SOURCE_DIR}/src/${AUTOGENERATED_FILE_NAME}.cpp
  COMMAND python3 -m cantools generate_c_source --prune ${CMAKE_CURRENT_SOURCE_DIR}/dbc/${CAN_DBC_FILE_NAME} --database-name ${AUTOGENERATED_FILE_NAME}
  COMMAND mv ${CMAKE_CURRENT_SOURCE_DIR}/src/${AUTOGENERATED_FILE_NAME}.h ${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/${AUTOGENERATED_FILE_NAME}.h
  COMMAND mv ${CMAKE_CURRENT_SOURCE_DIR}/src/${AUTOGENERATED_FILE_NAME}.c ${CMAKE_CURRENT_SOURCE_DIR}/src/${AUTOGENERATED_FILE_NAME}.cpp
  WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/src"
  DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/dbc/${CAN_DBC_FILE_NAME}"
  PRE_BUILD
  COMMENT "Generating CAN header files and code from DBC file"
  VERBATIM
)

set(HEADER_FILES include/${PROJECT_NAME}/${AUTOGENERATED_FILE_NAME}.h)
add_library(${PROJECT_NAME} src/${AUTOGENERATED_FILE_NAME}.cpp ${HEADER_FILES})
ament_export_targets(${PROJECT_NAME} HAS_LIBRARY_TARGET)

install(
  DIRECTORY include/${PROJECT_NAME}
  DESTINATION include
)

install(
  TARGETS ${PROJECT_NAME}
  EXPORT ${PROJECT_NAME}
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
  RUNTIME DESTINATION bin
  INCLUDES DESTINATION include
)

ament_package()
