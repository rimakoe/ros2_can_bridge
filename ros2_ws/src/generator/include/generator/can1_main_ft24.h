/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 0.1.dev1730+g116333d Thu Mar 28 16:47:41 2024.
 */

#ifndef CAN1_MAIN_FT24_H
#define CAN1_MAIN_FT24_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CAN1_MAIN_FT24_JETSON_COMMANDS_FRAME_ID (0xe2u)
#define CAN1_MAIN_FT24_JETSON_TX_FRAME_ID (0xe1u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG0_FRAME_ID (0x600u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG1_FRAME_ID (0x601u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG2_FRAME_ID (0x602u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG3_FRAME_ID (0x603u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG4_FRAME_ID (0x604u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG5_FRAME_ID (0x605u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG6_FRAME_ID (0x606u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG7_FRAME_ID (0x607u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG8_FRAME_ID (0x608u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG0_FRAME_ID (0x610u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG1_FRAME_ID (0x611u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG2_FRAME_ID (0x612u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG3_FRAME_ID (0x613u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG4_FRAME_ID (0x614u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG5_FRAME_ID (0x615u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG6_FRAME_ID (0x616u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG7_FRAME_ID (0x617u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG8_FRAME_ID (0x618u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG0_FRAME_ID (0x620u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG1_FRAME_ID (0x621u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG2_FRAME_ID (0x622u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG3_FRAME_ID (0x623u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG4_FRAME_ID (0x624u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG5_FRAME_ID (0x625u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG6_FRAME_ID (0x626u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG7_FRAME_ID (0x627u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG8_FRAME_ID (0x628u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG0_FRAME_ID (0x630u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG1_FRAME_ID (0x631u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG2_FRAME_ID (0x632u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG3_FRAME_ID (0x633u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG4_FRAME_ID (0x634u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG5_FRAME_ID (0x635u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG6_FRAME_ID (0x636u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG7_FRAME_ID (0x637u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG8_FRAME_ID (0x638u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG0_FRAME_ID (0x640u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG1_FRAME_ID (0x641u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG2_FRAME_ID (0x642u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG3_FRAME_ID (0x643u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG4_FRAME_ID (0x644u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG5_FRAME_ID (0x645u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG6_FRAME_ID (0x646u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG7_FRAME_ID (0x647u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG8_FRAME_ID (0x648u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG0_FRAME_ID (0x650u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG1_FRAME_ID (0x651u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG2_FRAME_ID (0x652u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG3_FRAME_ID (0x653u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG4_FRAME_ID (0x654u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG5_FRAME_ID (0x655u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG6_FRAME_ID (0x656u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG7_FRAME_ID (0x657u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG8_FRAME_ID (0x658u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG0_FRAME_ID (0x660u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG1_FRAME_ID (0x661u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG2_FRAME_ID (0x662u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG3_FRAME_ID (0x663u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG4_FRAME_ID (0x664u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG5_FRAME_ID (0x665u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG6_FRAME_ID (0x666u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG7_FRAME_ID (0x667u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG8_FRAME_ID (0x668u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG0_FRAME_ID (0x670u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG1_FRAME_ID (0x671u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG2_FRAME_ID (0x672u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG3_FRAME_ID (0x673u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG4_FRAME_ID (0x674u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG5_FRAME_ID (0x675u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG6_FRAME_ID (0x676u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG7_FRAME_ID (0x677u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG8_FRAME_ID (0x678u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG0_FRAME_ID (0x680u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG1_FRAME_ID (0x681u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG2_FRAME_ID (0x682u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG3_FRAME_ID (0x683u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG4_FRAME_ID (0x684u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG5_FRAME_ID (0x685u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG6_FRAME_ID (0x686u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG7_FRAME_ID (0x687u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG8_FRAME_ID (0x688u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG0_FRAME_ID (0x690u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG1_FRAME_ID (0x691u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG2_FRAME_ID (0x692u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG3_FRAME_ID (0x693u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG4_FRAME_ID (0x694u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG5_FRAME_ID (0x695u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG6_FRAME_ID (0x696u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG7_FRAME_ID (0x697u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG8_FRAME_ID (0x698u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG0_FRAME_ID (0x6a0u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG1_FRAME_ID (0x6a1u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG2_FRAME_ID (0x6a2u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG3_FRAME_ID (0x6a3u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG4_FRAME_ID (0x6a4u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG5_FRAME_ID (0x6a5u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG6_FRAME_ID (0x6a6u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG7_FRAME_ID (0x6a7u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG8_FRAME_ID (0x6a8u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG0_FRAME_ID (0x6b0u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG1_FRAME_ID (0x6b1u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG2_FRAME_ID (0x6b2u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG3_FRAME_ID (0x6b3u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG4_FRAME_ID (0x6b4u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG5_FRAME_ID (0x6b5u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG6_FRAME_ID (0x6b6u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG7_FRAME_ID (0x6b7u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG8_FRAME_ID (0x6b8u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG0_FRAME_ID (0x6c0u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG1_FRAME_ID (0x6c1u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG2_FRAME_ID (0x6c2u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG3_FRAME_ID (0x6c3u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG4_FRAME_ID (0x6c4u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG5_FRAME_ID (0x6c5u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG6_FRAME_ID (0x6c6u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG7_FRAME_ID (0x6c7u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG8_FRAME_ID (0x6c8u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG0_FRAME_ID (0x6d0u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG1_FRAME_ID (0x6d1u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG2_FRAME_ID (0x6d2u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG3_FRAME_ID (0x6d3u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG4_FRAME_ID (0x6d4u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG5_FRAME_ID (0x6d5u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG6_FRAME_ID (0x6d6u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG7_FRAME_ID (0x6d7u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG8_FRAME_ID (0x6d8u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG0_FRAME_ID (0x6e0u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG1_FRAME_ID (0x6e1u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG2_FRAME_ID (0x6e2u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG3_FRAME_ID (0x6e3u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG4_FRAME_ID (0x6e4u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG5_FRAME_ID (0x6e5u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG6_FRAME_ID (0x6e6u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG7_FRAME_ID (0x6e7u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG8_FRAME_ID (0x6e8u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG0_FRAME_ID (0x6f0u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG1_FRAME_ID (0x6f1u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG2_FRAME_ID (0x6f2u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG3_FRAME_ID (0x6f3u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG4_FRAME_ID (0x6f4u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG5_FRAME_ID (0x6f5u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG6_FRAME_ID (0x6f6u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG7_FRAME_ID (0x6f7u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG8_FRAME_ID (0x6f8u)
#define CAN1_MAIN_FT24_JETSON_RX_FRAME_ID (0xe0u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_STATUS_FRAME_ID (0x8fu)
#define CAN1_MAIN_FT24_AMS_SLAVE14_STATUS_FRAME_ID (0x8eu)
#define CAN1_MAIN_FT24_AMS_SLAVE13_STATUS_FRAME_ID (0x8du)
#define CAN1_MAIN_FT24_AMS_SLAVE12_STATUS_FRAME_ID (0x8cu)
#define CAN1_MAIN_FT24_AMS_SLAVE11_STATUS_FRAME_ID (0x8bu)
#define CAN1_MAIN_FT24_AMS_SLAVE10_STATUS_FRAME_ID (0x8au)
#define CAN1_MAIN_FT24_AMS_SLAVE9_STATUS_FRAME_ID (0x89u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_STATUS_FRAME_ID (0x88u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_STATUS_FRAME_ID (0x87u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_STATUS_FRAME_ID (0x86u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_STATUS_FRAME_ID (0x85u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_STATUS_FRAME_ID (0x84u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_STATUS_FRAME_ID (0x83u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_STATUS_FRAME_ID (0x82u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_STATUS_FRAME_ID (0x81u)
#define CAN1_MAIN_FT24_ABX_MISC_FRAME_ID (0x109u)
#define CAN1_MAIN_FT24_AMS_ERROR_FRAME_ID (0x0cu)
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_INTERNAL_FRAME_ID (0x108u)
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_ACC_FRAME_ID (0x106u)
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_MOT_INV_FRAME_ID (0x107u)
#define CAN1_MAIN_FT24_ABX_BRAKE_T_FRAME_ID (0x105u)
#define CAN1_MAIN_FT24_ABX_WHEELSPEED_FRAME_ID (0x104u)
#define CAN1_MAIN_FT24_ABX_DAMPERS_FRAME_ID (0x103u)
#define CAN1_MAIN_FT24_ABX_TIMINGS_FRAME_ID (0x102u)
#define CAN1_MAIN_FT24_ABX_DRIVER_FRAME_ID (0x101u)
#define CAN1_MAIN_FT24_TTS_CONFIG_FRAME_ID (0x700u)
#define CAN1_MAIN_FT24_TTS_RR_FRAME_ID (0x704u)
#define CAN1_MAIN_FT24_TTS_RL_FRAME_ID (0x703u)
#define CAN1_MAIN_FT24_TTS_FR_FRAME_ID (0x702u)
#define CAN1_MAIN_FT24_TTS_FL_FRAME_ID (0x701u)
#define CAN1_MAIN_FT24_STW_PARAM_SET_FRAME_ID (0x402u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_STATUS_FRAME_ID (0x80u)
#define CAN1_MAIN_FT24_SSU_MESSAGE_FRAME_ID (0x500u)
#define CAN1_MAIN_FT24_AMS_STATUS_FRAME_ID (0x0au)
#define CAN1_MAIN_FT24_AMS_SLAVE_PANIC_FRAME_ID (0x09u)
#define CAN1_MAIN_FT24_AMS_IN_FRAME_ID (0x0bu)
#define CAN1_MAIN_FT24_SHUNT_CURRENT_FRAME_ID (0x521u)
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE1_FRAME_ID (0x522u)
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE2_FRAME_ID (0x523u)
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE3_FRAME_ID (0x524u)
#define CAN1_MAIN_FT24_SHUNT_TEMPERATURE_FRAME_ID (0x525u)
#define CAN1_MAIN_FT24_SDCL_TX_FRAME_ID (0x10u)
#define CAN1_MAIN_FT24_SDCL_RX_FRAME_ID (0x0fu)
#define CAN1_MAIN_FT24_PDU_COMMAND_FRAME_ID (0xc8u)
#define CAN1_MAIN_FT24_PDU_RESPONSE_FRAME_ID (0xc9u)
#define CAN1_MAIN_FT24_TX_PDO_FRAME_ID (0x202u)
#define CAN1_MAIN_FT24_X_SENS_ERROR_FRAME_ID (0x01u)
#define CAN1_MAIN_FT24_X_SENS_WARNING_FRAME_ID (0x02u)
#define CAN1_MAIN_FT24_X_SENS_SAMPLE_TIME_FRAME_ID (0x05u)
#define CAN1_MAIN_FT24_X_SENS_GROUP_COUNTER_FRAME_ID (0x06u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_FRAME_ID (0x11u)
#define CAN1_MAIN_FT24_X_SENS_RATE_OF_TURN_FRAME_ID (0x32u)
#define CAN1_MAIN_FT24_X_SENS_ACCELERATION_FRAME_ID (0x34u)
#define CAN1_MAIN_FT24_X_SENS_LONG_LAT_FRAME_ID (0x71u)
#define CAN1_MAIN_FT24_X_SENS_VELOCITY_FRAME_ID (0x76u)
#define CAN1_MAIN_FT24_AS_MISSION_FB_FRAME_ID (0x410u)
#define CAN1_MAIN_FT24_STW_MISSION_SELECTED_FRAME_ID (0x400u)
#define CAN1_MAIN_FT24_EPSC_OUT_FRAME_ID (0x321u)
#define CAN1_MAIN_FT24_EPSC_STEERING_IN_FRAME_ID (0x123u)
#define CAN1_MAIN_FT24_STW_BUTTONS_FRAME_ID (0x401u)
#define CAN1_MAIN_FT24_STW_STATUS_FRAME_ID (0x412u)
#define CAN1_MAIN_FT24_PDU_CURRENT_1_FRAME_ID (0xcau)
#define CAN1_MAIN_FT24_PDU_CURRENT_2_FRAME_ID (0xcbu)
#define CAN1_MAIN_FT24_PDU_CURRENT_3_FRAME_ID (0xccu)
#define CAN1_MAIN_FT24_PDU_CURRENT_4_FRAME_ID (0xcdu)
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_FRAME_ID (0x124u)

/* Frame lengths in bytes. */
#define CAN1_MAIN_FT24_JETSON_COMMANDS_LENGTH (8u)
#define CAN1_MAIN_FT24_JETSON_TX_LENGTH (7u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG0_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG1_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG2_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG3_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG4_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG5_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG6_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG7_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG8_LENGTH (8u)
#define CAN1_MAIN_FT24_JETSON_RX_LENGTH (4u)
#define CAN1_MAIN_FT24_AMS_SLAVE15_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE14_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE13_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE12_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE11_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE10_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE9_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE8_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE7_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE6_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE5_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE4_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE3_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE2_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_SLAVE1_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_ABX_MISC_LENGTH (7u)
#define CAN1_MAIN_FT24_AMS_ERROR_LENGTH (2u)
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_INTERNAL_LENGTH (8u)
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_ACC_LENGTH (6u)
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_MOT_INV_LENGTH (8u)
#define CAN1_MAIN_FT24_ABX_BRAKE_T_LENGTH (8u)
#define CAN1_MAIN_FT24_ABX_WHEELSPEED_LENGTH (8u)
#define CAN1_MAIN_FT24_ABX_DAMPERS_LENGTH (8u)
#define CAN1_MAIN_FT24_ABX_TIMINGS_LENGTH (8u)
#define CAN1_MAIN_FT24_ABX_DRIVER_LENGTH (8u)
#define CAN1_MAIN_FT24_TTS_CONFIG_LENGTH (1u)
#define CAN1_MAIN_FT24_TTS_RR_LENGTH (8u)
#define CAN1_MAIN_FT24_TTS_RL_LENGTH (8u)
#define CAN1_MAIN_FT24_TTS_FR_LENGTH (8u)
#define CAN1_MAIN_FT24_TTS_FL_LENGTH (8u)
#define CAN1_MAIN_FT24_STW_PARAM_SET_LENGTH (5u)
#define CAN1_MAIN_FT24_AMS_SLAVE0_STATUS_LENGTH (8u)
#define CAN1_MAIN_FT24_SSU_MESSAGE_LENGTH (4u)
#define CAN1_MAIN_FT24_AMS_STATUS_LENGTH (6u)
#define CAN1_MAIN_FT24_AMS_SLAVE_PANIC_LENGTH (8u)
#define CAN1_MAIN_FT24_AMS_IN_LENGTH (1u)
#define CAN1_MAIN_FT24_SHUNT_CURRENT_LENGTH (6u)
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE1_LENGTH (6u)
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE2_LENGTH (6u)
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE3_LENGTH (6u)
#define CAN1_MAIN_FT24_SHUNT_TEMPERATURE_LENGTH (6u)
#define CAN1_MAIN_FT24_SDCL_TX_LENGTH (4u)
#define CAN1_MAIN_FT24_SDCL_RX_LENGTH (3u)
#define CAN1_MAIN_FT24_PDU_COMMAND_LENGTH (6u)
#define CAN1_MAIN_FT24_PDU_RESPONSE_LENGTH (6u)
#define CAN1_MAIN_FT24_TX_PDO_LENGTH (6u)
#define CAN1_MAIN_FT24_X_SENS_ERROR_LENGTH (1u)
#define CAN1_MAIN_FT24_X_SENS_WARNING_LENGTH (1u)
#define CAN1_MAIN_FT24_X_SENS_SAMPLE_TIME_LENGTH (4u)
#define CAN1_MAIN_FT24_X_SENS_GROUP_COUNTER_LENGTH (2u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_LENGTH (4u)
#define CAN1_MAIN_FT24_X_SENS_RATE_OF_TURN_LENGTH (6u)
#define CAN1_MAIN_FT24_X_SENS_ACCELERATION_LENGTH (6u)
#define CAN1_MAIN_FT24_X_SENS_LONG_LAT_LENGTH (8u)
#define CAN1_MAIN_FT24_X_SENS_VELOCITY_LENGTH (6u)
#define CAN1_MAIN_FT24_AS_MISSION_FB_LENGTH (1u)
#define CAN1_MAIN_FT24_STW_MISSION_SELECTED_LENGTH (1u)
#define CAN1_MAIN_FT24_EPSC_OUT_LENGTH (8u)
#define CAN1_MAIN_FT24_EPSC_STEERING_IN_LENGTH (2u)
#define CAN1_MAIN_FT24_STW_BUTTONS_LENGTH (1u)
#define CAN1_MAIN_FT24_STW_STATUS_LENGTH (6u)
#define CAN1_MAIN_FT24_PDU_CURRENT_1_LENGTH (8u)
#define CAN1_MAIN_FT24_PDU_CURRENT_2_LENGTH (8u)
#define CAN1_MAIN_FT24_PDU_CURRENT_3_LENGTH (8u)
#define CAN1_MAIN_FT24_PDU_CURRENT_4_LENGTH (8u)
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_LENGTH (7u)

/* Extended or standard frame types. */
#define CAN1_MAIN_FT24_JETSON_COMMANDS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_JETSON_TX_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG0_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG5_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG6_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG7_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG8_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_JETSON_RX_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE15_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE14_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE13_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE12_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE11_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE10_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE9_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE8_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE7_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE6_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE5_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE4_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE3_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE2_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE1_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_ABX_MISC_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_ERROR_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_INTERNAL_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_ACC_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_MOT_INV_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_ABX_BRAKE_T_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_ABX_WHEELSPEED_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_ABX_DAMPERS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_ABX_TIMINGS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_ABX_DRIVER_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_TTS_CONFIG_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_TTS_RR_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_TTS_RL_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_TTS_FR_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_TTS_FL_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_STW_PARAM_SET_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE0_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_SSU_MESSAGE_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_SLAVE_PANIC_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AMS_IN_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_SHUNT_CURRENT_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_SHUNT_TEMPERATURE_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_SDCL_TX_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_SDCL_RX_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_PDU_COMMAND_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_PDU_RESPONSE_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_TX_PDO_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_X_SENS_ERROR_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_X_SENS_WARNING_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_X_SENS_SAMPLE_TIME_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_X_SENS_GROUP_COUNTER_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_X_SENS_RATE_OF_TURN_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_X_SENS_ACCELERATION_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_X_SENS_LONG_LAT_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_X_SENS_VELOCITY_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_AS_MISSION_FB_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_STW_MISSION_SELECTED_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_EPSC_OUT_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_EPSC_STEERING_IN_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_STW_BUTTONS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_STW_STATUS_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_PDU_CURRENT_1_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_PDU_CURRENT_2_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_PDU_CURRENT_3_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_PDU_CURRENT_4_IS_EXTENDED (0)
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define CAN1_MAIN_FT24_AMS_ERROR_AMS_ERROR_KIND_NONE_CHOICE (0)
#define CAN1_MAIN_FT24_AMS_ERROR_AMS_ERROR_KIND_SLAVE__TIMEOUT_CHOICE (1)
#define CAN1_MAIN_FT24_AMS_ERROR_AMS_ERROR_KIND_SLAVE__PANIC_CHOICE (2)
#define CAN1_MAIN_FT24_AMS_ERROR_AMS_ERROR_KIND_SHUNT__TIMEOUT_CHOICE (3)
#define CAN1_MAIN_FT24_AMS_ERROR_AMS_ERROR_KIND_SHUNT__OVERCURRENT_CHOICE (4)
#define CAN1_MAIN_FT24_AMS_ERROR_AMS_ERROR_KIND_SHUNT__OVERTEMPERATURE_CHOICE (5)

#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_TYPE_BRAKE_BALANCE_CHOICE (0u)
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_TYPE_TRACTION_CONTROL1_CHOICE (1u)
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_TYPE_TRACTION_CONTROL2_CHOICE (2u)
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_TYPE_TORQUE_MAP_CHOICE (3u)
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_TYPE_TEST1_CHOICE (4u)
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_TYPE_TEST2_CHOICE (5u)
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_TYPE_TEST3_CHOICE (6u)
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_TYPE_TEST4_CHOICE (7u)

#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_ASRON_OFF_CHOICE (0u)
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_ASRON_ON_CHOICE (1u)

#define CAN1_MAIN_FT24_AMS_STATUS_AMS_STATE_INACTIVE_CHOICE (0u)
#define CAN1_MAIN_FT24_AMS_STATUS_AMS_STATE_ACTIVE_CHOICE (1u)
#define CAN1_MAIN_FT24_AMS_STATUS_AMS_STATE_PRECHARGE_CHOICE (2u)
#define CAN1_MAIN_FT24_AMS_STATUS_AMS_STATE_DISCHARGE_CHOICE (3u)
#define CAN1_MAIN_FT24_AMS_STATUS_AMS_STATE_ERROR_CHOICE (4u)

#define CAN1_MAIN_FT24_AMS_SLAVE_PANIC_AMS_SLAVE_PANIC_KIND_OVERTEMPERATURE_CHOICE (0u)
#define CAN1_MAIN_FT24_AMS_SLAVE_PANIC_AMS_SLAVE_PANIC_KIND_UNDERTEMPERATURE_CHOICE (1u)
#define CAN1_MAIN_FT24_AMS_SLAVE_PANIC_AMS_SLAVE_PANIC_KIND_OVERVOLTAGE_CHOICE (2u)
#define CAN1_MAIN_FT24_AMS_SLAVE_PANIC_AMS_SLAVE_PANIC_KIND_UNDERVOLTAGE_CHOICE (3u)
#define CAN1_MAIN_FT24_AMS_SLAVE_PANIC_AMS_SLAVE_PANIC_KIND_TOO_FEW_WORKING_TEMPERATURE_SENSORS_CHOICE (4u)
#define CAN1_MAIN_FT24_AMS_SLAVE_PANIC_AMS_SLAVE_PANIC_KIND_OPEN_CELL_CONNECTION_CHOICE (5u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_HAVE_GNSS_TIME_PULSE_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_HAVE_GNSS_TIME_PULSE_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_RTK_STATUS_NO_RTK_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_RTK_STATUS_RTK_FLOATING_CHOICE (1u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_RTK_STATUS_RTK_FIXED_CHOICE (2u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_FILTER_MODE_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_FILTER_MODE_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_MAG_Z_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_MAG_Z_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_RETRANSMITTED_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_RETRANSMITTED_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIPPING_DETECTED_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIPPING_DETECTED_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_INTERPOLATED_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_INTERPOLATED_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_SYNC_IN_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_SYNC_IN_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_SYNC_OUT_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_SYNC_OUT_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_ACC_X_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_ACC_X_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_ACC_Y_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_ACC_Y_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_ACC_Z_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_ACC_Z_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_GYR_X_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_GYR_X_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_GYR_Y_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_GYR_Y_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_GYR_Z_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_GYR_Z_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_MAG_X_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_MAG_X_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_MAG_Y_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_MAG_Y_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_SELF_TEST_OK_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_SELF_TEST_OK_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_ORIENTATION_VALID_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_ORIENTATION_VALID_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_GPS_VALID_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_GPS_VALID_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_NO_ROTATION_ABORTED_CHOICE (1u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_NO_ROTATION_SAMPLES_REJECTED_CHOICE (2u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_NO_ROTATION_RUNNING_NORMALLY_CHOICE (3u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_REPRESENTATIVE_MOTION_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_REPRESENTATIVE_MOTION_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_EXTERNAL_CLOCK_SYNCED_FALSE_CHOICE (0u)
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_EXTERNAL_CLOCK_SYNCED_TRUE_CHOICE (1u)

#define CAN1_MAIN_FT24_AS_MISSION_FB_MISSION_SELECTION_ACCELERATION_CHOICE (1u)
#define CAN1_MAIN_FT24_AS_MISSION_FB_MISSION_SELECTION_SKIDPAD_CHOICE (2u)
#define CAN1_MAIN_FT24_AS_MISSION_FB_MISSION_SELECTION_TRACKDRIVE_CHOICE (3u)
#define CAN1_MAIN_FT24_AS_MISSION_FB_MISSION_SELECTION_BRAKETEST_CHOICE (4u)
#define CAN1_MAIN_FT24_AS_MISSION_FB_MISSION_SELECTION_INSPECTION_CHOICE (5u)
#define CAN1_MAIN_FT24_AS_MISSION_FB_MISSION_SELECTION_AUTOCROSS_CHOICE (6u)
#define CAN1_MAIN_FT24_AS_MISSION_FB_MISSION_SELECTION_MANUAL_CHOICE (7u)

#define CAN1_MAIN_FT24_STW_MISSION_SELECTED_MISSION_SELECTION_ACCELERATION_CHOICE (1u)
#define CAN1_MAIN_FT24_STW_MISSION_SELECTED_MISSION_SELECTION_SKIDPAD_CHOICE (2u)
#define CAN1_MAIN_FT24_STW_MISSION_SELECTED_MISSION_SELECTION_TRACKDRIVE_CHOICE (3u)
#define CAN1_MAIN_FT24_STW_MISSION_SELECTED_MISSION_SELECTION_BRAKETEST_CHOICE (4u)
#define CAN1_MAIN_FT24_STW_MISSION_SELECTED_MISSION_SELECTION_INSPECTION_CHOICE (5u)
#define CAN1_MAIN_FT24_STW_MISSION_SELECTED_MISSION_SELECTION_AUTOCROSS_CHOICE (6u)
#define CAN1_MAIN_FT24_STW_MISSION_SELECTED_MISSION_SELECTION_MANUAL_CHOICE (7u)

#define CAN1_MAIN_FT24_STW_STATUS_AS_STATE_STW_OFF_CHOICE (0u)
#define CAN1_MAIN_FT24_STW_STATUS_AS_STATE_STW_MANUAL_CHOICE (1u)
#define CAN1_MAIN_FT24_STW_STATUS_AS_STATE_STW_READY_CHOICE (2u)
#define CAN1_MAIN_FT24_STW_STATUS_AS_STATE_STW_DRIVING_CHOICE (3u)
#define CAN1_MAIN_FT24_STW_STATUS_AS_STATE_STW_FINISHED_CHOICE (4u)
#define CAN1_MAIN_FT24_STW_STATUS_AS_STATE_STW_EMERGENCY_CHOICE (5u)

#define CAN1_MAIN_FT24_STW_STATUS_R2_D_PROGRESS_NONE_CHOICE (0u)
#define CAN1_MAIN_FT24_STW_STATUS_R2_D_PROGRESS_TSMS_CHOICE (1u)
#define CAN1_MAIN_FT24_STW_STATUS_R2_D_PROGRESS_TS_ACTIVE_CHOICE (2u)
#define CAN1_MAIN_FT24_STW_STATUS_R2_D_PROGRESS_RESETTING_NODES_CHOICE (3u)
#define CAN1_MAIN_FT24_STW_STATUS_R2_D_PROGRESS_RESETTING_COMMS_CHOICE (4u)
#define CAN1_MAIN_FT24_STW_STATUS_R2_D_PROGRESS_WAITING_INIT_CHOICE (5u)
#define CAN1_MAIN_FT24_STW_STATUS_R2_D_PROGRESS_INIT_STAGE1_CHOICE (6u)
#define CAN1_MAIN_FT24_STW_STATUS_R2_D_PROGRESS_INIT_STAGE2_CHOICE (7u)
#define CAN1_MAIN_FT24_STW_STATUS_R2_D_PROGRESS_INIT_SUCCESS_CHOICE (15u)

#define CAN1_MAIN_FT24_STW_STATUS_INI_CHK_STATE_START_CHOICE (0u)
#define CAN1_MAIN_FT24_STW_STATUS_INI_CHK_STATE_WD_CHECK_CHOICE (1u)
#define CAN1_MAIN_FT24_STW_STATUS_INI_CHK_STATE_WD_OK_CHOICE (2u)
#define CAN1_MAIN_FT24_STW_STATUS_INI_CHK_STATE_ASB_CHECK_1_CHOICE (3u)
#define CAN1_MAIN_FT24_STW_STATUS_INI_CHK_STATE_ASB_CHECK_2_CHOICE (4u)
#define CAN1_MAIN_FT24_STW_STATUS_INI_CHK_STATE_WAIT_TS_CHOICE (5u)
#define CAN1_MAIN_FT24_STW_STATUS_INI_CHK_STATE_EBS_CHECK_A_CHOICE (6u)
#define CAN1_MAIN_FT24_STW_STATUS_INI_CHK_STATE_EBS_CHECK_B_CHOICE (7u)
#define CAN1_MAIN_FT24_STW_STATUS_INI_CHK_STATE_DONE_CHOICE (8u)
#define CAN1_MAIN_FT24_STW_STATUS_INI_CHK_STATE_ERROR_CHOICE (9u)

/* Frame Names. */
#define CAN1_MAIN_FT24_JETSON_COMMANDS_NAME "JetsonCommands"
#define CAN1_MAIN_FT24_JETSON_TX_NAME "JetsonTX"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG0_NAME "AMS_Slave0_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG1_NAME "AMS_Slave0_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG2_NAME "AMS_Slave0_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG3_NAME "AMS_Slave0_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG4_NAME "AMS_Slave0_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG5_NAME "AMS_Slave0_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG6_NAME "AMS_Slave0_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG7_NAME "AMS_Slave0_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG8_NAME "AMS_Slave0_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG0_NAME "AMS_Slave1_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG1_NAME "AMS_Slave1_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG2_NAME "AMS_Slave1_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG3_NAME "AMS_Slave1_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG4_NAME "AMS_Slave1_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG5_NAME "AMS_Slave1_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG6_NAME "AMS_Slave1_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG7_NAME "AMS_Slave1_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG8_NAME "AMS_Slave1_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG0_NAME "AMS_Slave2_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG1_NAME "AMS_Slave2_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG2_NAME "AMS_Slave2_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG3_NAME "AMS_Slave2_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG4_NAME "AMS_Slave2_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG5_NAME "AMS_Slave2_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG6_NAME "AMS_Slave2_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG7_NAME "AMS_Slave2_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG8_NAME "AMS_Slave2_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG0_NAME "AMS_Slave3_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG1_NAME "AMS_Slave3_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG2_NAME "AMS_Slave3_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG3_NAME "AMS_Slave3_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG4_NAME "AMS_Slave3_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG5_NAME "AMS_Slave3_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG6_NAME "AMS_Slave3_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG7_NAME "AMS_Slave3_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG8_NAME "AMS_Slave3_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG0_NAME "AMS_Slave4_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG1_NAME "AMS_Slave4_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG2_NAME "AMS_Slave4_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG3_NAME "AMS_Slave4_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG4_NAME "AMS_Slave4_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG5_NAME "AMS_Slave4_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG6_NAME "AMS_Slave4_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG7_NAME "AMS_Slave4_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG8_NAME "AMS_Slave4_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG0_NAME "AMS_Slave5_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG1_NAME "AMS_Slave5_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG2_NAME "AMS_Slave5_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG3_NAME "AMS_Slave5_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG4_NAME "AMS_Slave5_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG5_NAME "AMS_Slave5_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG6_NAME "AMS_Slave5_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG7_NAME "AMS_Slave5_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG8_NAME "AMS_Slave5_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG0_NAME "AMS_Slave6_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG1_NAME "AMS_Slave6_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG2_NAME "AMS_Slave6_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG3_NAME "AMS_Slave6_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG4_NAME "AMS_Slave6_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG5_NAME "AMS_Slave6_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG6_NAME "AMS_Slave6_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG7_NAME "AMS_Slave6_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG8_NAME "AMS_Slave6_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG0_NAME "AMS_Slave7_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG1_NAME "AMS_Slave7_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG2_NAME "AMS_Slave7_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG3_NAME "AMS_Slave7_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG4_NAME "AMS_Slave7_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG5_NAME "AMS_Slave7_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG6_NAME "AMS_Slave7_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG7_NAME "AMS_Slave7_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG8_NAME "AMS_Slave7_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG0_NAME "AMS_Slave8_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG1_NAME "AMS_Slave8_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG2_NAME "AMS_Slave8_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG3_NAME "AMS_Slave8_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG4_NAME "AMS_Slave8_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG5_NAME "AMS_Slave8_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG6_NAME "AMS_Slave8_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG7_NAME "AMS_Slave8_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG8_NAME "AMS_Slave8_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG0_NAME "AMS_Slave9_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG1_NAME "AMS_Slave9_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG2_NAME "AMS_Slave9_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG3_NAME "AMS_Slave9_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG4_NAME "AMS_Slave9_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG5_NAME "AMS_Slave9_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG6_NAME "AMS_Slave9_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG7_NAME "AMS_Slave9_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG8_NAME "AMS_Slave9_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG0_NAME "AMS_Slave10_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG1_NAME "AMS_Slave10_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG2_NAME "AMS_Slave10_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG3_NAME "AMS_Slave10_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG4_NAME "AMS_Slave10_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG5_NAME "AMS_Slave10_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG6_NAME "AMS_Slave10_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG7_NAME "AMS_Slave10_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG8_NAME "AMS_Slave10_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG0_NAME "AMS_Slave11_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG1_NAME "AMS_Slave11_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG2_NAME "AMS_Slave11_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG3_NAME "AMS_Slave11_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG4_NAME "AMS_Slave11_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG5_NAME "AMS_Slave11_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG6_NAME "AMS_Slave11_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG7_NAME "AMS_Slave11_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG8_NAME "AMS_Slave11_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG0_NAME "AMS_Slave12_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG1_NAME "AMS_Slave12_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG2_NAME "AMS_Slave12_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG3_NAME "AMS_Slave12_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG4_NAME "AMS_Slave12_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG5_NAME "AMS_Slave12_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG6_NAME "AMS_Slave12_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG7_NAME "AMS_Slave12_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG8_NAME "AMS_Slave12_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG0_NAME "AMS_Slave13_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG1_NAME "AMS_Slave13_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG2_NAME "AMS_Slave13_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG3_NAME "AMS_Slave13_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG4_NAME "AMS_Slave13_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG5_NAME "AMS_Slave13_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG6_NAME "AMS_Slave13_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG7_NAME "AMS_Slave13_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG8_NAME "AMS_Slave13_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG0_NAME "AMS_Slave14_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG1_NAME "AMS_Slave14_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG2_NAME "AMS_Slave14_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG3_NAME "AMS_Slave14_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG4_NAME "AMS_Slave14_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG5_NAME "AMS_Slave14_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG6_NAME "AMS_Slave14_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG7_NAME "AMS_Slave14_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG8_NAME "AMS_Slave14_Log8"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG0_NAME "AMS_Slave15_Log0"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG1_NAME "AMS_Slave15_Log1"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG2_NAME "AMS_Slave15_Log2"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG3_NAME "AMS_Slave15_Log3"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG4_NAME "AMS_Slave15_Log4"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG5_NAME "AMS_Slave15_Log5"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG6_NAME "AMS_Slave15_Log6"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG7_NAME "AMS_Slave15_Log7"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG8_NAME "AMS_Slave15_Log8"
#define CAN1_MAIN_FT24_JETSON_RX_NAME "JetsonRX"
#define CAN1_MAIN_FT24_AMS_SLAVE15_STATUS_NAME "AMS_Slave15Status"
#define CAN1_MAIN_FT24_AMS_SLAVE14_STATUS_NAME "AMS_Slave14Status"
#define CAN1_MAIN_FT24_AMS_SLAVE13_STATUS_NAME "AMS_Slave13Status"
#define CAN1_MAIN_FT24_AMS_SLAVE12_STATUS_NAME "AMS_Slave12Status"
#define CAN1_MAIN_FT24_AMS_SLAVE11_STATUS_NAME "AMS_Slave11Status"
#define CAN1_MAIN_FT24_AMS_SLAVE10_STATUS_NAME "AMS_Slave10Status"
#define CAN1_MAIN_FT24_AMS_SLAVE9_STATUS_NAME "AMS_Slave9Status"
#define CAN1_MAIN_FT24_AMS_SLAVE8_STATUS_NAME "AMS_Slave8Status"
#define CAN1_MAIN_FT24_AMS_SLAVE7_STATUS_NAME "AMS_Slave7Status"
#define CAN1_MAIN_FT24_AMS_SLAVE6_STATUS_NAME "AMS_Slave6Status"
#define CAN1_MAIN_FT24_AMS_SLAVE5_STATUS_NAME "AMS_Slave5Status"
#define CAN1_MAIN_FT24_AMS_SLAVE4_STATUS_NAME "AMS_Slave4Status"
#define CAN1_MAIN_FT24_AMS_SLAVE3_STATUS_NAME "AMS_Slave3Status"
#define CAN1_MAIN_FT24_AMS_SLAVE2_STATUS_NAME "AMS_Slave2Status"
#define CAN1_MAIN_FT24_AMS_SLAVE1_STATUS_NAME "AMS_Slave1Status"
#define CAN1_MAIN_FT24_ABX_MISC_NAME "ABX_Misc"
#define CAN1_MAIN_FT24_AMS_ERROR_NAME "AMS_Error"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_INTERNAL_NAME "ABX_CoolingSys_Internal"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_ACC_NAME "ABX_CoolingSys_Acc"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_MOT_INV_NAME "ABX_CoolingSys_MotInv"
#define CAN1_MAIN_FT24_ABX_BRAKE_T_NAME "ABX_BrakeT"
#define CAN1_MAIN_FT24_ABX_WHEELSPEED_NAME "ABX_Wheelspeed"
#define CAN1_MAIN_FT24_ABX_DAMPERS_NAME "ABX_Dampers"
#define CAN1_MAIN_FT24_ABX_TIMINGS_NAME "ABX_Timings"
#define CAN1_MAIN_FT24_ABX_DRIVER_NAME "ABX_Driver"
#define CAN1_MAIN_FT24_TTS_CONFIG_NAME "TTS_Config"
#define CAN1_MAIN_FT24_TTS_RR_NAME "TTS_RR"
#define CAN1_MAIN_FT24_TTS_RL_NAME "TTS_RL"
#define CAN1_MAIN_FT24_TTS_FR_NAME "TTS_FR"
#define CAN1_MAIN_FT24_TTS_FL_NAME "TTS_FL"
#define CAN1_MAIN_FT24_STW_PARAM_SET_NAME "STW_Param_Set"
#define CAN1_MAIN_FT24_AMS_SLAVE0_STATUS_NAME "AMS_Slave0Status"
#define CAN1_MAIN_FT24_SSU_MESSAGE_NAME "SSU_Message"
#define CAN1_MAIN_FT24_AMS_STATUS_NAME "AMS_Status"
#define CAN1_MAIN_FT24_AMS_SLAVE_PANIC_NAME "AMS_SlavePanic"
#define CAN1_MAIN_FT24_AMS_IN_NAME "AMS_In"
#define CAN1_MAIN_FT24_SHUNT_CURRENT_NAME "Shunt_Current"
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE1_NAME "Shunt_Voltage1"
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE2_NAME "Shunt_Voltage2"
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE3_NAME "Shunt_Voltage3"
#define CAN1_MAIN_FT24_SHUNT_TEMPERATURE_NAME "Shunt_Temperature"
#define CAN1_MAIN_FT24_SDCL_TX_NAME "SDCL_tx"
#define CAN1_MAIN_FT24_SDCL_RX_NAME "SDCL_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_NAME "PDU_Command"
#define CAN1_MAIN_FT24_PDU_RESPONSE_NAME "PDU_Response"
#define CAN1_MAIN_FT24_TX_PDO_NAME "TxPDO"
#define CAN1_MAIN_FT24_X_SENS_ERROR_NAME "XSens_Error"
#define CAN1_MAIN_FT24_X_SENS_WARNING_NAME "XSens_Warning"
#define CAN1_MAIN_FT24_X_SENS_SAMPLE_TIME_NAME "XSens_SampleTime"
#define CAN1_MAIN_FT24_X_SENS_GROUP_COUNTER_NAME "XSens_GroupCounter"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_NAME "XSens_StatusWord"
#define CAN1_MAIN_FT24_X_SENS_RATE_OF_TURN_NAME "XSens_RateOfTurn"
#define CAN1_MAIN_FT24_X_SENS_ACCELERATION_NAME "XSens_Acceleration"
#define CAN1_MAIN_FT24_X_SENS_LONG_LAT_NAME "XSens_LongLat"
#define CAN1_MAIN_FT24_X_SENS_VELOCITY_NAME "XSens_Velocity"
#define CAN1_MAIN_FT24_AS_MISSION_FB_NAME "AS_Mission_fb"
#define CAN1_MAIN_FT24_STW_MISSION_SELECTED_NAME "STW_mission_selected"
#define CAN1_MAIN_FT24_EPSC_OUT_NAME "EPSC_out"
#define CAN1_MAIN_FT24_EPSC_STEERING_IN_NAME "EPSC_Steering_In"
#define CAN1_MAIN_FT24_STW_BUTTONS_NAME "STW_buttons"
#define CAN1_MAIN_FT24_STW_STATUS_NAME "STW_status"
#define CAN1_MAIN_FT24_PDU_CURRENT_1_NAME "PDU_Current_1"
#define CAN1_MAIN_FT24_PDU_CURRENT_2_NAME "PDU_Current_2"
#define CAN1_MAIN_FT24_PDU_CURRENT_3_NAME "PDU_Current_3"
#define CAN1_MAIN_FT24_PDU_CURRENT_4_NAME "PDU_Current_4"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_NAME "EPSC_Config_In"

/* Signal Names. */
#define CAN1_MAIN_FT24_JETSON_COMMANDS_JETSON_BRAKE_RATIO_NAME "Jetson_Brake_Ratio"
#define CAN1_MAIN_FT24_JETSON_COMMANDS_JETSON_SPEED_TARGET_LEFT_NAME "Jetson_Speed_Target_left"
#define CAN1_MAIN_FT24_JETSON_COMMANDS_JETSON_SPEED_TARGET_RIGHT_NAME "Jetson_Speed_Target_right"
#define CAN1_MAIN_FT24_JETSON_COMMANDS_JETSON_STEERING_ANGLE_LEFT_NAME "Jetson_Steering_Angle_Left"
#define CAN1_MAIN_FT24_JETSON_COMMANDS_JETSON_STEERING_ANGLE_RIGHT_NAME "Jetson_Steering_Angle_Right"
#define CAN1_MAIN_FT24_JETSON_TX_JETSON_AS_MISSION_COMPLETE_NAME "Jetson_AS_Mission_Complete"
#define CAN1_MAIN_FT24_JETSON_TX_JETSON_AS_OK_NAME "Jetson_AS_OK"
#define CAN1_MAIN_FT24_JETSON_TX_JETSON_LAP_COUNT_NAME "Jetson_Lap_Count"
#define CAN1_MAIN_FT24_JETSON_TX_JETSON_CONES_ALL_NAME "Jetson_Cones_All"
#define CAN1_MAIN_FT24_JETSON_TX_JETSON_CONES_ACTUAL_NAME "Jetson_Cones_Actual"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG0_AMS_SLAVE0_V0_NAME "AMS_Slave0_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG0_AMS_SLAVE0_V1_NAME "AMS_Slave0_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG0_AMS_SLAVE0_V2_NAME "AMS_Slave0_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG0_AMS_SLAVE0_V3_NAME "AMS_Slave0_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG1_AMS_SLAVE0_V4_NAME "AMS_Slave0_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG1_AMS_SLAVE0_V5_NAME "AMS_Slave0_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG1_AMS_SLAVE0_V6_NAME "AMS_Slave0_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG1_AMS_SLAVE0_V7_NAME "AMS_Slave0_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG2_AMS_SLAVE0_V8_NAME "AMS_Slave0_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG2_AMS_SLAVE0_V9_NAME "AMS_Slave0_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG2_AMS_SLAVE0_V10_NAME "AMS_Slave0_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG2_AMS_SLAVE0_V11_NAME "AMS_Slave0_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG3_AMS_SLAVE0_V12_NAME "AMS_Slave0_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG3_AMS_SLAVE0_V13_NAME "AMS_Slave0_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG3_AMS_SLAVE0_V14_NAME "AMS_Slave0_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG3_AMS_SLAVE0_V15_NAME "AMS_Slave0_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG4_AMS_SLAVE0_V16_NAME "AMS_Slave0_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG4_AMS_SLAVE0_FAILED_SENSORS_NAME "AMS_Slave0_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG5_AMS_SLAVE0_T0_NAME "AMS_Slave0_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG5_AMS_SLAVE0_T1_NAME "AMS_Slave0_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG5_AMS_SLAVE0_T2_NAME "AMS_Slave0_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG5_AMS_SLAVE0_T3_NAME "AMS_Slave0_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG5_AMS_SLAVE0_T4_NAME "AMS_Slave0_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG5_AMS_SLAVE0_T5_NAME "AMS_Slave0_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG5_AMS_SLAVE0_T6_NAME "AMS_Slave0_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG5_AMS_SLAVE0_T7_NAME "AMS_Slave0_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG6_AMS_SLAVE0_T8_NAME "AMS_Slave0_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG6_AMS_SLAVE0_T9_NAME "AMS_Slave0_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG6_AMS_SLAVE0_T10_NAME "AMS_Slave0_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG6_AMS_SLAVE0_T11_NAME "AMS_Slave0_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG6_AMS_SLAVE0_T12_NAME "AMS_Slave0_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG6_AMS_SLAVE0_T13_NAME "AMS_Slave0_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG6_AMS_SLAVE0_T14_NAME "AMS_Slave0_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG6_AMS_SLAVE0_T15_NAME "AMS_Slave0_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG7_AMS_SLAVE0_T16_NAME "AMS_Slave0_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG7_AMS_SLAVE0_T17_NAME "AMS_Slave0_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG7_AMS_SLAVE0_T18_NAME "AMS_Slave0_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG7_AMS_SLAVE0_T19_NAME "AMS_Slave0_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG7_AMS_SLAVE0_T20_NAME "AMS_Slave0_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG7_AMS_SLAVE0_T21_NAME "AMS_Slave0_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG7_AMS_SLAVE0_T22_NAME "AMS_Slave0_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG7_AMS_SLAVE0_T23_NAME "AMS_Slave0_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG8_AMS_SLAVE0_T24_NAME "AMS_Slave0_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG8_AMS_SLAVE0_T25_NAME "AMS_Slave0_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG8_AMS_SLAVE0_T26_NAME "AMS_Slave0_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG8_AMS_SLAVE0_T27_NAME "AMS_Slave0_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG8_AMS_SLAVE0_T28_NAME "AMS_Slave0_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG8_AMS_SLAVE0_T29_NAME "AMS_Slave0_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG8_AMS_SLAVE0_T30_NAME "AMS_Slave0_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE0_LOG8_AMS_SLAVE0_T31_NAME "AMS_Slave0_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG0_AMS_SLAVE1_V0_NAME "AMS_Slave1_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG0_AMS_SLAVE1_V1_NAME "AMS_Slave1_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG0_AMS_SLAVE1_V2_NAME "AMS_Slave1_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG0_AMS_SLAVE1_V3_NAME "AMS_Slave1_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG1_AMS_SLAVE1_V4_NAME "AMS_Slave1_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG1_AMS_SLAVE1_V5_NAME "AMS_Slave1_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG1_AMS_SLAVE1_V6_NAME "AMS_Slave1_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG1_AMS_SLAVE1_V7_NAME "AMS_Slave1_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG2_AMS_SLAVE1_V8_NAME "AMS_Slave1_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG2_AMS_SLAVE1_V9_NAME "AMS_Slave1_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG2_AMS_SLAVE1_V10_NAME "AMS_Slave1_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG2_AMS_SLAVE1_V11_NAME "AMS_Slave1_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG3_AMS_SLAVE1_V12_NAME "AMS_Slave1_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG3_AMS_SLAVE1_V13_NAME "AMS_Slave1_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG3_AMS_SLAVE1_V14_NAME "AMS_Slave1_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG3_AMS_SLAVE1_V15_NAME "AMS_Slave1_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG4_AMS_SLAVE1_V16_NAME "AMS_Slave1_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG4_AMS_SLAVE1_FAILED_SENSORS_NAME "AMS_Slave1_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG5_AMS_SLAVE1_T0_NAME "AMS_Slave1_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG5_AMS_SLAVE1_T1_NAME "AMS_Slave1_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG5_AMS_SLAVE1_T2_NAME "AMS_Slave1_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG5_AMS_SLAVE1_T3_NAME "AMS_Slave1_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG5_AMS_SLAVE1_T4_NAME "AMS_Slave1_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG5_AMS_SLAVE1_T5_NAME "AMS_Slave1_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG5_AMS_SLAVE1_T6_NAME "AMS_Slave1_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG5_AMS_SLAVE1_T7_NAME "AMS_Slave1_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG6_AMS_SLAVE1_T8_NAME "AMS_Slave1_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG6_AMS_SLAVE1_T9_NAME "AMS_Slave1_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG6_AMS_SLAVE1_T10_NAME "AMS_Slave1_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG6_AMS_SLAVE1_T11_NAME "AMS_Slave1_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG6_AMS_SLAVE1_T12_NAME "AMS_Slave1_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG6_AMS_SLAVE1_T13_NAME "AMS_Slave1_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG6_AMS_SLAVE1_T14_NAME "AMS_Slave1_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG6_AMS_SLAVE1_T15_NAME "AMS_Slave1_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG7_AMS_SLAVE1_T16_NAME "AMS_Slave1_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG7_AMS_SLAVE1_T17_NAME "AMS_Slave1_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG7_AMS_SLAVE1_T18_NAME "AMS_Slave1_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG7_AMS_SLAVE1_T19_NAME "AMS_Slave1_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG7_AMS_SLAVE1_T20_NAME "AMS_Slave1_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG7_AMS_SLAVE1_T21_NAME "AMS_Slave1_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG7_AMS_SLAVE1_T22_NAME "AMS_Slave1_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG7_AMS_SLAVE1_T23_NAME "AMS_Slave1_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG8_AMS_SLAVE1_T24_NAME "AMS_Slave1_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG8_AMS_SLAVE1_T25_NAME "AMS_Slave1_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG8_AMS_SLAVE1_T26_NAME "AMS_Slave1_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG8_AMS_SLAVE1_T27_NAME "AMS_Slave1_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG8_AMS_SLAVE1_T28_NAME "AMS_Slave1_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG8_AMS_SLAVE1_T29_NAME "AMS_Slave1_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG8_AMS_SLAVE1_T30_NAME "AMS_Slave1_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE1_LOG8_AMS_SLAVE1_T31_NAME "AMS_Slave1_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG0_AMS_SLAVE2_V0_NAME "AMS_Slave2_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG0_AMS_SLAVE2_V1_NAME "AMS_Slave2_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG0_AMS_SLAVE2_V2_NAME "AMS_Slave2_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG0_AMS_SLAVE2_V3_NAME "AMS_Slave2_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG1_AMS_SLAVE2_V4_NAME "AMS_Slave2_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG1_AMS_SLAVE2_V5_NAME "AMS_Slave2_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG1_AMS_SLAVE2_V6_NAME "AMS_Slave2_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG1_AMS_SLAVE2_V7_NAME "AMS_Slave2_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG2_AMS_SLAVE2_V8_NAME "AMS_Slave2_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG2_AMS_SLAVE2_V9_NAME "AMS_Slave2_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG2_AMS_SLAVE2_V10_NAME "AMS_Slave2_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG2_AMS_SLAVE2_V11_NAME "AMS_Slave2_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG3_AMS_SLAVE2_V12_NAME "AMS_Slave2_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG3_AMS_SLAVE2_V13_NAME "AMS_Slave2_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG3_AMS_SLAVE2_V14_NAME "AMS_Slave2_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG3_AMS_SLAVE2_V15_NAME "AMS_Slave2_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG4_AMS_SLAVE2_V16_NAME "AMS_Slave2_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG4_AMS_SLAVE2_FAILED_SENSORS_NAME "AMS_Slave2_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG5_AMS_SLAVE2_T0_NAME "AMS_Slave2_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG5_AMS_SLAVE2_T1_NAME "AMS_Slave2_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG5_AMS_SLAVE2_T2_NAME "AMS_Slave2_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG5_AMS_SLAVE2_T3_NAME "AMS_Slave2_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG5_AMS_SLAVE2_T4_NAME "AMS_Slave2_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG5_AMS_SLAVE2_T5_NAME "AMS_Slave2_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG5_AMS_SLAVE2_T6_NAME "AMS_Slave2_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG5_AMS_SLAVE2_T7_NAME "AMS_Slave2_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG6_AMS_SLAVE2_T8_NAME "AMS_Slave2_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG6_AMS_SLAVE2_T9_NAME "AMS_Slave2_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG6_AMS_SLAVE2_T10_NAME "AMS_Slave2_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG6_AMS_SLAVE2_T11_NAME "AMS_Slave2_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG6_AMS_SLAVE2_T12_NAME "AMS_Slave2_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG6_AMS_SLAVE2_T13_NAME "AMS_Slave2_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG6_AMS_SLAVE2_T14_NAME "AMS_Slave2_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG6_AMS_SLAVE2_T15_NAME "AMS_Slave2_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG7_AMS_SLAVE2_T16_NAME "AMS_Slave2_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG7_AMS_SLAVE2_T17_NAME "AMS_Slave2_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG7_AMS_SLAVE2_T18_NAME "AMS_Slave2_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG7_AMS_SLAVE2_T19_NAME "AMS_Slave2_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG7_AMS_SLAVE2_T20_NAME "AMS_Slave2_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG7_AMS_SLAVE2_T21_NAME "AMS_Slave2_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG7_AMS_SLAVE2_T22_NAME "AMS_Slave2_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG7_AMS_SLAVE2_T23_NAME "AMS_Slave2_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG8_AMS_SLAVE2_T24_NAME "AMS_Slave2_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG8_AMS_SLAVE2_T25_NAME "AMS_Slave2_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG8_AMS_SLAVE2_T26_NAME "AMS_Slave2_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG8_AMS_SLAVE2_T27_NAME "AMS_Slave2_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG8_AMS_SLAVE2_T28_NAME "AMS_Slave2_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG8_AMS_SLAVE2_T29_NAME "AMS_Slave2_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG8_AMS_SLAVE2_T30_NAME "AMS_Slave2_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE2_LOG8_AMS_SLAVE2_T31_NAME "AMS_Slave2_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG0_AMS_SLAVE3_V0_NAME "AMS_Slave3_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG0_AMS_SLAVE3_V1_NAME "AMS_Slave3_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG0_AMS_SLAVE3_V2_NAME "AMS_Slave3_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG0_AMS_SLAVE3_V3_NAME "AMS_Slave3_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG1_AMS_SLAVE3_V4_NAME "AMS_Slave3_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG1_AMS_SLAVE3_V5_NAME "AMS_Slave3_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG1_AMS_SLAVE3_V6_NAME "AMS_Slave3_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG1_AMS_SLAVE3_V7_NAME "AMS_Slave3_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG2_AMS_SLAVE3_V8_NAME "AMS_Slave3_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG2_AMS_SLAVE3_V9_NAME "AMS_Slave3_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG2_AMS_SLAVE3_V10_NAME "AMS_Slave3_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG2_AMS_SLAVE3_V11_NAME "AMS_Slave3_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG3_AMS_SLAVE3_V12_NAME "AMS_Slave3_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG3_AMS_SLAVE3_V13_NAME "AMS_Slave3_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG3_AMS_SLAVE3_V14_NAME "AMS_Slave3_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG3_AMS_SLAVE3_V15_NAME "AMS_Slave3_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG4_AMS_SLAVE3_V16_NAME "AMS_Slave3_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG4_AMS_SLAVE3_FAILED_SENSORS_NAME "AMS_Slave3_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG5_AMS_SLAVE3_T0_NAME "AMS_Slave3_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG5_AMS_SLAVE3_T1_NAME "AMS_Slave3_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG5_AMS_SLAVE3_T2_NAME "AMS_Slave3_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG5_AMS_SLAVE3_T3_NAME "AMS_Slave3_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG5_AMS_SLAVE3_T4_NAME "AMS_Slave3_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG5_AMS_SLAVE3_T5_NAME "AMS_Slave3_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG5_AMS_SLAVE3_T6_NAME "AMS_Slave3_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG5_AMS_SLAVE3_T7_NAME "AMS_Slave3_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG6_AMS_SLAVE3_T8_NAME "AMS_Slave3_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG6_AMS_SLAVE3_T9_NAME "AMS_Slave3_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG6_AMS_SLAVE3_T10_NAME "AMS_Slave3_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG6_AMS_SLAVE3_T11_NAME "AMS_Slave3_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG6_AMS_SLAVE3_T12_NAME "AMS_Slave3_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG6_AMS_SLAVE3_T13_NAME "AMS_Slave3_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG6_AMS_SLAVE3_T14_NAME "AMS_Slave3_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG6_AMS_SLAVE3_T15_NAME "AMS_Slave3_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG7_AMS_SLAVE3_T16_NAME "AMS_Slave3_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG7_AMS_SLAVE3_T17_NAME "AMS_Slave3_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG7_AMS_SLAVE3_T18_NAME "AMS_Slave3_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG7_AMS_SLAVE3_T19_NAME "AMS_Slave3_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG7_AMS_SLAVE3_T20_NAME "AMS_Slave3_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG7_AMS_SLAVE3_T21_NAME "AMS_Slave3_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG7_AMS_SLAVE3_T22_NAME "AMS_Slave3_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG7_AMS_SLAVE3_T23_NAME "AMS_Slave3_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG8_AMS_SLAVE3_T24_NAME "AMS_Slave3_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG8_AMS_SLAVE3_T25_NAME "AMS_Slave3_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG8_AMS_SLAVE3_T26_NAME "AMS_Slave3_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG8_AMS_SLAVE3_T27_NAME "AMS_Slave3_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG8_AMS_SLAVE3_T28_NAME "AMS_Slave3_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG8_AMS_SLAVE3_T29_NAME "AMS_Slave3_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG8_AMS_SLAVE3_T30_NAME "AMS_Slave3_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE3_LOG8_AMS_SLAVE3_T31_NAME "AMS_Slave3_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG0_AMS_SLAVE4_V0_NAME "AMS_Slave4_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG0_AMS_SLAVE4_V1_NAME "AMS_Slave4_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG0_AMS_SLAVE4_V2_NAME "AMS_Slave4_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG0_AMS_SLAVE4_V3_NAME "AMS_Slave4_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG1_AMS_SLAVE4_V4_NAME "AMS_Slave4_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG1_AMS_SLAVE4_V5_NAME "AMS_Slave4_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG1_AMS_SLAVE4_V6_NAME "AMS_Slave4_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG1_AMS_SLAVE4_V7_NAME "AMS_Slave4_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG2_AMS_SLAVE4_V8_NAME "AMS_Slave4_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG2_AMS_SLAVE4_V9_NAME "AMS_Slave4_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG2_AMS_SLAVE4_V10_NAME "AMS_Slave4_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG2_AMS_SLAVE4_V11_NAME "AMS_Slave4_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG3_AMS_SLAVE4_V12_NAME "AMS_Slave4_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG3_AMS_SLAVE4_V13_NAME "AMS_Slave4_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG3_AMS_SLAVE4_V14_NAME "AMS_Slave4_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG3_AMS_SLAVE4_V15_NAME "AMS_Slave4_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG4_AMS_SLAVE4_V16_NAME "AMS_Slave4_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG4_AMS_SLAVE4_FAILED_SENSORS_NAME "AMS_Slave4_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG5_AMS_SLAVE4_T0_NAME "AMS_Slave4_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG5_AMS_SLAVE4_T1_NAME "AMS_Slave4_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG5_AMS_SLAVE4_T2_NAME "AMS_Slave4_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG5_AMS_SLAVE4_T3_NAME "AMS_Slave4_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG5_AMS_SLAVE4_T4_NAME "AMS_Slave4_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG5_AMS_SLAVE4_T5_NAME "AMS_Slave4_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG5_AMS_SLAVE4_T6_NAME "AMS_Slave4_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG5_AMS_SLAVE4_T7_NAME "AMS_Slave4_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG6_AMS_SLAVE4_T8_NAME "AMS_Slave4_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG6_AMS_SLAVE4_T9_NAME "AMS_Slave4_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG6_AMS_SLAVE4_T10_NAME "AMS_Slave4_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG6_AMS_SLAVE4_T11_NAME "AMS_Slave4_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG6_AMS_SLAVE4_T12_NAME "AMS_Slave4_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG6_AMS_SLAVE4_T13_NAME "AMS_Slave4_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG6_AMS_SLAVE4_T14_NAME "AMS_Slave4_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG6_AMS_SLAVE4_T15_NAME "AMS_Slave4_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG7_AMS_SLAVE4_T16_NAME "AMS_Slave4_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG7_AMS_SLAVE4_T17_NAME "AMS_Slave4_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG7_AMS_SLAVE4_T18_NAME "AMS_Slave4_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG7_AMS_SLAVE4_T19_NAME "AMS_Slave4_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG7_AMS_SLAVE4_T20_NAME "AMS_Slave4_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG7_AMS_SLAVE4_T21_NAME "AMS_Slave4_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG7_AMS_SLAVE4_T22_NAME "AMS_Slave4_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG7_AMS_SLAVE4_T23_NAME "AMS_Slave4_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG8_AMS_SLAVE4_T24_NAME "AMS_Slave4_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG8_AMS_SLAVE4_T25_NAME "AMS_Slave4_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG8_AMS_SLAVE4_T26_NAME "AMS_Slave4_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG8_AMS_SLAVE4_T27_NAME "AMS_Slave4_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG8_AMS_SLAVE4_T28_NAME "AMS_Slave4_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG8_AMS_SLAVE4_T29_NAME "AMS_Slave4_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG8_AMS_SLAVE4_T30_NAME "AMS_Slave4_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE4_LOG8_AMS_SLAVE4_T31_NAME "AMS_Slave4_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG0_AMS_SLAVE5_V0_NAME "AMS_Slave5_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG0_AMS_SLAVE5_V1_NAME "AMS_Slave5_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG0_AMS_SLAVE5_V2_NAME "AMS_Slave5_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG0_AMS_SLAVE5_V3_NAME "AMS_Slave5_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG1_AMS_SLAVE5_V4_NAME "AMS_Slave5_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG1_AMS_SLAVE5_V5_NAME "AMS_Slave5_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG1_AMS_SLAVE5_V6_NAME "AMS_Slave5_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG1_AMS_SLAVE5_V7_NAME "AMS_Slave5_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG2_AMS_SLAVE5_V8_NAME "AMS_Slave5_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG2_AMS_SLAVE5_V9_NAME "AMS_Slave5_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG2_AMS_SLAVE5_V10_NAME "AMS_Slave5_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG2_AMS_SLAVE5_V11_NAME "AMS_Slave5_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG3_AMS_SLAVE5_V12_NAME "AMS_Slave5_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG3_AMS_SLAVE5_V13_NAME "AMS_Slave5_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG3_AMS_SLAVE5_V14_NAME "AMS_Slave5_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG3_AMS_SLAVE5_V15_NAME "AMS_Slave5_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG4_AMS_SLAVE5_V16_NAME "AMS_Slave5_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG4_AMS_SLAVE5_FAILED_SENSORS_NAME "AMS_Slave5_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG5_AMS_SLAVE5_T0_NAME "AMS_Slave5_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG5_AMS_SLAVE5_T1_NAME "AMS_Slave5_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG5_AMS_SLAVE5_T2_NAME "AMS_Slave5_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG5_AMS_SLAVE5_T3_NAME "AMS_Slave5_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG5_AMS_SLAVE5_T4_NAME "AMS_Slave5_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG5_AMS_SLAVE5_T5_NAME "AMS_Slave5_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG5_AMS_SLAVE5_T6_NAME "AMS_Slave5_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG5_AMS_SLAVE5_T7_NAME "AMS_Slave5_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG6_AMS_SLAVE5_T8_NAME "AMS_Slave5_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG6_AMS_SLAVE5_T9_NAME "AMS_Slave5_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG6_AMS_SLAVE5_T10_NAME "AMS_Slave5_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG6_AMS_SLAVE5_T11_NAME "AMS_Slave5_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG6_AMS_SLAVE5_T12_NAME "AMS_Slave5_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG6_AMS_SLAVE5_T13_NAME "AMS_Slave5_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG6_AMS_SLAVE5_T14_NAME "AMS_Slave5_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG6_AMS_SLAVE5_T15_NAME "AMS_Slave5_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG7_AMS_SLAVE5_T16_NAME "AMS_Slave5_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG7_AMS_SLAVE5_T17_NAME "AMS_Slave5_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG7_AMS_SLAVE5_T18_NAME "AMS_Slave5_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG7_AMS_SLAVE5_T19_NAME "AMS_Slave5_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG7_AMS_SLAVE5_T20_NAME "AMS_Slave5_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG7_AMS_SLAVE5_T21_NAME "AMS_Slave5_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG7_AMS_SLAVE5_T22_NAME "AMS_Slave5_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG7_AMS_SLAVE5_T23_NAME "AMS_Slave5_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG8_AMS_SLAVE5_T24_NAME "AMS_Slave5_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG8_AMS_SLAVE5_T25_NAME "AMS_Slave5_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG8_AMS_SLAVE5_T26_NAME "AMS_Slave5_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG8_AMS_SLAVE5_T27_NAME "AMS_Slave5_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG8_AMS_SLAVE5_T28_NAME "AMS_Slave5_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG8_AMS_SLAVE5_T29_NAME "AMS_Slave5_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG8_AMS_SLAVE5_T30_NAME "AMS_Slave5_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE5_LOG8_AMS_SLAVE5_T31_NAME "AMS_Slave5_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG0_AMS_SLAVE6_V0_NAME "AMS_Slave6_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG0_AMS_SLAVE6_V1_NAME "AMS_Slave6_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG0_AMS_SLAVE6_V2_NAME "AMS_Slave6_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG0_AMS_SLAVE6_V3_NAME "AMS_Slave6_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG1_AMS_SLAVE6_V4_NAME "AMS_Slave6_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG1_AMS_SLAVE6_V5_NAME "AMS_Slave6_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG1_AMS_SLAVE6_V6_NAME "AMS_Slave6_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG1_AMS_SLAVE6_V7_NAME "AMS_Slave6_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG2_AMS_SLAVE6_V8_NAME "AMS_Slave6_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG2_AMS_SLAVE6_V9_NAME "AMS_Slave6_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG2_AMS_SLAVE6_V10_NAME "AMS_Slave6_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG2_AMS_SLAVE6_V11_NAME "AMS_Slave6_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG3_AMS_SLAVE6_V12_NAME "AMS_Slave6_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG3_AMS_SLAVE6_V13_NAME "AMS_Slave6_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG3_AMS_SLAVE6_V14_NAME "AMS_Slave6_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG3_AMS_SLAVE6_V15_NAME "AMS_Slave6_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG4_AMS_SLAVE6_V16_NAME "AMS_Slave6_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG4_AMS_SLAVE6_FAILED_SENSORS_NAME "AMS_Slave6_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG5_AMS_SLAVE6_T0_NAME "AMS_Slave6_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG5_AMS_SLAVE6_T1_NAME "AMS_Slave6_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG5_AMS_SLAVE6_T2_NAME "AMS_Slave6_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG5_AMS_SLAVE6_T3_NAME "AMS_Slave6_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG5_AMS_SLAVE6_T4_NAME "AMS_Slave6_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG5_AMS_SLAVE6_T5_NAME "AMS_Slave6_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG5_AMS_SLAVE6_T6_NAME "AMS_Slave6_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG5_AMS_SLAVE6_T7_NAME "AMS_Slave6_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG6_AMS_SLAVE6_T8_NAME "AMS_Slave6_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG6_AMS_SLAVE6_T9_NAME "AMS_Slave6_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG6_AMS_SLAVE6_T10_NAME "AMS_Slave6_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG6_AMS_SLAVE6_T11_NAME "AMS_Slave6_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG6_AMS_SLAVE6_T12_NAME "AMS_Slave6_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG6_AMS_SLAVE6_T13_NAME "AMS_Slave6_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG6_AMS_SLAVE6_T14_NAME "AMS_Slave6_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG6_AMS_SLAVE6_T15_NAME "AMS_Slave6_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG7_AMS_SLAVE6_T16_NAME "AMS_Slave6_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG7_AMS_SLAVE6_T17_NAME "AMS_Slave6_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG7_AMS_SLAVE6_T18_NAME "AMS_Slave6_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG7_AMS_SLAVE6_T19_NAME "AMS_Slave6_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG7_AMS_SLAVE6_T20_NAME "AMS_Slave6_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG7_AMS_SLAVE6_T21_NAME "AMS_Slave6_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG7_AMS_SLAVE6_T22_NAME "AMS_Slave6_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG7_AMS_SLAVE6_T23_NAME "AMS_Slave6_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG8_AMS_SLAVE6_T24_NAME "AMS_Slave6_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG8_AMS_SLAVE6_T25_NAME "AMS_Slave6_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG8_AMS_SLAVE6_T26_NAME "AMS_Slave6_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG8_AMS_SLAVE6_T27_NAME "AMS_Slave6_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG8_AMS_SLAVE6_T28_NAME "AMS_Slave6_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG8_AMS_SLAVE6_T29_NAME "AMS_Slave6_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG8_AMS_SLAVE6_T30_NAME "AMS_Slave6_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE6_LOG8_AMS_SLAVE6_T31_NAME "AMS_Slave6_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG0_AMS_SLAVE7_V0_NAME "AMS_Slave7_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG0_AMS_SLAVE7_V1_NAME "AMS_Slave7_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG0_AMS_SLAVE7_V2_NAME "AMS_Slave7_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG0_AMS_SLAVE7_V3_NAME "AMS_Slave7_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG1_AMS_SLAVE7_V4_NAME "AMS_Slave7_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG1_AMS_SLAVE7_V5_NAME "AMS_Slave7_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG1_AMS_SLAVE7_V6_NAME "AMS_Slave7_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG1_AMS_SLAVE7_V7_NAME "AMS_Slave7_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG2_AMS_SLAVE7_V8_NAME "AMS_Slave7_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG2_AMS_SLAVE7_V9_NAME "AMS_Slave7_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG2_AMS_SLAVE7_V10_NAME "AMS_Slave7_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG2_AMS_SLAVE7_V11_NAME "AMS_Slave7_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG3_AMS_SLAVE7_V12_NAME "AMS_Slave7_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG3_AMS_SLAVE7_V13_NAME "AMS_Slave7_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG3_AMS_SLAVE7_V14_NAME "AMS_Slave7_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG3_AMS_SLAVE7_V15_NAME "AMS_Slave7_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG4_AMS_SLAVE7_V16_NAME "AMS_Slave7_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG4_AMS_SLAVE7_FAILED_SENSORS_NAME "AMS_Slave7_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG5_AMS_SLAVE7_T0_NAME "AMS_Slave7_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG5_AMS_SLAVE7_T1_NAME "AMS_Slave7_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG5_AMS_SLAVE7_T2_NAME "AMS_Slave7_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG5_AMS_SLAVE7_T3_NAME "AMS_Slave7_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG5_AMS_SLAVE7_T4_NAME "AMS_Slave7_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG5_AMS_SLAVE7_T5_NAME "AMS_Slave7_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG5_AMS_SLAVE7_T6_NAME "AMS_Slave7_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG5_AMS_SLAVE7_T7_NAME "AMS_Slave7_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG6_AMS_SLAVE7_T8_NAME "AMS_Slave7_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG6_AMS_SLAVE7_T9_NAME "AMS_Slave7_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG6_AMS_SLAVE7_T10_NAME "AMS_Slave7_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG6_AMS_SLAVE7_T11_NAME "AMS_Slave7_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG6_AMS_SLAVE7_T12_NAME "AMS_Slave7_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG6_AMS_SLAVE7_T13_NAME "AMS_Slave7_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG6_AMS_SLAVE7_T14_NAME "AMS_Slave7_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG6_AMS_SLAVE7_T15_NAME "AMS_Slave7_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG7_AMS_SLAVE7_T16_NAME "AMS_Slave7_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG7_AMS_SLAVE7_T17_NAME "AMS_Slave7_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG7_AMS_SLAVE7_T18_NAME "AMS_Slave7_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG7_AMS_SLAVE7_T19_NAME "AMS_Slave7_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG7_AMS_SLAVE7_T20_NAME "AMS_Slave7_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG7_AMS_SLAVE7_T21_NAME "AMS_Slave7_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG7_AMS_SLAVE7_T22_NAME "AMS_Slave7_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG7_AMS_SLAVE7_T23_NAME "AMS_Slave7_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG8_AMS_SLAVE7_T24_NAME "AMS_Slave7_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG8_AMS_SLAVE7_T25_NAME "AMS_Slave7_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG8_AMS_SLAVE7_T26_NAME "AMS_Slave7_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG8_AMS_SLAVE7_T27_NAME "AMS_Slave7_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG8_AMS_SLAVE7_T28_NAME "AMS_Slave7_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG8_AMS_SLAVE7_T29_NAME "AMS_Slave7_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG8_AMS_SLAVE7_T30_NAME "AMS_Slave7_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE7_LOG8_AMS_SLAVE7_T31_NAME "AMS_Slave7_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG0_AMS_SLAVE8_V0_NAME "AMS_Slave8_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG0_AMS_SLAVE8_V1_NAME "AMS_Slave8_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG0_AMS_SLAVE8_V2_NAME "AMS_Slave8_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG0_AMS_SLAVE8_V3_NAME "AMS_Slave8_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG1_AMS_SLAVE8_V4_NAME "AMS_Slave8_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG1_AMS_SLAVE8_V5_NAME "AMS_Slave8_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG1_AMS_SLAVE8_V6_NAME "AMS_Slave8_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG1_AMS_SLAVE8_V7_NAME "AMS_Slave8_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG2_AMS_SLAVE8_V8_NAME "AMS_Slave8_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG2_AMS_SLAVE8_V9_NAME "AMS_Slave8_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG2_AMS_SLAVE8_V10_NAME "AMS_Slave8_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG2_AMS_SLAVE8_V11_NAME "AMS_Slave8_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG3_AMS_SLAVE8_V12_NAME "AMS_Slave8_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG3_AMS_SLAVE8_V13_NAME "AMS_Slave8_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG3_AMS_SLAVE8_V14_NAME "AMS_Slave8_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG3_AMS_SLAVE8_V15_NAME "AMS_Slave8_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG4_AMS_SLAVE8_V16_NAME "AMS_Slave8_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG4_AMS_SLAVE8_FAILED_SENSORS_NAME "AMS_Slave8_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG5_AMS_SLAVE8_T0_NAME "AMS_Slave8_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG5_AMS_SLAVE8_T1_NAME "AMS_Slave8_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG5_AMS_SLAVE8_T2_NAME "AMS_Slave8_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG5_AMS_SLAVE8_T3_NAME "AMS_Slave8_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG5_AMS_SLAVE8_T4_NAME "AMS_Slave8_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG5_AMS_SLAVE8_T5_NAME "AMS_Slave8_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG5_AMS_SLAVE8_T6_NAME "AMS_Slave8_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG5_AMS_SLAVE8_T7_NAME "AMS_Slave8_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG6_AMS_SLAVE8_T8_NAME "AMS_Slave8_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG6_AMS_SLAVE8_T9_NAME "AMS_Slave8_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG6_AMS_SLAVE8_T10_NAME "AMS_Slave8_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG6_AMS_SLAVE8_T11_NAME "AMS_Slave8_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG6_AMS_SLAVE8_T12_NAME "AMS_Slave8_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG6_AMS_SLAVE8_T13_NAME "AMS_Slave8_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG6_AMS_SLAVE8_T14_NAME "AMS_Slave8_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG6_AMS_SLAVE8_T15_NAME "AMS_Slave8_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG7_AMS_SLAVE8_T16_NAME "AMS_Slave8_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG7_AMS_SLAVE8_T17_NAME "AMS_Slave8_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG7_AMS_SLAVE8_T18_NAME "AMS_Slave8_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG7_AMS_SLAVE8_T19_NAME "AMS_Slave8_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG7_AMS_SLAVE8_T20_NAME "AMS_Slave8_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG7_AMS_SLAVE8_T21_NAME "AMS_Slave8_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG7_AMS_SLAVE8_T22_NAME "AMS_Slave8_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG7_AMS_SLAVE8_T23_NAME "AMS_Slave8_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG8_AMS_SLAVE8_T24_NAME "AMS_Slave8_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG8_AMS_SLAVE8_T25_NAME "AMS_Slave8_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG8_AMS_SLAVE8_T26_NAME "AMS_Slave8_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG8_AMS_SLAVE8_T27_NAME "AMS_Slave8_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG8_AMS_SLAVE8_T28_NAME "AMS_Slave8_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG8_AMS_SLAVE8_T29_NAME "AMS_Slave8_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG8_AMS_SLAVE8_T30_NAME "AMS_Slave8_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE8_LOG8_AMS_SLAVE8_T31_NAME "AMS_Slave8_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG0_AMS_SLAVE9_V0_NAME "AMS_Slave9_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG0_AMS_SLAVE9_V1_NAME "AMS_Slave9_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG0_AMS_SLAVE9_V2_NAME "AMS_Slave9_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG0_AMS_SLAVE9_V3_NAME "AMS_Slave9_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG1_AMS_SLAVE9_V4_NAME "AMS_Slave9_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG1_AMS_SLAVE9_V5_NAME "AMS_Slave9_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG1_AMS_SLAVE9_V6_NAME "AMS_Slave9_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG1_AMS_SLAVE9_V7_NAME "AMS_Slave9_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG2_AMS_SLAVE9_V8_NAME "AMS_Slave9_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG2_AMS_SLAVE9_V9_NAME "AMS_Slave9_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG2_AMS_SLAVE9_V10_NAME "AMS_Slave9_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG2_AMS_SLAVE9_V11_NAME "AMS_Slave9_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG3_AMS_SLAVE9_V12_NAME "AMS_Slave9_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG3_AMS_SLAVE9_V13_NAME "AMS_Slave9_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG3_AMS_SLAVE9_V14_NAME "AMS_Slave9_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG3_AMS_SLAVE9_V15_NAME "AMS_Slave9_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG4_AMS_SLAVE9_V16_NAME "AMS_Slave9_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG4_AMS_SLAVE9_FAILED_SENSORS_NAME "AMS_Slave9_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG5_AMS_SLAVE9_T0_NAME "AMS_Slave9_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG5_AMS_SLAVE9_T1_NAME "AMS_Slave9_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG5_AMS_SLAVE9_T2_NAME "AMS_Slave9_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG5_AMS_SLAVE9_T3_NAME "AMS_Slave9_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG5_AMS_SLAVE9_T4_NAME "AMS_Slave9_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG5_AMS_SLAVE9_T5_NAME "AMS_Slave9_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG5_AMS_SLAVE9_T6_NAME "AMS_Slave9_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG5_AMS_SLAVE9_T7_NAME "AMS_Slave9_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG6_AMS_SLAVE9_T8_NAME "AMS_Slave9_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG6_AMS_SLAVE9_T9_NAME "AMS_Slave9_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG6_AMS_SLAVE9_T10_NAME "AMS_Slave9_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG6_AMS_SLAVE9_T11_NAME "AMS_Slave9_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG6_AMS_SLAVE9_T12_NAME "AMS_Slave9_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG6_AMS_SLAVE9_T13_NAME "AMS_Slave9_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG6_AMS_SLAVE9_T14_NAME "AMS_Slave9_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG6_AMS_SLAVE9_T15_NAME "AMS_Slave9_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG7_AMS_SLAVE9_T16_NAME "AMS_Slave9_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG7_AMS_SLAVE9_T17_NAME "AMS_Slave9_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG7_AMS_SLAVE9_T18_NAME "AMS_Slave9_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG7_AMS_SLAVE9_T19_NAME "AMS_Slave9_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG7_AMS_SLAVE9_T20_NAME "AMS_Slave9_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG7_AMS_SLAVE9_T21_NAME "AMS_Slave9_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG7_AMS_SLAVE9_T22_NAME "AMS_Slave9_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG7_AMS_SLAVE9_T23_NAME "AMS_Slave9_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG8_AMS_SLAVE9_T24_NAME "AMS_Slave9_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG8_AMS_SLAVE9_T25_NAME "AMS_Slave9_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG8_AMS_SLAVE9_T26_NAME "AMS_Slave9_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG8_AMS_SLAVE9_T27_NAME "AMS_Slave9_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG8_AMS_SLAVE9_T28_NAME "AMS_Slave9_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG8_AMS_SLAVE9_T29_NAME "AMS_Slave9_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG8_AMS_SLAVE9_T30_NAME "AMS_Slave9_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE9_LOG8_AMS_SLAVE9_T31_NAME "AMS_Slave9_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG0_AMS_SLAVE10_V0_NAME "AMS_Slave10_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG0_AMS_SLAVE10_V1_NAME "AMS_Slave10_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG0_AMS_SLAVE10_V2_NAME "AMS_Slave10_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG0_AMS_SLAVE10_V3_NAME "AMS_Slave10_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG1_AMS_SLAVE10_V4_NAME "AMS_Slave10_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG1_AMS_SLAVE10_V5_NAME "AMS_Slave10_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG1_AMS_SLAVE10_V6_NAME "AMS_Slave10_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG1_AMS_SLAVE10_V7_NAME "AMS_Slave10_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG2_AMS_SLAVE10_V8_NAME "AMS_Slave10_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG2_AMS_SLAVE10_V9_NAME "AMS_Slave10_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG2_AMS_SLAVE10_V10_NAME "AMS_Slave10_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG2_AMS_SLAVE10_V11_NAME "AMS_Slave10_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG3_AMS_SLAVE10_V12_NAME "AMS_Slave10_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG3_AMS_SLAVE10_V13_NAME "AMS_Slave10_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG3_AMS_SLAVE10_V14_NAME "AMS_Slave10_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG3_AMS_SLAVE10_V15_NAME "AMS_Slave10_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG4_AMS_SLAVE10_V16_NAME "AMS_Slave10_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG4_AMS_SLAVE10_FAILED_SENSORS_NAME "AMS_Slave10_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG5_AMS_SLAVE10_T0_NAME "AMS_Slave10_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG5_AMS_SLAVE10_T1_NAME "AMS_Slave10_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG5_AMS_SLAVE10_T2_NAME "AMS_Slave10_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG5_AMS_SLAVE10_T3_NAME "AMS_Slave10_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG5_AMS_SLAVE10_T4_NAME "AMS_Slave10_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG5_AMS_SLAVE10_T5_NAME "AMS_Slave10_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG5_AMS_SLAVE10_T6_NAME "AMS_Slave10_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG5_AMS_SLAVE10_T7_NAME "AMS_Slave10_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG6_AMS_SLAVE10_T8_NAME "AMS_Slave10_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG6_AMS_SLAVE10_T9_NAME "AMS_Slave10_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG6_AMS_SLAVE10_T10_NAME "AMS_Slave10_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG6_AMS_SLAVE10_T11_NAME "AMS_Slave10_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG6_AMS_SLAVE10_T12_NAME "AMS_Slave10_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG6_AMS_SLAVE10_T13_NAME "AMS_Slave10_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG6_AMS_SLAVE10_T14_NAME "AMS_Slave10_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG6_AMS_SLAVE10_T15_NAME "AMS_Slave10_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG7_AMS_SLAVE10_T16_NAME "AMS_Slave10_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG7_AMS_SLAVE10_T17_NAME "AMS_Slave10_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG7_AMS_SLAVE10_T18_NAME "AMS_Slave10_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG7_AMS_SLAVE10_T19_NAME "AMS_Slave10_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG7_AMS_SLAVE10_T20_NAME "AMS_Slave10_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG7_AMS_SLAVE10_T21_NAME "AMS_Slave10_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG7_AMS_SLAVE10_T22_NAME "AMS_Slave10_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG7_AMS_SLAVE10_T23_NAME "AMS_Slave10_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG8_AMS_SLAVE10_T24_NAME "AMS_Slave10_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG8_AMS_SLAVE10_T25_NAME "AMS_Slave10_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG8_AMS_SLAVE10_T26_NAME "AMS_Slave10_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG8_AMS_SLAVE10_T27_NAME "AMS_Slave10_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG8_AMS_SLAVE10_T28_NAME "AMS_Slave10_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG8_AMS_SLAVE10_T29_NAME "AMS_Slave10_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG8_AMS_SLAVE10_T30_NAME "AMS_Slave10_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE10_LOG8_AMS_SLAVE10_T31_NAME "AMS_Slave10_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG0_AMS_SLAVE11_V0_NAME "AMS_Slave11_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG0_AMS_SLAVE11_V1_NAME "AMS_Slave11_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG0_AMS_SLAVE11_V2_NAME "AMS_Slave11_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG0_AMS_SLAVE11_V3_NAME "AMS_Slave11_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG1_AMS_SLAVE11_V4_NAME "AMS_Slave11_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG1_AMS_SLAVE11_V5_NAME "AMS_Slave11_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG1_AMS_SLAVE11_V6_NAME "AMS_Slave11_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG1_AMS_SLAVE11_V7_NAME "AMS_Slave11_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG2_AMS_SLAVE11_V8_NAME "AMS_Slave11_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG2_AMS_SLAVE11_V9_NAME "AMS_Slave11_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG2_AMS_SLAVE11_V10_NAME "AMS_Slave11_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG2_AMS_SLAVE11_V11_NAME "AMS_Slave11_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG3_AMS_SLAVE11_V12_NAME "AMS_Slave11_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG3_AMS_SLAVE11_V13_NAME "AMS_Slave11_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG3_AMS_SLAVE11_V14_NAME "AMS_Slave11_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG3_AMS_SLAVE11_V15_NAME "AMS_Slave11_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG4_AMS_SLAVE11_V16_NAME "AMS_Slave11_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG4_AMS_SLAVE11_FAILED_SENSORS_NAME "AMS_Slave11_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG5_AMS_SLAVE11_T0_NAME "AMS_Slave11_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG5_AMS_SLAVE11_T1_NAME "AMS_Slave11_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG5_AMS_SLAVE11_T2_NAME "AMS_Slave11_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG5_AMS_SLAVE11_T3_NAME "AMS_Slave11_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG5_AMS_SLAVE11_T4_NAME "AMS_Slave11_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG5_AMS_SLAVE11_T5_NAME "AMS_Slave11_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG5_AMS_SLAVE11_T6_NAME "AMS_Slave11_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG5_AMS_SLAVE11_T7_NAME "AMS_Slave11_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG6_AMS_SLAVE11_T8_NAME "AMS_Slave11_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG6_AMS_SLAVE11_T9_NAME "AMS_Slave11_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG6_AMS_SLAVE11_T10_NAME "AMS_Slave11_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG6_AMS_SLAVE11_T11_NAME "AMS_Slave11_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG6_AMS_SLAVE11_T12_NAME "AMS_Slave11_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG6_AMS_SLAVE11_T13_NAME "AMS_Slave11_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG6_AMS_SLAVE11_T14_NAME "AMS_Slave11_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG6_AMS_SLAVE11_T15_NAME "AMS_Slave11_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG7_AMS_SLAVE11_T16_NAME "AMS_Slave11_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG7_AMS_SLAVE11_T17_NAME "AMS_Slave11_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG7_AMS_SLAVE11_T18_NAME "AMS_Slave11_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG7_AMS_SLAVE11_T19_NAME "AMS_Slave11_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG7_AMS_SLAVE11_T20_NAME "AMS_Slave11_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG7_AMS_SLAVE11_T21_NAME "AMS_Slave11_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG7_AMS_SLAVE11_T22_NAME "AMS_Slave11_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG7_AMS_SLAVE11_T23_NAME "AMS_Slave11_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG8_AMS_SLAVE11_T24_NAME "AMS_Slave11_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG8_AMS_SLAVE11_T25_NAME "AMS_Slave11_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG8_AMS_SLAVE11_T26_NAME "AMS_Slave11_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG8_AMS_SLAVE11_T27_NAME "AMS_Slave11_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG8_AMS_SLAVE11_T28_NAME "AMS_Slave11_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG8_AMS_SLAVE11_T29_NAME "AMS_Slave11_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG8_AMS_SLAVE11_T30_NAME "AMS_Slave11_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE11_LOG8_AMS_SLAVE11_T31_NAME "AMS_Slave11_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG0_AMS_SLAVE12_V0_NAME "AMS_Slave12_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG0_AMS_SLAVE12_V1_NAME "AMS_Slave12_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG0_AMS_SLAVE12_V2_NAME "AMS_Slave12_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG0_AMS_SLAVE12_V3_NAME "AMS_Slave12_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG1_AMS_SLAVE12_V4_NAME "AMS_Slave12_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG1_AMS_SLAVE12_V5_NAME "AMS_Slave12_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG1_AMS_SLAVE12_V6_NAME "AMS_Slave12_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG1_AMS_SLAVE12_V7_NAME "AMS_Slave12_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG2_AMS_SLAVE12_V8_NAME "AMS_Slave12_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG2_AMS_SLAVE12_V9_NAME "AMS_Slave12_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG2_AMS_SLAVE12_V10_NAME "AMS_Slave12_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG2_AMS_SLAVE12_V11_NAME "AMS_Slave12_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG3_AMS_SLAVE12_V12_NAME "AMS_Slave12_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG3_AMS_SLAVE12_V13_NAME "AMS_Slave12_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG3_AMS_SLAVE12_V14_NAME "AMS_Slave12_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG3_AMS_SLAVE12_V15_NAME "AMS_Slave12_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG4_AMS_SLAVE12_V16_NAME "AMS_Slave12_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG4_AMS_SLAVE12_FAILED_SENSORS_NAME "AMS_Slave12_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG5_AMS_SLAVE12_T0_NAME "AMS_Slave12_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG5_AMS_SLAVE12_T1_NAME "AMS_Slave12_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG5_AMS_SLAVE12_T2_NAME "AMS_Slave12_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG5_AMS_SLAVE12_T3_NAME "AMS_Slave12_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG5_AMS_SLAVE12_T4_NAME "AMS_Slave12_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG5_AMS_SLAVE12_T5_NAME "AMS_Slave12_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG5_AMS_SLAVE12_T6_NAME "AMS_Slave12_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG5_AMS_SLAVE12_T7_NAME "AMS_Slave12_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG6_AMS_SLAVE12_T8_NAME "AMS_Slave12_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG6_AMS_SLAVE12_T9_NAME "AMS_Slave12_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG6_AMS_SLAVE12_T10_NAME "AMS_Slave12_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG6_AMS_SLAVE12_T11_NAME "AMS_Slave12_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG6_AMS_SLAVE12_T12_NAME "AMS_Slave12_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG6_AMS_SLAVE12_T13_NAME "AMS_Slave12_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG6_AMS_SLAVE12_T14_NAME "AMS_Slave12_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG6_AMS_SLAVE12_T15_NAME "AMS_Slave12_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG7_AMS_SLAVE12_T16_NAME "AMS_Slave12_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG7_AMS_SLAVE12_T17_NAME "AMS_Slave12_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG7_AMS_SLAVE12_T18_NAME "AMS_Slave12_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG7_AMS_SLAVE12_T19_NAME "AMS_Slave12_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG7_AMS_SLAVE12_T20_NAME "AMS_Slave12_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG7_AMS_SLAVE12_T21_NAME "AMS_Slave12_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG7_AMS_SLAVE12_T22_NAME "AMS_Slave12_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG7_AMS_SLAVE12_T23_NAME "AMS_Slave12_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG8_AMS_SLAVE12_T24_NAME "AMS_Slave12_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG8_AMS_SLAVE12_T25_NAME "AMS_Slave12_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG8_AMS_SLAVE12_T26_NAME "AMS_Slave12_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG8_AMS_SLAVE12_T27_NAME "AMS_Slave12_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG8_AMS_SLAVE12_T28_NAME "AMS_Slave12_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG8_AMS_SLAVE12_T29_NAME "AMS_Slave12_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG8_AMS_SLAVE12_T30_NAME "AMS_Slave12_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE12_LOG8_AMS_SLAVE12_T31_NAME "AMS_Slave12_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG0_AMS_SLAVE13_V0_NAME "AMS_Slave13_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG0_AMS_SLAVE13_V1_NAME "AMS_Slave13_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG0_AMS_SLAVE13_V2_NAME "AMS_Slave13_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG0_AMS_SLAVE13_V3_NAME "AMS_Slave13_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG1_AMS_SLAVE13_V4_NAME "AMS_Slave13_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG1_AMS_SLAVE13_V5_NAME "AMS_Slave13_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG1_AMS_SLAVE13_V6_NAME "AMS_Slave13_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG1_AMS_SLAVE13_V7_NAME "AMS_Slave13_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG2_AMS_SLAVE13_V8_NAME "AMS_Slave13_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG2_AMS_SLAVE13_V9_NAME "AMS_Slave13_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG2_AMS_SLAVE13_V10_NAME "AMS_Slave13_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG2_AMS_SLAVE13_V11_NAME "AMS_Slave13_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG3_AMS_SLAVE13_V12_NAME "AMS_Slave13_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG3_AMS_SLAVE13_V13_NAME "AMS_Slave13_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG3_AMS_SLAVE13_V14_NAME "AMS_Slave13_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG3_AMS_SLAVE13_V15_NAME "AMS_Slave13_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG4_AMS_SLAVE13_V16_NAME "AMS_Slave13_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG4_AMS_SLAVE13_FAILED_SENSORS_NAME "AMS_Slave13_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG5_AMS_SLAVE13_T0_NAME "AMS_Slave13_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG5_AMS_SLAVE13_T1_NAME "AMS_Slave13_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG5_AMS_SLAVE13_T2_NAME "AMS_Slave13_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG5_AMS_SLAVE13_T3_NAME "AMS_Slave13_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG5_AMS_SLAVE13_T4_NAME "AMS_Slave13_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG5_AMS_SLAVE13_T5_NAME "AMS_Slave13_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG5_AMS_SLAVE13_T6_NAME "AMS_Slave13_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG5_AMS_SLAVE13_T7_NAME "AMS_Slave13_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG6_AMS_SLAVE13_T8_NAME "AMS_Slave13_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG6_AMS_SLAVE13_T9_NAME "AMS_Slave13_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG6_AMS_SLAVE13_T10_NAME "AMS_Slave13_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG6_AMS_SLAVE13_T11_NAME "AMS_Slave13_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG6_AMS_SLAVE13_T12_NAME "AMS_Slave13_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG6_AMS_SLAVE13_T13_NAME "AMS_Slave13_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG6_AMS_SLAVE13_T14_NAME "AMS_Slave13_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG6_AMS_SLAVE13_T15_NAME "AMS_Slave13_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG7_AMS_SLAVE13_T16_NAME "AMS_Slave13_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG7_AMS_SLAVE13_T17_NAME "AMS_Slave13_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG7_AMS_SLAVE13_T18_NAME "AMS_Slave13_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG7_AMS_SLAVE13_T19_NAME "AMS_Slave13_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG7_AMS_SLAVE13_T20_NAME "AMS_Slave13_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG7_AMS_SLAVE13_T21_NAME "AMS_Slave13_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG7_AMS_SLAVE13_T22_NAME "AMS_Slave13_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG7_AMS_SLAVE13_T23_NAME "AMS_Slave13_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG8_AMS_SLAVE13_T24_NAME "AMS_Slave13_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG8_AMS_SLAVE13_T25_NAME "AMS_Slave13_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG8_AMS_SLAVE13_T26_NAME "AMS_Slave13_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG8_AMS_SLAVE13_T27_NAME "AMS_Slave13_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG8_AMS_SLAVE13_T28_NAME "AMS_Slave13_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG8_AMS_SLAVE13_T29_NAME "AMS_Slave13_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG8_AMS_SLAVE13_T30_NAME "AMS_Slave13_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE13_LOG8_AMS_SLAVE13_T31_NAME "AMS_Slave13_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG0_AMS_SLAVE14_V0_NAME "AMS_Slave14_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG0_AMS_SLAVE14_V1_NAME "AMS_Slave14_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG0_AMS_SLAVE14_V2_NAME "AMS_Slave14_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG0_AMS_SLAVE14_V3_NAME "AMS_Slave14_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG1_AMS_SLAVE14_V4_NAME "AMS_Slave14_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG1_AMS_SLAVE14_V5_NAME "AMS_Slave14_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG1_AMS_SLAVE14_V6_NAME "AMS_Slave14_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG1_AMS_SLAVE14_V7_NAME "AMS_Slave14_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG2_AMS_SLAVE14_V8_NAME "AMS_Slave14_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG2_AMS_SLAVE14_V9_NAME "AMS_Slave14_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG2_AMS_SLAVE14_V10_NAME "AMS_Slave14_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG2_AMS_SLAVE14_V11_NAME "AMS_Slave14_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG3_AMS_SLAVE14_V12_NAME "AMS_Slave14_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG3_AMS_SLAVE14_V13_NAME "AMS_Slave14_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG3_AMS_SLAVE14_V14_NAME "AMS_Slave14_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG3_AMS_SLAVE14_V15_NAME "AMS_Slave14_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG4_AMS_SLAVE14_V16_NAME "AMS_Slave14_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG4_AMS_SLAVE14_FAILED_SENSORS_NAME "AMS_Slave14_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG5_AMS_SLAVE14_T0_NAME "AMS_Slave14_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG5_AMS_SLAVE14_T1_NAME "AMS_Slave14_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG5_AMS_SLAVE14_T2_NAME "AMS_Slave14_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG5_AMS_SLAVE14_T3_NAME "AMS_Slave14_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG5_AMS_SLAVE14_T4_NAME "AMS_Slave14_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG5_AMS_SLAVE14_T5_NAME "AMS_Slave14_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG5_AMS_SLAVE14_T6_NAME "AMS_Slave14_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG5_AMS_SLAVE14_T7_NAME "AMS_Slave14_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG6_AMS_SLAVE14_T8_NAME "AMS_Slave14_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG6_AMS_SLAVE14_T9_NAME "AMS_Slave14_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG6_AMS_SLAVE14_T10_NAME "AMS_Slave14_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG6_AMS_SLAVE14_T11_NAME "AMS_Slave14_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG6_AMS_SLAVE14_T12_NAME "AMS_Slave14_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG6_AMS_SLAVE14_T13_NAME "AMS_Slave14_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG6_AMS_SLAVE14_T14_NAME "AMS_Slave14_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG6_AMS_SLAVE14_T15_NAME "AMS_Slave14_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG7_AMS_SLAVE14_T16_NAME "AMS_Slave14_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG7_AMS_SLAVE14_T17_NAME "AMS_Slave14_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG7_AMS_SLAVE14_T18_NAME "AMS_Slave14_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG7_AMS_SLAVE14_T19_NAME "AMS_Slave14_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG7_AMS_SLAVE14_T20_NAME "AMS_Slave14_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG7_AMS_SLAVE14_T21_NAME "AMS_Slave14_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG7_AMS_SLAVE14_T22_NAME "AMS_Slave14_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG7_AMS_SLAVE14_T23_NAME "AMS_Slave14_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG8_AMS_SLAVE14_T24_NAME "AMS_Slave14_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG8_AMS_SLAVE14_T25_NAME "AMS_Slave14_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG8_AMS_SLAVE14_T26_NAME "AMS_Slave14_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG8_AMS_SLAVE14_T27_NAME "AMS_Slave14_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG8_AMS_SLAVE14_T28_NAME "AMS_Slave14_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG8_AMS_SLAVE14_T29_NAME "AMS_Slave14_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG8_AMS_SLAVE14_T30_NAME "AMS_Slave14_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE14_LOG8_AMS_SLAVE14_T31_NAME "AMS_Slave14_T31"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG0_AMS_SLAVE15_V0_NAME "AMS_Slave15_V0"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG0_AMS_SLAVE15_V1_NAME "AMS_Slave15_V1"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG0_AMS_SLAVE15_V2_NAME "AMS_Slave15_V2"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG0_AMS_SLAVE15_V3_NAME "AMS_Slave15_V3"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG1_AMS_SLAVE15_V4_NAME "AMS_Slave15_V4"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG1_AMS_SLAVE15_V5_NAME "AMS_Slave15_V5"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG1_AMS_SLAVE15_V6_NAME "AMS_Slave15_V6"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG1_AMS_SLAVE15_V7_NAME "AMS_Slave15_V7"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG2_AMS_SLAVE15_V8_NAME "AMS_Slave15_V8"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG2_AMS_SLAVE15_V9_NAME "AMS_Slave15_V9"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG2_AMS_SLAVE15_V10_NAME "AMS_Slave15_V10"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG2_AMS_SLAVE15_V11_NAME "AMS_Slave15_V11"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG3_AMS_SLAVE15_V12_NAME "AMS_Slave15_V12"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG3_AMS_SLAVE15_V13_NAME "AMS_Slave15_V13"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG3_AMS_SLAVE15_V14_NAME "AMS_Slave15_V14"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG3_AMS_SLAVE15_V15_NAME "AMS_Slave15_V15"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG4_AMS_SLAVE15_V16_NAME "AMS_Slave15_V16"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG4_AMS_SLAVE15_FAILED_SENSORS_NAME "AMS_Slave15_FailedSensors"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG5_AMS_SLAVE15_T0_NAME "AMS_Slave15_T0"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG5_AMS_SLAVE15_T1_NAME "AMS_Slave15_T1"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG5_AMS_SLAVE15_T2_NAME "AMS_Slave15_T2"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG5_AMS_SLAVE15_T3_NAME "AMS_Slave15_T3"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG5_AMS_SLAVE15_T4_NAME "AMS_Slave15_T4"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG5_AMS_SLAVE15_T5_NAME "AMS_Slave15_T5"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG5_AMS_SLAVE15_T6_NAME "AMS_Slave15_T6"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG5_AMS_SLAVE15_T7_NAME "AMS_Slave15_T7"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG6_AMS_SLAVE15_T8_NAME "AMS_Slave15_T8"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG6_AMS_SLAVE15_T9_NAME "AMS_Slave15_T9"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG6_AMS_SLAVE15_T10_NAME "AMS_Slave15_T10"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG6_AMS_SLAVE15_T11_NAME "AMS_Slave15_T11"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG6_AMS_SLAVE15_T12_NAME "AMS_Slave15_T12"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG6_AMS_SLAVE15_T13_NAME "AMS_Slave15_T13"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG6_AMS_SLAVE15_T14_NAME "AMS_Slave15_T14"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG6_AMS_SLAVE15_T15_NAME "AMS_Slave15_T15"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG7_AMS_SLAVE15_T16_NAME "AMS_Slave15_T16"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG7_AMS_SLAVE15_T17_NAME "AMS_Slave15_T17"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG7_AMS_SLAVE15_T18_NAME "AMS_Slave15_T18"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG7_AMS_SLAVE15_T19_NAME "AMS_Slave15_T19"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG7_AMS_SLAVE15_T20_NAME "AMS_Slave15_T20"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG7_AMS_SLAVE15_T21_NAME "AMS_Slave15_T21"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG7_AMS_SLAVE15_T22_NAME "AMS_Slave15_T22"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG7_AMS_SLAVE15_T23_NAME "AMS_Slave15_T23"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG8_AMS_SLAVE15_T24_NAME "AMS_Slave15_T24"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG8_AMS_SLAVE15_T25_NAME "AMS_Slave15_T25"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG8_AMS_SLAVE15_T26_NAME "AMS_Slave15_T26"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG8_AMS_SLAVE15_T27_NAME "AMS_Slave15_T27"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG8_AMS_SLAVE15_T28_NAME "AMS_Slave15_T28"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG8_AMS_SLAVE15_T29_NAME "AMS_Slave15_T29"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG8_AMS_SLAVE15_T30_NAME "AMS_Slave15_T30"
#define CAN1_MAIN_FT24_AMS_SLAVE15_LOG8_AMS_SLAVE15_T31_NAME "AMS_Slave15_T31"
#define CAN1_MAIN_FT24_JETSON_RX_JETSON_AS_MISSION_NAME "Jetson_AS_Mission"
#define CAN1_MAIN_FT24_JETSON_RX_JETSON_AS_STATE_NAME "Jetson_AS_State"
#define CAN1_MAIN_FT24_JETSON_RX_JETSON_POWER_OFF_NAME "Jetson_Power_Off"
#define CAN1_MAIN_FT24_JETSON_RX_JETSON_RESET_NAME "Jetson_Reset"
#define CAN1_MAIN_FT24_JETSON_RX_JETSON_SPEED_NAME "Jetson_Speed"
#define CAN1_MAIN_FT24_JETSON_RX_JETSON_SPEED_X_SENS_NAME "Jetson_Speed_XSens"
#define CAN1_MAIN_FT24_JETSON_RX_JETSON_ALLOW_TORQUE_NAME "Jetson_AllowTorque"
#define CAN1_MAIN_FT24_AMS_SLAVE15_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE15_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE15_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE15_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE15_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE15_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE14_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE14_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE14_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE14_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE14_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE14_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE13_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE13_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE13_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE13_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE13_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE13_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE12_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE12_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE12_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE12_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE12_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE12_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE11_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE11_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE11_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE11_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE11_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE11_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE10_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE10_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE10_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE10_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE10_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE10_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE9_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE9_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE9_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE9_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE9_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE9_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE8_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE8_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE8_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE8_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE8_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE8_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE7_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE7_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE7_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE7_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE7_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE7_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE6_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE6_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE6_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE6_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE6_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE6_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE5_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE5_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE5_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE5_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE5_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE5_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE4_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE4_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE4_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE4_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE4_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE4_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE3_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE3_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE3_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE3_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE3_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE3_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE2_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE2_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE2_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE2_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE2_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE2_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_AMS_SLAVE1_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE1_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE1_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE1_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE1_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE1_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_ABX_MISC_ABX_DRIVER_PROTOCOL_NAME "ABX_DriverProtocol"
#define CAN1_MAIN_FT24_ABX_MISC_ABX_DISTANCE_SESSION_NAME "ABX_Distance_session"
#define CAN1_MAIN_FT24_ABX_MISC_ABX_DISTANCE_TOTAL_NAME "ABX_Distance_total"
#define CAN1_MAIN_FT24_ABX_MISC_ABX_LV_SO_C_NAME "ABX_LV_SoC"
#define CAN1_MAIN_FT24_ABX_MISC_ABX_LV_VOLTAGE_NAME "ABX_LV_Voltage"
#define CAN1_MAIN_FT24_AMS_ERROR_AMS_ERROR_KIND_NAME "AMS_Error_Kind"
#define CAN1_MAIN_FT24_AMS_ERROR_AMS_ERROR_ARG_NAME "AMS_Error_Arg"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_INTERNAL_ABX_CS_T_INV_L_NAME "ABX_CS_T_InvL"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_INTERNAL_ABX_CS_T_INV_R_NAME "ABX_CS_T_InvR"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_INTERNAL_ABX_CS_T_MOT_L_NAME "ABX_CS_T_MotL"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_INTERNAL_ABX_CS_T_MOT_R_NAME "ABX_CS_T_MotR"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_ACC_ABX_CS_P_ACC_IN_NAME "ABX_CS_P_AccIn"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_ACC_ABX_CS_P_ACC_OUT_NAME "ABX_CS_P_AccOut"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_ACC_ABX_CS_T_ACC_IN_NAME "ABX_CS_T_AccIn"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_ACC_ABX_CS_T_ACC_OUT_NAME "ABX_CS_T_AccOut"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_MOT_INV_ABX_CS_P_INV_IN_NAME "ABX_CS_P_InvIn"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_MOT_INV_ABX_CS_P_MOT_L_IN_NAME "ABX_CS_P_MotLIn"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_MOT_INV_ABX_CS_P_RAD_IN_NAME "ABX_CS_P_RadIn"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_MOT_INV_ABX_CS_P_MOT_R_IN_NAME "ABX_CS_P_MotRIn"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_MOT_INV_ABX_CS_T_INV_IN_NAME "ABX_CS_T_InvIn"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_MOT_INV_ABX_CS_T_MOT_IN_NAME "ABX_CS_T_MotIn"
#define CAN1_MAIN_FT24_ABX_COOLING_SYS_MOT_INV_ABX_CS_T_RAD_IN_NAME "ABX_CS_T_RadIn"
#define CAN1_MAIN_FT24_ABX_BRAKE_T_ABX_BRAKE_T_FL_NAME "ABX_BrakeT_FL"
#define CAN1_MAIN_FT24_ABX_BRAKE_T_ABX_BRAKE_T_FR_NAME "ABX_BrakeT_FR"
#define CAN1_MAIN_FT24_ABX_BRAKE_T_ABX_BRAKE_T_RL_NAME "ABX_BrakeT_RL"
#define CAN1_MAIN_FT24_ABX_BRAKE_T_ABX_BRAKE_T_RR_NAME "ABX_BrakeT_RR"
#define CAN1_MAIN_FT24_ABX_WHEELSPEED_ABX_WHEELSPEED_FL_NAME "ABX_Wheelspeed_FL"
#define CAN1_MAIN_FT24_ABX_WHEELSPEED_ABX_WHEELSPEED_FR_NAME "ABX_Wheelspeed_FR"
#define CAN1_MAIN_FT24_ABX_WHEELSPEED_ABX_WHEELSPEED_RL_NAME "ABX_Wheelspeed_RL"
#define CAN1_MAIN_FT24_ABX_WHEELSPEED_ABX_WHEELSPEED_RR_NAME "ABX_Wheelspeed_RR"
#define CAN1_MAIN_FT24_ABX_DAMPERS_ABX_DAMPER_HEAVE_F_NAME "ABX_DamperHeave_F"
#define CAN1_MAIN_FT24_ABX_DAMPERS_ABX_DAMPER_ROLL_F_NAME "ABX_DamperRoll_F"
#define CAN1_MAIN_FT24_ABX_DAMPERS_ABX_DAMPER_HEAVE_R_NAME "ABX_DamperHeave_R"
#define CAN1_MAIN_FT24_ABX_DAMPERS_ABX_DAMPER_ROLL_R_NAME "ABX_DamperRoll_R"
#define CAN1_MAIN_FT24_ABX_TIMINGS_ABX_LAPTIME_BEST_NAME "ABX_Laptime_best"
#define CAN1_MAIN_FT24_ABX_TIMINGS_ABX_LAPTIME_LAST_NAME "ABX_Laptime_last"
#define CAN1_MAIN_FT24_ABX_TIMINGS_ABX_SECTORTIME_BEST_NAME "ABX_Sectortime_best"
#define CAN1_MAIN_FT24_ABX_TIMINGS_ABX_SECTORTIME_LAST_NAME "ABX_Sectortime_last"
#define CAN1_MAIN_FT24_ABX_DRIVER_ABX_APPS_PERCENT_NAME "ABX_APPS_percent"
#define CAN1_MAIN_FT24_ABX_DRIVER_ABX_BRAKE_P_F_NAME "ABX_BrakeP_F"
#define CAN1_MAIN_FT24_ABX_DRIVER_ABX_BRAKE_P_R_NAME "ABX_BrakeP_R"
#define CAN1_MAIN_FT24_ABX_DRIVER_ABX_STEERING_ANGLE_NAME "ABX_Steering_Angle"
#define CAN1_MAIN_FT24_ABX_DRIVER_ABX_SPEED_NAME "ABX_Speed"
#define CAN1_MAIN_FT24_ABX_DRIVER_ABX_LAPCOUNTER_NAME "ABX_Lapcounter"
#define CAN1_MAIN_FT24_ABX_DRIVER_ABX_SECTORCOUNTER_NAME "ABX_Sectorcounter"
#define CAN1_MAIN_FT24_TTS_CONFIG_TTS_NEW_ID_NAME "TTS_NewID"
#define CAN1_MAIN_FT24_TTS_RR_TTS_RR_INNER_NAME "TTS_RR_Inner"
#define CAN1_MAIN_FT24_TTS_RR_TTS_RR_CENTER_IN_NAME "TTS_RR_CenterIn"
#define CAN1_MAIN_FT24_TTS_RR_TTS_RR_CENTER_NAME "TTS_RR_Center"
#define CAN1_MAIN_FT24_TTS_RR_TTS_RR_CENTER_OUT_NAME "TTS_RR_CenterOut"
#define CAN1_MAIN_FT24_TTS_RR_TTS_RR_OUTER_NAME "TTS_RR_Outer"
#define CAN1_MAIN_FT24_TTS_RL_TTS_RL_OUTER_NAME "TTS_RL_Outer"
#define CAN1_MAIN_FT24_TTS_RL_TTS_RL_CENTER_OUT_NAME "TTS_RL_CenterOut"
#define CAN1_MAIN_FT24_TTS_RL_TTS_RL_CENTER_NAME "TTS_RL_Center"
#define CAN1_MAIN_FT24_TTS_RL_TTS_RL_CENTER_IN_NAME "TTS_RL_CenterIn"
#define CAN1_MAIN_FT24_TTS_RL_TTS_RL_INNER_NAME "TTS_RL_Inner"
#define CAN1_MAIN_FT24_TTS_FR_TTS_FR_INNER_NAME "TTS_FR_Inner"
#define CAN1_MAIN_FT24_TTS_FR_TTS_FR_CENTER_IN_NAME "TTS_FR_CenterIn"
#define CAN1_MAIN_FT24_TTS_FR_TTS_FR_CENTER_NAME "TTS_FR_Center"
#define CAN1_MAIN_FT24_TTS_FR_TTS_FR_CENTER_OUT_NAME "TTS_FR_CenterOut"
#define CAN1_MAIN_FT24_TTS_FR_TTS_FR_OUTER_NAME "TTS_FR_Outer"
#define CAN1_MAIN_FT24_TTS_FL_TTS_FL_OUTER_NAME "TTS_FL_Outer"
#define CAN1_MAIN_FT24_TTS_FL_TTS_FL_CENTER_OUT_NAME "TTS_FL_CenterOut"
#define CAN1_MAIN_FT24_TTS_FL_TTS_FL_CENTER_NAME "TTS_FL_Center"
#define CAN1_MAIN_FT24_TTS_FL_TTS_FL_CENTER_IN_NAME "TTS_FL_CenterIn"
#define CAN1_MAIN_FT24_TTS_FL_TTS_FL_INNER_NAME "TTS_FL_Inner"
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_TYPE_NAME "STW_Param_Type"
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_B_BAL_NAME "STW_Param_BBal"
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_SLIPREF_NAME "STW_Param_SLIPREF"
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_ASRP_NAME "STW_Param_ASRP"
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_ASRON_NAME "STW_Param_ASRON"
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_ASRI_NAME "STW_Param_ASRI"
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_ENDU_POWER_LIMIT_NAME "STW_Param_EnduPowerLimit"
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_TEST3_NAME "STW_Param_Test3"
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_TEST4_NAME "STW_Param_Test4"
#define CAN1_MAIN_FT24_STW_PARAM_SET_STW_PARAM_MUMAX_NAME "STW_Param_MUMAX"
#define CAN1_MAIN_FT24_AMS_SLAVE0_STATUS_AMS_SLAVE_STATUS_ERROR_NAME "AMS_SlaveStatus_Error"
#define CAN1_MAIN_FT24_AMS_SLAVE0_STATUS_AMS_SLAVE_STATUS_ID_NAME "AMS_SlaveStatus_ID"
#define CAN1_MAIN_FT24_AMS_SLAVE0_STATUS_AMS_SLAVE_STATUS_SO_C_NAME "AMS_SlaveStatus_SoC"
#define CAN1_MAIN_FT24_AMS_SLAVE0_STATUS_AMS_SLAVE_STATUS_MIN_CELL_VOLT_NAME "AMS_SlaveStatus_MinCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE0_STATUS_AMS_SLAVE_STATUS_MAX_CELL_VOLT_NAME "AMS_SlaveStatus_MaxCellVolt"
#define CAN1_MAIN_FT24_AMS_SLAVE0_STATUS_AMS_SLAVE_STATUS_MAX_TEMP_NAME "AMS_SlaveStatus_MaxTemp"
#define CAN1_MAIN_FT24_SSU_MESSAGE_SSU_AIR_PRESSURE_NAME "SSU_AirPressure"
#define CAN1_MAIN_FT24_SSU_MESSAGE_SSU_AIR_TEMP_NAME "SSU_AirTemp"
#define CAN1_MAIN_FT24_AMS_STATUS_AMS_STATE_NAME "AMS_State"
#define CAN1_MAIN_FT24_AMS_STATUS_SDC_CLOSED_NAME "SDC_Closed"
#define CAN1_MAIN_FT24_AMS_STATUS_SOC_NAME "SOC"
#define CAN1_MAIN_FT24_AMS_STATUS_MIN_CELL_VOLT_NAME "Min_cell_volt"
#define CAN1_MAIN_FT24_AMS_STATUS_MAX_CELL_TEMP_NAME "Max_cell_temp"
#define CAN1_MAIN_FT24_AMS_SLAVE_PANIC_AMS_SLAVE_PANIC_SLAVE_ID_NAME "AMS_SlavePanic_SlaveID"
#define CAN1_MAIN_FT24_AMS_SLAVE_PANIC_AMS_SLAVE_PANIC_KIND_NAME "AMS_SlavePanic_Kind"
#define CAN1_MAIN_FT24_AMS_SLAVE_PANIC_AMS_SLAVE_PANIC_ARG_NAME "AMS_SlavePanic_Arg"
#define CAN1_MAIN_FT24_AMS_IN_TS_ACTIVATE_NAME "TS_activate"
#define CAN1_MAIN_FT24_AMS_IN_INVERTERS_DISCHARGED_NAME "Inverters_discharged"
#define CAN1_MAIN_FT24_AMS_IN_LAP_NUMBER_NAME "Lap_Number"
#define CAN1_MAIN_FT24_SHUNT_CURRENT_SHUNT_CURRENT_NAME "Shunt_Current"
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE1_SHUNT_VOLTAGE1_NAME "Shunt_Voltage1"
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE2_SHUNT_VOLTAGE2_NAME "Shunt_Voltage2"
#define CAN1_MAIN_FT24_SHUNT_VOLTAGE3_SHUNT_VOLTAGE3_NAME "Shunt_Voltage3"
#define CAN1_MAIN_FT24_SHUNT_TEMPERATURE_SHUNT_TEMPERATURE_NAME "Shunt_Temperature"
#define CAN1_MAIN_FT24_SDCL_TX_ASMS_STATE_NAME "asms_state"
#define CAN1_MAIN_FT24_SDCL_TX_SDC_STATE_1_NAME "sdc_state_1"
#define CAN1_MAIN_FT24_SDCL_TX_SDC_STATE_2_NAME "sdc_state_2"
#define CAN1_MAIN_FT24_SDCL_TX_SDC_STATE_3_NAME "sdc_state_3"
#define CAN1_MAIN_FT24_SDCL_TX_HEARTBEAT_OK_NAME "heartbeat_ok"
#define CAN1_MAIN_FT24_SDCL_TX_SDCL_SDC_READY_NAME "sdcl_sdc_ready"
#define CAN1_MAIN_FT24_SDCL_TX_TS_START_MUXED_NAME "ts_start_muxed"
#define CAN1_MAIN_FT24_SDCL_TX_LATCH_INIT_OPEN_NAME "latch_init_open"
#define CAN1_MAIN_FT24_SDCL_TX_LATCH_CLOSED_NAME "latch_closed"
#define CAN1_MAIN_FT24_SDCL_TX_LATCH_REOPENED_NAME "latch_reopened"
#define CAN1_MAIN_FT24_SDCL_TX_AS_MISSION_NAME "as_mission"
#define CAN1_MAIN_FT24_SDCL_RX_AS_CLOSE_SDC_NAME "as_close_sdc"
#define CAN1_MAIN_FT24_SDCL_RX_SDCL_HEARTBEAT_NAME "sdcl_heartbeat"
#define CAN1_MAIN_FT24_SDCL_RX_ASB_ERROR_NAME "asb_error"
#define CAN1_MAIN_FT24_SDCL_RX_AS_MISSION_NAME "as_mission"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_INVERTER_RX_NAME "PDU_inverter_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_MODE_VALVE_2_RX_NAME "PDU_mode_valve_2_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_EBS_VALVE_2_RX_NAME "PDU_ebs_valve_2_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_SHUTDOWN_CIRCUIT_RX_NAME "PDU_shutdown_circuit_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_ALWAYSON_RX_NAME "PDU_alwayson_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_MISC_RX_NAME "PDU_misc_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_SERVO_RX_NAME "PDU_servo_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_LED1_RX_NAME "PDU_led1_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_LED2_RX_NAME "PDU_led2_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_LED3_RX_NAME "PDU_led3_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_SENSORBOX_RX_NAME "PDU_sensorbox_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_SERVICE_BRAKE_RX_NAME "PDU_service_brake_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_EBS_VALVE_1_RX_NAME "PDU_ebs_valve_1_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_STEERING_RX_NAME "PDU_steering_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_MODE_VALVE_1_RX_NAME "PDU_mode_valve_1_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_PWM_FANS_RX_NAME "PDU_PWM_fans_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_PWM_AGGREGAT_RX_NAME "PDU_PWM_aggregat_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_PWM_PUMP_RX_NAME "PDU_PWM_pump_rx"
#define CAN1_MAIN_FT24_PDU_COMMAND_PDU_CHECKSUM_RX_NAME "PDU_checksum_rx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_INVERTER_TX_NAME "PDU_inverter_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_MODE_VALVE_2_TX_NAME "PDU_mode_valve_2_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_EVS_VALVE_2_TX_NAME "PDU_evs_valve_2_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_SHUTDOWN_CIRCUIT_TX_NAME "PDU_shutdown_circuit_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_ALWAYSON_TX_NAME "PDU_alwayson_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_MISC_TX_NAME "PDU_misc_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_SERVO_TX_NAME "PDU_servo_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_LED1_TX_NAME "PDU_led1_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_LED2_TX_NAME "PDU_led2_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_LED3_TX_NAME "PDU_led3_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_SENSORBOX_TX_NAME "PDU_sensorbox_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_SERVICE_BRAKE_TX_NAME "PDU_service_brake_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_EBS_VALVE_1_TX_NAME "PDU_ebs_valve_1_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_STEERING_TX_NAME "PDU_steering_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_MODE_VALVE_1_TX_NAME "PDU_mode_valve_1_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_PWM_FANS_TX_NAME "PDU_PWM_fans_tx"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_PWM_AGGREGAT_NAME "PDU_PWM_aggregat"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_PWM_PUMP_NAME "PDU_PWM_pump"
#define CAN1_MAIN_FT24_PDU_RESPONSE_PDU_CHECKSUM_TX_NAME "PDU_checksum_tx"
#define CAN1_MAIN_FT24_TX_PDO_PDM_POWERSUPPLY_LESS_8V_NAME "pdm_powersupply_less_8v"
#define CAN1_MAIN_FT24_TX_PDO_PDM_POWERSUPPLY_GREATER_32V_NAME "pdm_powersupply_greater_32v"
#define CAN1_MAIN_FT24_TX_PDO_PDM_CANBUS_TIMEOUT_NAME "pdm_canbus_timeout"
#define CAN1_MAIN_FT24_TX_PDO_PDM_CANBUS_STARTUPMISSING_NAME "pdm_canbus_startupmissing"
#define CAN1_MAIN_FT24_TX_PDO_PDM_CANBUS_STATEWARNING_NAME "pdm_canbus_statewarning"
#define CAN1_MAIN_FT24_TX_PDO_PDM_ANALOGINPUT_MIDDLEPOSITION_NAME "pdm_analoginput_middleposition"
#define CAN1_MAIN_FT24_TX_PDO_PDM_ANALOGINPUT_CABLEBREAK_NAME "pdm_analoginput_cablebreak"
#define CAN1_MAIN_FT24_TX_PDO_PDM_ANALOGINPUT_SHORTCIRCUIT_NAME "pdm_analoginput_shortcircuit"
#define CAN1_MAIN_FT24_TX_PDO_PDM_ANALOGINPUT_CURRENTOVERLOAD_NAME "pdm_analoginput_currentoverload"
#define CAN1_MAIN_FT24_TX_PDO_PDM_TEMPERATURE_WARNING_NAME "pdm_temperature_warning"
#define CAN1_MAIN_FT24_TX_PDO_PDM_TEMPERATURE_SHUTDOWN_NAME "pdm_temperature_shutdown"
#define CAN1_MAIN_FT24_TX_PDO_PDM_OUTPUT1_CONTROLLERRANGE_NAME "pdm_output1_controllerrange"
#define CAN1_MAIN_FT24_TX_PDO_PDM_OUTPUT2_CONTROLLERRANGE_NAME "pdm_output2_controllerrange"
#define CAN1_MAIN_FT24_TX_PDO_PDM_OUTPUT1_CABLEBREAK_NAME "pdm_output1_cablebreak"
#define CAN1_MAIN_FT24_TX_PDO_PDM_OUTPUT2_CABLEBREAK_NAME "pdm_output2_cablebreak"
#define CAN1_MAIN_FT24_TX_PDO_PDM_OUTPUT1_SHORTCIRCUIT_NAME "pdm_output1_shortcircuit"
#define CAN1_MAIN_FT24_TX_PDO_PDM_OUTPUT2_SHORTCIRCUIT_NAME "pdm_output2_shortcircuit"
#define CAN1_MAIN_FT24_TX_PDO_PDM_ANALOGINPUT_NAME "PDM_analoginput"
#define CAN1_MAIN_FT24_X_SENS_WARNING_WARNING_CODE_NAME "WarningCode"
#define CAN1_MAIN_FT24_X_SENS_SAMPLE_TIME_TIMESTAMP_NAME "Timestamp"
#define CAN1_MAIN_FT24_X_SENS_GROUP_COUNTER_COUNTER_NAME "Counter"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_HAVE_GNSS_TIME_PULSE_NAME "HaveGnssTimePulse"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_RTK_STATUS_NAME "RtkStatus"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_FILTER_MODE_NAME "FilterMode"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_MAG_Z_NAME "ClipMagZ"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_RETRANSMITTED_NAME "Retransmitted"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIPPING_DETECTED_NAME "ClippingDetected"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_INTERPOLATED_NAME "Interpolated"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_SYNC_IN_NAME "SyncIn"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_SYNC_OUT_NAME "SyncOut"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_ACC_X_NAME "ClipAccX"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_ACC_Y_NAME "ClipAccY"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_ACC_Z_NAME "ClipAccZ"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_GYR_X_NAME "ClipGyrX"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_GYR_Y_NAME "ClipGyrY"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_GYR_Z_NAME "ClipGyrZ"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_MAG_X_NAME "ClipMagX"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_CLIP_MAG_Y_NAME "ClipMagY"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_SELF_TEST_OK_NAME "SelfTestOk"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_ORIENTATION_VALID_NAME "OrientationValid"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_GPS_VALID_NAME "GpsValid"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_NO_ROTATION_NAME "NoRotation"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_REPRESENTATIVE_MOTION_NAME "RepresentativeMotion"
#define CAN1_MAIN_FT24_X_SENS_STATUS_WORD_EXTERNAL_CLOCK_SYNCED_NAME "ExternalClockSynced"
#define CAN1_MAIN_FT24_X_SENS_RATE_OF_TURN_X_SENS_GYR_X_NAME "XSens_gyrX"
#define CAN1_MAIN_FT24_X_SENS_RATE_OF_TURN_X_SENS_GYR_Y_NAME "XSens_gyrY"
#define CAN1_MAIN_FT24_X_SENS_RATE_OF_TURN_X_SENS_GYR_Z_NAME "XSens_gyrZ"
#define CAN1_MAIN_FT24_X_SENS_ACCELERATION_X_SENS_ACC_X_NAME "XSens_accX"
#define CAN1_MAIN_FT24_X_SENS_ACCELERATION_X_SENS_ACC_Y_NAME "XSens_accY"
#define CAN1_MAIN_FT24_X_SENS_ACCELERATION_X_SENS_ACC_Z_NAME "XSens_accZ"
#define CAN1_MAIN_FT24_X_SENS_LONG_LAT_LATITUDE_NAME "latitude"
#define CAN1_MAIN_FT24_X_SENS_LONG_LAT_LONGITUDE_NAME "longitude"
#define CAN1_MAIN_FT24_X_SENS_VELOCITY_VEL_X_NAME "velX"
#define CAN1_MAIN_FT24_X_SENS_VELOCITY_VEL_Y_NAME "velY"
#define CAN1_MAIN_FT24_X_SENS_VELOCITY_VEL_Z_NAME "velZ"
#define CAN1_MAIN_FT24_AS_MISSION_FB_MISSION_SELECTION_NAME "Mission_selection"
#define CAN1_MAIN_FT24_STW_MISSION_SELECTED_MISSION_SELECTION_NAME "Mission_selection"
#define CAN1_MAIN_FT24_EPSC_OUT_EPSC_MEASURED_STEERING_ANGLE_NAME "EPSC_measured_steering_angle"
#define CAN1_MAIN_FT24_EPSC_OUT_EPSC_MEASURED_CURRENT_NAME "EPSC_measured_current"
#define CAN1_MAIN_FT24_EPSC_OUT_EPSC_MEASURED_VOLTAGE_NAME "EPSC_measured_voltage"
#define CAN1_MAIN_FT24_EPSC_OUT_EPSC_MEASURED_RPM_NAME "EPSC_measured_rpm"
#define CAN1_MAIN_FT24_EPSC_OUT_EPSC_MEASURED_TEMPERATURE_NAME "EPSC_measured_temperature"
#define CAN1_MAIN_FT24_EPSC_OUT_EPSC_MEASURED_INTERNAL_TEMP_NAME "EPSC_measured_internal_temp"
#define CAN1_MAIN_FT24_EPSC_STEERING_IN_EPSC_DESIRED_STEERING_ANGLE_NAME "EPSC_desired_steering_angle"
#define CAN1_MAIN_FT24_STW_BUTTONS_STW_BUTTON_LEFT_NAME "STW_button_left"
#define CAN1_MAIN_FT24_STW_BUTTONS_STW_BUTTON_RIGHT_NAME "STW_button_right"
#define CAN1_MAIN_FT24_STW_BUTTONS_STW_BUTTON_R2_D_NAME "STW_button_R2D"
#define CAN1_MAIN_FT24_STW_BUTTONS_STW_BUTTON_ENTER_NAME "STW_button_Enter"
#define CAN1_MAIN_FT24_STW_STATUS_AS_STATE_STW_NAME "AS_State_STW"
#define CAN1_MAIN_FT24_STW_STATUS_R2_D_PROGRESS_NAME "R2D_Progress"
#define CAN1_MAIN_FT24_STW_STATUS_INV_L_READY_NAME "InvL_ready"
#define CAN1_MAIN_FT24_STW_STATUS_INV_R_READY_NAME "InvR_ready"
#define CAN1_MAIN_FT24_STW_STATUS_SDC_BFL_NAME "SDC_BFL"
#define CAN1_MAIN_FT24_STW_STATUS_SDC_BRL_NAME "SDC_BRL"
#define CAN1_MAIN_FT24_STW_STATUS_SDC_ACC_NAME "SDC_ACC"
#define CAN1_MAIN_FT24_STW_STATUS_SDC_HVB_NAME "SDC_HVB"
#define CAN1_MAIN_FT24_STW_STATUS_LAP_COUNT_NAME "Lap_Count"
#define CAN1_MAIN_FT24_STW_STATUS_INI_CHK_STATE_NAME "iniChk_state"
#define CAN1_MAIN_FT24_STW_STATUS_ERR_SDC_NAME "ERR_SDC"
#define CAN1_MAIN_FT24_STW_STATUS_ERR_AMS_NAME "ERR_AMS"
#define CAN1_MAIN_FT24_STW_STATUS_ERR_PDU_NAME "ERR_PDU"
#define CAN1_MAIN_FT24_STW_STATUS_ERR_INI_CHK_NAME "ERR_IniChk"
#define CAN1_MAIN_FT24_STW_STATUS_ERR_CON_MON_NAME "ERR_ConMon"
#define CAN1_MAIN_FT24_STW_STATUS_ERR_SCS_NAME "ERR_SCS"
#define CAN1_MAIN_FT24_STW_STATUS_ERR_S_BSPD_NAME "ERR_sBSPD"
#define CAN1_MAIN_FT24_STW_STATUS_ERR_APP_SP_NAME "ERR_APPSp"
#define CAN1_MAIN_FT24_STW_STATUS_ERR_AS_NAME "ERR_AS"
#define CAN1_MAIN_FT24_STW_STATUS_ERR_ROS_NAME "ERR_ROS"
#define CAN1_MAIN_FT24_STW_STATUS_ERR_RES_NAME "ERR_RES"
#define CAN1_MAIN_FT24_STW_STATUS_ERR_INV_L_NAME "ERR_InvL"
#define CAN1_MAIN_FT24_STW_STATUS_ERR_INV_R_NAME "ERR_InvR"
#define CAN1_MAIN_FT24_PDU_CURRENT_1_PDU_ALWAYSON_CURR_NAME "PDU_alwayson_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_1_PDU_MISC_CURR_NAME "PDU_misc_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_1_PDU_INVERTER_CURR_NAME "PDU_inverter_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_1_PDU_SHUTDOWN_CIRCUIT_CURR_NAME "PDU_shutdown_circuit_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_2_PDU_FANS_CURR_NAME "PDU_fans_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_2_PDU_PUMP_CURR_NAME "PDU_pump_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_2_PDU_AGGREGAT_CURR_NAME "PDU_aggregat_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_2_PDU_STEERING_CURR_NAME "PDU_steering_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_3_PDU_EBS_VALVE_1_CURR_NAME "PDU_ebs_valve_1_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_3_PDU_EBS_VALVE_2_CURR_NAME "PDU_ebs_valve_2_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_3_PDU_MODE_VALVE_1_CURR_NAME "PDU_mode_valve_1_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_3_PDU_MODE_VALVE_2_CURR_NAME "PDU_mode_valve_2_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_4_PDU_SENSORBOX_CURR_NAME "PDU_sensorbox_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_4_PDU_SERVICE_BRAKE_CURR_NAME "PDU_service_brake_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_4_PDU_SERVOS_CURR_NAME "PDU_servos_curr"
#define CAN1_MAIN_FT24_PDU_CURRENT_4_PDU_SHUTDOWN_CIRCUIT_CURR_NAME "PDU_shutdown_circuit_curr"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_SHOULD_CALIBRATE_NAME "EPSC_should_calibrate"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_SHOULD_CHANGE_MODE_NAME "EPSC_should_change_mode"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_MODE_NAME "EPSC_mode"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_FLAG3_NAME "EPSC_flag3"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_FLAG4_NAME "EPSC_flag4"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_FLAG5_NAME "EPSC_flag5"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_FLAG6_NAME "EPSC_flag6"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_FLAG7_NAME "EPSC_flag7"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_KP_POS_NAME "EPSC_Kp_pos"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_KI_POS_NAME "EPSC_Ki_pos"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_KP_RPM_NAME "EPSC_Kp_rpm"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_KI_RPM_NAME "EPSC_Ki_rpm"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_KP_CURR_NAME "EPSC_Kp_curr"
#define CAN1_MAIN_FT24_EPSC_CONFIG_IN_EPSC_KI_CURR_NAME "EPSC_Ki_curr"

/**
 * Signals in message JetsonCommands.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_jetson_commands_t {
    /**
     * Range: 0..255 (0..1 -)
     * Scale: 0.00392156862745098
     * Offset: 0
     */
    uint8_t jetson_brake_ratio;

    /**
     * Range: 0..255 (0..51 -)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t jetson_speed_target_left;

    /**
     * Range: 0..51 (0..51 m/s)
     * Scale: 1
     * Offset: 0
     */
    uint8_t jetson_speed_target_right;

    /**
     * Range: -128..128 (-1..1 -)
     * Scale: 0.00784313725490196
     * Offset: 0
     */
    int8_t jetson_steering_angle_left;

    /**
     * Range: -128..128 (-1..1 -)
     * Scale: 0.00784313725490196
     * Offset: 0
     */
    int8_t jetson_steering_angle_right;
};

/**
 * Signals in message JetsonTX.
 *
 * Cycle Time: 100ms
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_jetson_tx_t {
    /**
     * Range: 0..1 (0..1 Bool)
     * Scale: 1
     * Offset: 0
     */
    uint8_t jetson_as_mission_complete;

    /**
     * Range: 0..1 (0..1 Bool)
     * Scale: 1
     * Offset: 0
     */
    uint8_t jetson_as_ok;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t jetson_lap_count;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t jetson_cones_all;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t jetson_cones_actual;
};

/**
 * Signals in message AMS_Slave0_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave0_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v3;
};

/**
 * Signals in message AMS_Slave0_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave0_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v7;
};

/**
 * Signals in message AMS_Slave0_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave0_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v11;
};

/**
 * Signals in message AMS_Slave0_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave0_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v15;
};

/**
 * Signals in message AMS_Slave0_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave0_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave0_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave0_failed_sensors;
};

/**
 * Signals in message AMS_Slave0_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave0_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t7;
};

/**
 * Signals in message AMS_Slave0_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave0_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t15;
};

/**
 * Signals in message AMS_Slave0_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave0_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t23;
};

/**
 * Signals in message AMS_Slave0_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave0_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave0_t31;
};

/**
 * Signals in message AMS_Slave1_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave1_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v3;
};

/**
 * Signals in message AMS_Slave1_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave1_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v7;
};

/**
 * Signals in message AMS_Slave1_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave1_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v11;
};

/**
 * Signals in message AMS_Slave1_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave1_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v15;
};

/**
 * Signals in message AMS_Slave1_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave1_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave1_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave1_failed_sensors;
};

/**
 * Signals in message AMS_Slave1_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave1_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t7;
};

/**
 * Signals in message AMS_Slave1_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave1_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t15;
};

/**
 * Signals in message AMS_Slave1_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave1_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t23;
};

/**
 * Signals in message AMS_Slave1_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave1_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave1_t31;
};

/**
 * Signals in message AMS_Slave2_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave2_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v3;
};

/**
 * Signals in message AMS_Slave2_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave2_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v7;
};

/**
 * Signals in message AMS_Slave2_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave2_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v11;
};

/**
 * Signals in message AMS_Slave2_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave2_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v15;
};

/**
 * Signals in message AMS_Slave2_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave2_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave2_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave2_failed_sensors;
};

/**
 * Signals in message AMS_Slave2_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave2_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t7;
};

/**
 * Signals in message AMS_Slave2_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave2_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t15;
};

/**
 * Signals in message AMS_Slave2_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave2_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t23;
};

/**
 * Signals in message AMS_Slave2_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave2_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave2_t31;
};

/**
 * Signals in message AMS_Slave3_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave3_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v3;
};

/**
 * Signals in message AMS_Slave3_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave3_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v7;
};

/**
 * Signals in message AMS_Slave3_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave3_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v11;
};

/**
 * Signals in message AMS_Slave3_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave3_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v15;
};

/**
 * Signals in message AMS_Slave3_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave3_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave3_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave3_failed_sensors;
};

/**
 * Signals in message AMS_Slave3_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave3_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t7;
};

/**
 * Signals in message AMS_Slave3_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave3_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t15;
};

/**
 * Signals in message AMS_Slave3_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave3_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t23;
};

/**
 * Signals in message AMS_Slave3_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave3_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave3_t31;
};

/**
 * Signals in message AMS_Slave4_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave4_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v3;
};

/**
 * Signals in message AMS_Slave4_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave4_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v7;
};

/**
 * Signals in message AMS_Slave4_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave4_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v11;
};

/**
 * Signals in message AMS_Slave4_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave4_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v15;
};

/**
 * Signals in message AMS_Slave4_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave4_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave4_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave4_failed_sensors;
};

/**
 * Signals in message AMS_Slave4_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave4_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t7;
};

/**
 * Signals in message AMS_Slave4_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave4_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t15;
};

/**
 * Signals in message AMS_Slave4_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave4_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t23;
};

/**
 * Signals in message AMS_Slave4_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave4_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave4_t31;
};

/**
 * Signals in message AMS_Slave5_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave5_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v3;
};

/**
 * Signals in message AMS_Slave5_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave5_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v7;
};

/**
 * Signals in message AMS_Slave5_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave5_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v11;
};

/**
 * Signals in message AMS_Slave5_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave5_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v15;
};

/**
 * Signals in message AMS_Slave5_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave5_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave5_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave5_failed_sensors;
};

/**
 * Signals in message AMS_Slave5_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave5_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t7;
};

/**
 * Signals in message AMS_Slave5_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave5_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t15;
};

/**
 * Signals in message AMS_Slave5_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave5_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t23;
};

/**
 * Signals in message AMS_Slave5_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave5_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave5_t31;
};

/**
 * Signals in message AMS_Slave6_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave6_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v3;
};

/**
 * Signals in message AMS_Slave6_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave6_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v7;
};

/**
 * Signals in message AMS_Slave6_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave6_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v11;
};

/**
 * Signals in message AMS_Slave6_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave6_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v15;
};

/**
 * Signals in message AMS_Slave6_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave6_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave6_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave6_failed_sensors;
};

/**
 * Signals in message AMS_Slave6_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave6_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t7;
};

/**
 * Signals in message AMS_Slave6_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave6_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t15;
};

/**
 * Signals in message AMS_Slave6_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave6_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t23;
};

/**
 * Signals in message AMS_Slave6_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave6_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave6_t31;
};

/**
 * Signals in message AMS_Slave7_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave7_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v3;
};

/**
 * Signals in message AMS_Slave7_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave7_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v7;
};

/**
 * Signals in message AMS_Slave7_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave7_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v11;
};

/**
 * Signals in message AMS_Slave7_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave7_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v15;
};

/**
 * Signals in message AMS_Slave7_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave7_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave7_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave7_failed_sensors;
};

/**
 * Signals in message AMS_Slave7_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave7_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t7;
};

/**
 * Signals in message AMS_Slave7_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave7_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t15;
};

/**
 * Signals in message AMS_Slave7_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave7_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t23;
};

/**
 * Signals in message AMS_Slave7_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave7_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave7_t31;
};

/**
 * Signals in message AMS_Slave8_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave8_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v3;
};

/**
 * Signals in message AMS_Slave8_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave8_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v7;
};

/**
 * Signals in message AMS_Slave8_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave8_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v11;
};

/**
 * Signals in message AMS_Slave8_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave8_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v15;
};

/**
 * Signals in message AMS_Slave8_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave8_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave8_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave8_failed_sensors;
};

/**
 * Signals in message AMS_Slave8_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave8_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t7;
};

/**
 * Signals in message AMS_Slave8_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave8_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t15;
};

/**
 * Signals in message AMS_Slave8_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave8_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t23;
};

/**
 * Signals in message AMS_Slave8_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave8_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave8_t31;
};

/**
 * Signals in message AMS_Slave9_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave9_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v3;
};

/**
 * Signals in message AMS_Slave9_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave9_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v7;
};

/**
 * Signals in message AMS_Slave9_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave9_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v11;
};

/**
 * Signals in message AMS_Slave9_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave9_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v15;
};

/**
 * Signals in message AMS_Slave9_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave9_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave9_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave9_failed_sensors;
};

/**
 * Signals in message AMS_Slave9_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave9_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t7;
};

/**
 * Signals in message AMS_Slave9_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave9_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t15;
};

/**
 * Signals in message AMS_Slave9_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave9_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t23;
};

/**
 * Signals in message AMS_Slave9_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave9_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave9_t31;
};

/**
 * Signals in message AMS_Slave10_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave10_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v3;
};

/**
 * Signals in message AMS_Slave10_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave10_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v7;
};

/**
 * Signals in message AMS_Slave10_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave10_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v11;
};

/**
 * Signals in message AMS_Slave10_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave10_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v15;
};

/**
 * Signals in message AMS_Slave10_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave10_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave10_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave10_failed_sensors;
};

/**
 * Signals in message AMS_Slave10_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave10_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t7;
};

/**
 * Signals in message AMS_Slave10_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave10_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t15;
};

/**
 * Signals in message AMS_Slave10_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave10_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t23;
};

/**
 * Signals in message AMS_Slave10_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave10_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave10_t31;
};

/**
 * Signals in message AMS_Slave11_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave11_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v3;
};

/**
 * Signals in message AMS_Slave11_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave11_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v7;
};

/**
 * Signals in message AMS_Slave11_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave11_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v11;
};

/**
 * Signals in message AMS_Slave11_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave11_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v15;
};

/**
 * Signals in message AMS_Slave11_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave11_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave11_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave11_failed_sensors;
};

/**
 * Signals in message AMS_Slave11_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave11_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t7;
};

/**
 * Signals in message AMS_Slave11_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave11_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t15;
};

/**
 * Signals in message AMS_Slave11_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave11_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t23;
};

/**
 * Signals in message AMS_Slave11_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave11_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave11_t31;
};

/**
 * Signals in message AMS_Slave12_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave12_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v3;
};

/**
 * Signals in message AMS_Slave12_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave12_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v7;
};

/**
 * Signals in message AMS_Slave12_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave12_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v11;
};

/**
 * Signals in message AMS_Slave12_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave12_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v15;
};

/**
 * Signals in message AMS_Slave12_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave12_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave12_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave12_failed_sensors;
};

/**
 * Signals in message AMS_Slave12_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave12_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t7;
};

/**
 * Signals in message AMS_Slave12_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave12_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t15;
};

/**
 * Signals in message AMS_Slave12_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave12_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t23;
};

/**
 * Signals in message AMS_Slave12_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave12_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave12_t31;
};

/**
 * Signals in message AMS_Slave13_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave13_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v3;
};

/**
 * Signals in message AMS_Slave13_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave13_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v7;
};

/**
 * Signals in message AMS_Slave13_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave13_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v11;
};

/**
 * Signals in message AMS_Slave13_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave13_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v15;
};

/**
 * Signals in message AMS_Slave13_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave13_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave13_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave13_failed_sensors;
};

/**
 * Signals in message AMS_Slave13_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave13_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t7;
};

/**
 * Signals in message AMS_Slave13_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave13_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t15;
};

/**
 * Signals in message AMS_Slave13_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave13_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t23;
};

/**
 * Signals in message AMS_Slave13_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave13_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave13_t31;
};

/**
 * Signals in message AMS_Slave14_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave14_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v3;
};

/**
 * Signals in message AMS_Slave14_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave14_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v7;
};

/**
 * Signals in message AMS_Slave14_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave14_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v11;
};

/**
 * Signals in message AMS_Slave14_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave14_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v15;
};

/**
 * Signals in message AMS_Slave14_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave14_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave14_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave14_failed_sensors;
};

/**
 * Signals in message AMS_Slave14_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave14_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t7;
};

/**
 * Signals in message AMS_Slave14_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave14_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t15;
};

/**
 * Signals in message AMS_Slave14_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave14_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t23;
};

/**
 * Signals in message AMS_Slave14_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave14_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave14_t31;
};

/**
 * Signals in message AMS_Slave15_Log0.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave15_log0_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v0;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v3;
};

/**
 * Signals in message AMS_Slave15_Log1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave15_log1_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v4;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v5;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v6;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v7;
};

/**
 * Signals in message AMS_Slave15_Log2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave15_log2_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v8;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v9;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v10;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v11;
};

/**
 * Signals in message AMS_Slave15_Log3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave15_log3_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v12;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v13;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v14;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v15;
};

/**
 * Signals in message AMS_Slave15_Log4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave15_log4_t {
    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave15_v16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave15_failed_sensors;
};

/**
 * Signals in message AMS_Slave15_Log5.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave15_log5_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t0;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t1;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t2;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t3;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t4;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t5;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t6;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t7;
};

/**
 * Signals in message AMS_Slave15_Log6.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave15_log6_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t8;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t9;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t10;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t11;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t12;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t13;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t14;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t15;
};

/**
 * Signals in message AMS_Slave15_Log7.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave15_log7_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t16;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t17;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t18;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t19;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t20;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t21;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t22;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t23;
};

/**
 * Signals in message AMS_Slave15_Log8.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave15_log8_t {
    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t24;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t25;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t26;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t27;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t28;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t29;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t30;

    /**
     * Range: -128..127 (-128..127 degC)
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_slave15_t31;
};

/**
 * Signals in message JetsonRX.
 *
 * Cycle Time: 50ms
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_jetson_rx_t {
    /**
     * AS Mission Selection
     *
     * Range: 0..7 (0..7 int)
     * Scale: 1
     * Offset: 0
     */
    uint8_t jetson_as_mission;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t jetson_as_state;

    /**
     * Range: 0..1 (0..1 bool)
     * Scale: 1
     * Offset: 0
     */
    uint8_t jetson_power_off;

    /**
     * Range: 0..1 (0..1 bool)
     * Scale: 1
     * Offset: 0
     */
    uint8_t jetson_reset;

    /**
     * Range: 0..255 (0..51 m/s)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t jetson_speed;

    /**
     * Range: 0..255 (0..51 m/s)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t jetson_speed_x_sens;

    /**
     * Range: 0..1 (0..1 bool)
     * Scale: 1
     * Offset: 0
     */
    uint8_t jetson_allow_torque;
};

/**
 * Signals in message AMS_Slave15Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave15_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave14Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave14_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave13Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave13_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave12Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave12_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave11Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave11_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave10Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave10_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave9Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave9_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave8Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave8_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave7Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave7_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave6Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave6_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave5Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave5_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave4Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave4_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave3Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave3_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave2Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave2_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message AMS_Slave1Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave1_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message ABX_Misc.
 *
 * Cycle time: 1s
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_abx_misc_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abx_driver_protocol;

    /**
     * Range: 0..65535 (0..65535 m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t abx_distance_session;

    /**
     * Range: 0..65535 (0..655.35 km)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_distance_total;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abx_lv_so_c;

    /**
     * Range: 0..255 (0..15 V)
     * Scale: 0.0588235294117647
     * Offset: 0
     */
    uint8_t abx_lv_voltage;
};

/**
 * Signals in message AMS_Error.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_error_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_error_kind;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t ams_error_arg;
};

/**
 * Signals in message ABX_CoolingSys_Internal.
 *
 * Cycle time: 100ms
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_abx_cooling_sys_internal_t {
    /**
     * Range: 0..65535 (0..655.35 ï¿½C)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_cs_t_inv_l;

    /**
     * Range: 0..65535 (0..655.35 ï¿½C)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_cs_t_inv_r;

    /**
     * Range: 0..65535 (0..655.35 ï¿½C)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_cs_t_mot_l;

    /**
     * Range: 0..65535 (0..655.35 ï¿½C)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_cs_t_mot_r;
};

/**
 * Signals in message ABX_CoolingSys_Acc.
 *
 * Cycle time: 100ms
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_abx_cooling_sys_acc_t {
    /**
     * Range: 0..200 (0..4 bar)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t abx_cs_p_acc_in;

    /**
     * Range: 0..200 (0..4 bar)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t abx_cs_p_acc_out;

    /**
     * Range: 0..1023 (0..102.3 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t abx_cs_t_acc_in;

    /**
     * Range: 0..1023 (0..102.3 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t abx_cs_t_acc_out;
};

/**
 * Signals in message ABX_CoolingSys_MotInv.
 *
 * Cycle time: 100ms
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_abx_cooling_sys_mot_inv_t {
    /**
     * Range: 0..200 (0..4 bar)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t abx_cs_p_inv_in;

    /**
     * Range: 0..200 (0..4 bar)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t abx_cs_p_mot_l_in;

    /**
     * Range: 0..200 (0..4 bar)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t abx_cs_p_rad_in;

    /**
     * Range: 0..200 (0..4 bar)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t abx_cs_p_mot_r_in;

    /**
     * Range: 0..1023 (0..102.3 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t abx_cs_t_inv_in;

    /**
     * Range: 0..1023 (0..102.3 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t abx_cs_t_mot_in;

    /**
     * Range: 0..1023 (0..102.3 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t abx_cs_t_rad_in;
};

/**
 * Signals in message ABX_BrakeT.
 *
 * Cycle time: 100ms
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_abx_brake_t_t {
    /**
     * Range: 0..65535 (0..655.35 ï¿½C)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_brake_t_fl;

    /**
     * Range: 0..65535 (0..655.35 ï¿½C)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_brake_t_fr;

    /**
     * Range: 0..65535 (0..655.35 ï¿½C)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_brake_t_rl;

    /**
     * Range: 0..65535 (0..655.35 ï¿½C)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_brake_t_rr;
};

/**
 * Signals in message ABX_Wheelspeed.
 *
 * Cycle time: 10ms
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_abx_wheelspeed_t {
    /**
     * Range: -32768..32767 (-32.768..32.767 1/s)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t abx_wheelspeed_fl;

    /**
     * Range: -32768..32767 (-32.768..32.767 1/s)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t abx_wheelspeed_fr;

    /**
     * Range: -32768..32767 (-32.768..32.767 1/s)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t abx_wheelspeed_rl;

    /**
     * Range: -32768..32767 (-32.768..32.767 1/s)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t abx_wheelspeed_rr;
};

/**
 * Signals in message ABX_Dampers.
 *
 * Cycle time: 10ms
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_abx_dampers_t {
    /**
     * Range: 0..7500 (0..75 mm)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_damper_heave_f;

    /**
     * Range: 0..7500 (0..75 mm)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_damper_roll_f;

    /**
     * Range: 0..7500 (0..75 mm)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_damper_heave_r;

    /**
     * Range: 0..7500 (0..75 mm)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_damper_roll_r;
};

/**
 * Signals in message ABX_Timings.
 *
 * Cycle time: 1s
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_abx_timings_t {
    /**
     * Range: 0..65535 (0..655.35 s)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_laptime_best;

    /**
     * Range: 0..65535 (0..655.35 s)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_laptime_last;

    /**
     * Range: 0..65535 (0..655.35 s)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_sectortime_best;

    /**
     * Range: 0..65535 (0..655.35 s)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t abx_sectortime_last;
};

/**
 * Signals in message ABX_Driver.
 *
 * Cycle time: 10ms
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_abx_driver_t {
    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abx_apps_percent;

    /**
     * Range: 0..1600 (0..160 bar)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t abx_brake_p_f;

    /**
     * Range: 0..1600 (0..160 bar)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t abx_brake_p_r;

    /**
     * Range: -128..127 (-128..127 ï¿½)
     * Scale: 1
     * Offset: 0
     */
    int8_t abx_steering_angle;

    /**
     * Range: 0..255 (0..51 m/s)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t abx_speed;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abx_lapcounter;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abx_sectorcounter;
};

/**
 * Signals in message TTS_Config.
 *
 * Sent only if TTS positions swapped
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_tts_config_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tts_new_id;
};

/**
 * Signals in message TTS_RR.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_tts_rr_t {
    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_rr_inner;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_rr_center_in;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_rr_center;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_rr_center_out;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_rr_outer;
};

/**
 * Signals in message TTS_RL.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_tts_rl_t {
    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_rl_outer;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_rl_center_out;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_rl_center;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_rl_center_in;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_rl_inner;
};

/**
 * Signals in message TTS_FR.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_tts_fr_t {
    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_fr_inner;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_fr_center_in;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_fr_center;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_fr_center_out;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_fr_outer;
};

/**
 * Signals in message TTS_FL.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_tts_fl_t {
    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_fl_outer;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_fl_center_out;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_fl_center;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_fl_center_in;

    /**
     * Range: -2048..2047 (-54.8..354.7 ï¿½C)
     * Scale: 0.1
     * Offset: 150
     */
    int16_t tts_fl_inner;
};

/**
 * Signals in message STW_Param_Set.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_stw_param_set_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t stw_param_type;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t stw_param_b_bal;

    /**
     * Range: 0..100 (0..1 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint32_t stw_param_slipref;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t stw_param_asrp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t stw_param_asron;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t stw_param_asri;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t stw_param_endu_power_limit;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t stw_param_test3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t stw_param_test4;

    /**
     * Range: 0..10 (0..1 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t stw_param_mumax;
};

/**
 * Signals in message AMS_Slave0Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave0_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_id;

    /**
     * Range: 0..1 (0..1 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_status_so_c;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_min_cell_volt;

    /**
     * Range: 0..10000 (0..1 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t ams_slave_status_max_cell_volt;

    /**
     * Range: 0..16 (0..1 degC)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t ams_slave_status_max_temp;
};

/**
 * Signals in message SSU_Message.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ssu_message_t {
    /**
     * Range: -1000..1000 (-1000..1000 Pa)
     * Scale: 1
     * Offset: 0
     */
    int16_t ssu_air_pressure;

    /**
     * Range: -200..800 (-20..80 ï¿½C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t ssu_air_temp;
};

/**
 * Signals in message AMS_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sdc_closed;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t soc;

    /**
     * Range: 0..50000 (0..5 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t min_cell_volt;

    /**
     * Range: 0..65535 (0..4095.94 Â°C)
     * Scale: 0.0625
     * Offset: 0
     */
    uint16_t max_cell_temp;
};

/**
 * Signals in message AMS_SlavePanic.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_slave_panic_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_panic_slave_id;

    /**
     * Range: 0..72057600000000000 (0..7.20576e+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ams_slave_panic_kind;

    /**
     * Range: 0..72057600000000000 (0..7.20576e+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t ams_slave_panic_arg;
};

/**
 * Signals in message AMS_In.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_ams_in_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ts_activate;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inverters_discharged;

    /**
     * Range: 0..64 (0..64 Laps)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lap_number;
};

/**
 * Signals in message Shunt_Current.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_shunt_current_t {
    /**
     * Range: -2000000000..2000000000 (-2000000..2000000 A)
     * Scale: 0.001
     * Offset: 0
     */
    int32_t shunt_current;
};

/**
 * Signals in message Shunt_Voltage1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_shunt_voltage1_t {
    /**
     * Range: -2000000000..2000000000 (-2000000..2000000 V)
     * Scale: 0.001
     * Offset: 0
     */
    int32_t shunt_voltage1;
};

/**
 * Signals in message Shunt_Voltage2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_shunt_voltage2_t {
    /**
     * Range: -2000000000..2000000000 (-2000000..2000000 V)
     * Scale: 0.001
     * Offset: 0
     */
    int32_t shunt_voltage2;
};

/**
 * Signals in message Shunt_Voltage3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_shunt_voltage3_t {
    /**
     * Range: -2000000000..2000000000 (-2000000..2000000 V)
     * Scale: 0.001
     * Offset: 0
     */
    int32_t shunt_voltage3;
};

/**
 * Signals in message Shunt_Temperature.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_shunt_temperature_t {
    /**
     * Range: 0..10000 (0..1000 Â°C)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t shunt_temperature;
};

/**
 * Signals in message SDCL_tx.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_sdcl_tx_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t asms_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sdc_state_1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sdc_state_2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sdc_state_3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heartbeat_ok;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sdcl_sdc_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ts_start_muxed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t latch_init_open;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t latch_closed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t latch_reopened;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t as_mission;
};

/**
 * Signals in message SDCL_rx.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_sdcl_rx_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t as_close_sdc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sdcl_heartbeat;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t asb_error;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t as_mission;
};

/**
 * Signals in message PDU_Command.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_pdu_command_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_inverter_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_mode_valve_2_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_ebs_valve_2_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_shutdown_circuit_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_alwayson_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_misc_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_servo_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_led1_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_led2_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_led3_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_sensorbox_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_service_brake_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_ebs_valve_1_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_steering_rx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_mode_valve_1_rx;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_pwm_fans_rx;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_pwm_aggregat_rx;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_pwm_pump_rx;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_checksum_rx;
};

/**
 * Signals in message PDU_Response.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_pdu_response_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_inverter_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_mode_valve_2_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_evs_valve_2_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_shutdown_circuit_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_alwayson_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_misc_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_servo_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_led1_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_led2_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_led3_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_sensorbox_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_service_brake_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_ebs_valve_1_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_steering_tx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_mode_valve_1_tx;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_pwm_fans_tx;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_pwm_aggregat;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_pwm_pump;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdu_checksum_tx;
};

/**
 * Signals in message TxPDO.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_tx_pdo_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_powersupply_less_8v;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_powersupply_greater_32v;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_canbus_timeout;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_canbus_startupmissing;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_canbus_statewarning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_analoginput_middleposition;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_analoginput_cablebreak;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_analoginput_shortcircuit;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_analoginput_currentoverload;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_temperature_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_temperature_shutdown;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_output1_controllerrange;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_output2_controllerrange;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_output1_cablebreak;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_output2_cablebreak;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_output1_shortcircuit;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pdm_output2_shortcircuit;

    /**
     * Range: 0..65535 (0..65535 %.)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdm_analoginput;
};

/**
 * Signals in message XSens_Error.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_x_sens_error_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message XSens_Warning.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_x_sens_warning_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t warning_code;
};

/**
 * Signals in message XSens_SampleTime.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_x_sens_sample_time_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t timestamp;
};

/**
 * Signals in message XSens_GroupCounter.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_x_sens_group_counter_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t counter;
};

/**
 * Signals in message XSens_StatusWord.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_x_sens_status_word_t {
    /**
     * Indicates that the 1PPS GNSS time pulse is present
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t have_gnss_time_pulse;

    /**
     * Mask for 2 bit RTK status field
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rtk_status;

    /**
     * Mask for the 3 bit filter mode field
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t filter_mode;

    /**
     * Indicates if there was clipping on the Z-axis of the magnetometer
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clip_mag_z;

    /**
     * When set Indicates the sample was received as a retransmission
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t retransmitted;

    /**
     * When set Indicates clipping has occurred
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clipping_detected;

    /**
     * When set Indicates the sample is an interpolation between other samples
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t interpolated;

    /**
     * When set indicates a sync-in event has been triggered
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sync_in;

    /**
     * When set Indicates a sync-out event has been generated
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sync_out;

    /**
     * Indicates if there was clipping on the X-axis of the accelerometer
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clip_acc_x;

    /**
     * Indicates if there was clipping on the Y-axis of the accelerometer
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clip_acc_y;

    /**
     * Indicates if there was clipping on the Z-axis of the accelerometer
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clip_acc_z;

    /**
     * Indicates if there was clipping on the X-axis of the gyroscope
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clip_gyr_x;

    /**
     * Indicates if there was clipping on the Y-axis of the gyroscope
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clip_gyr_y;

    /**
     * Indicates if there was clipping on the Z-axis of the gyroscope
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clip_gyr_z;

    /**
     * Indicates if there was clipping on the X-axis of the magnetometer
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clip_mag_x;

    /**
     * Indicates if there was clipping on the Y-axis of the magnetometer
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clip_mag_y;

    /**
     * Set when the self test result was ok
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t self_test_ok;

    /**
     * Set when the computed orientation is valid. The orientation may be invalid during startup or when the XSens data is clipping during violent (for the device) motion
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t orientation_valid;

    /**
     * Set when the device has a GPS receiver and the receiver says that there is a GPS position fix.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps_valid;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t no_rotation;

    /**
     * Indicates if the In-Run Compass Calibration is doing the representative motion analysis
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t representative_motion;

    /**
     * Indicates whether the internal clock is synced with an external clock (Either GNNS or custom provided clock sync)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t external_clock_synced;
};

/**
 * Signals in message XSens_RateOfTurn.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_x_sens_rate_of_turn_t {
    /**
     * Range: -17920..17920 (-35..35 rad/s)
     * Scale: 0.00195313
     * Offset: 0
     */
    int16_t x_sens_gyr_x;

    /**
     * Range: -17920..17920 (-35..35 rad/s)
     * Scale: 0.00195313
     * Offset: 0
     */
    int16_t x_sens_gyr_y;

    /**
     * Range: -17920..17920 (-35..35 rad/s)
     * Scale: 0.00195313
     * Offset: 0
     */
    int16_t x_sens_gyr_z;
};

/**
 * Signals in message XSens_Acceleration.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_x_sens_acceleration_t {
    /**
     * Range: -25600..25600 (-100..100 m/s²)
     * Scale: 0.00390625
     * Offset: 0
     */
    int16_t x_sens_acc_x;

    /**
     * Range: -25600..25600 (-100..100 m/s²)
     * Scale: 0.00390625
     * Offset: 0
     */
    int16_t x_sens_acc_y;

    /**
     * Range: -25600..25600 (-100..100 m/s²)
     * Scale: 0.00390625
     * Offset: 0
     */
    int16_t x_sens_acc_z;
};

/**
 * Signals in message XSens_LongLat.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_x_sens_long_lat_t {
    /**
     * Range: -1509950574..1509950574 (-90..90 deg)
     * Scale: 5.96046e-08
     * Offset: 0
     */
    int32_t latitude;

    /**
     * Range: -1509953108..1509953108 (-180..180 deg)
     * Scale: 1.19209e-07
     * Offset: 0
     */
    int32_t longitude;
};

/**
 * Signals in message XSens_Velocity.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_x_sens_velocity_t {
    /**
     * Range: -32000..32000 (-500..500 m/s)
     * Scale: 0.015625
     * Offset: 0
     */
    int16_t vel_x;

    /**
     * Range: -32000..32000 (-500..500 m/s)
     * Scale: 0.015625
     * Offset: 0
     */
    int16_t vel_y;

    /**
     * Range: -32000..32000 (-500..500 m/s)
     * Scale: 0.015625
     * Offset: 0
     */
    int16_t vel_z;
};

/**
 * Signals in message AS_Mission_fb.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_as_mission_fb_t {
    /**
     * Range: 1..7 (1..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mission_selection;
};

/**
 * Signals in message STW_mission_selected.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_stw_mission_selected_t {
    /**
     * Range: 1..7 (1..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mission_selection;
};

/**
 * Signals in message EPSC_out.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_epsc_out_t {
    /**
     * +-13875 equals to +-1.0, so the factor is 1/13875
     *
     * Range: -192515550..192515550 (-13875..13875 part of full steering)
     * Scale: 7.20721e-05
     * Offset: 0
     */
    int16_t epsc_measured_steering_angle;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t epsc_measured_current;

    /**
     * Range: 0..200 (0..20 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t epsc_measured_voltage;

    /**
     * Range: -2048..2047 (-204.8..204.7 rpm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t epsc_measured_rpm;

    /**
     * Range: 0..1023 (0..102.3 Â°C)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t epsc_measured_temperature;

    /**
     * Range: 0..1023 (0..102.3 Â°C)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t epsc_measured_internal_temp;
};

/**
 * Signals in message EPSC_Steering_In.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_epsc_steering_in_t {
    /**
     * Range: -100000000..100000000 (-10000..10000 -)
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t epsc_desired_steering_angle;
};

/**
 * Signals in message STW_buttons.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_stw_buttons_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stw_button_left;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stw_button_right;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stw_button_r2_d;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stw_button_enter;
};

/**
 * Signals in message STW_status.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_stw_status_t {
    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t as_state_stw;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r2_d_progress;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_l_ready;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_r_ready;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sdc_bfl;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sdc_brl;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sdc_acc;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sdc_hvb;

    /**
     * Range: 0..64 (0..64 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lap_count;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ini_chk_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_sdc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_ams;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_pdu;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_ini_chk;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_con_mon;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_scs;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_s_bspd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_app_sp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_as;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_ros;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_res;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_inv_l;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_inv_r;
};

/**
 * Signals in message PDU_Current_1.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_pdu_current_1_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_alwayson_curr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_misc_curr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_inverter_curr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_shutdown_circuit_curr;
};

/**
 * Signals in message PDU_Current_2.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_pdu_current_2_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_fans_curr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_pump_curr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_aggregat_curr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_steering_curr;
};

/**
 * Signals in message PDU_Current_3.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_pdu_current_3_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_ebs_valve_1_curr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_ebs_valve_2_curr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_mode_valve_1_curr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_mode_valve_2_curr;
};

/**
 * Signals in message PDU_Current_4.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_pdu_current_4_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_sensorbox_curr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_service_brake_curr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_servos_curr;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdu_shutdown_circuit_curr;
};

/**
 * Signals in message EPSC_Config_In.
 *
 * All signal values are as on the CAN bus.
 */
struct can1_main_ft24_epsc_config_in_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t epsc_should_calibrate;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epsc_should_change_mode;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epsc_mode;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epsc_flag3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epsc_flag4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epsc_flag5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epsc_flag6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epsc_flag7;

    /**
     * Range: 0..256 (0..25.6 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t epsc_kp_pos;

    /**
     * Range: 0..256 (0..25.6 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t epsc_ki_pos;

    /**
     * Range: 0..256 (0..25.6 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t epsc_kp_rpm;

    /**
     * Range: 0..256 (0..25.6 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t epsc_ki_rpm;

    /**
     * Range: 0..256 (0..25.6 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t epsc_kp_curr;

    /**
     * Range: 0..256 (0..25.6 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t epsc_ki_curr;
};

/**
 * Pack message JetsonCommands.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_jetson_commands_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_jetson_commands_t *src_p,
    size_t size);

/**
 * Unpack message JetsonCommands.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_jetson_commands_unpack(
    struct can1_main_ft24_jetson_commands_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from JetsonCommands.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_jetson_commands_init(struct can1_main_ft24_jetson_commands_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_commands_jetson_brake_ratio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_commands_jetson_brake_ratio_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_commands_jetson_brake_ratio_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_commands_jetson_speed_target_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_commands_jetson_speed_target_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_commands_jetson_speed_target_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_commands_jetson_speed_target_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_commands_jetson_speed_target_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_commands_jetson_speed_target_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_jetson_commands_jetson_steering_angle_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_commands_jetson_steering_angle_left_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_commands_jetson_steering_angle_left_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_jetson_commands_jetson_steering_angle_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_commands_jetson_steering_angle_right_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_commands_jetson_steering_angle_right_is_in_range(int8_t value);

/**
 * Pack message JetsonTX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_jetson_tx_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_jetson_tx_t *src_p,
    size_t size);

/**
 * Unpack message JetsonTX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_jetson_tx_unpack(
    struct can1_main_ft24_jetson_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from JetsonTX.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_jetson_tx_init(struct can1_main_ft24_jetson_tx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_tx_jetson_as_mission_complete_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_tx_jetson_as_mission_complete_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_tx_jetson_as_mission_complete_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_tx_jetson_as_ok_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_tx_jetson_as_ok_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_tx_jetson_as_ok_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_tx_jetson_lap_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_tx_jetson_lap_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_tx_jetson_lap_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_tx_jetson_cones_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_tx_jetson_cones_all_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_tx_jetson_cones_all_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_tx_jetson_cones_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_tx_jetson_cones_actual_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_tx_jetson_cones_actual_is_in_range(uint8_t value);

/**
 * Pack message AMS_Slave0_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave0_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave0_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave0_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave0_log0_unpack(
    struct can1_main_ft24_ams_slave0_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave0_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave0_log0_init(struct can1_main_ft24_ams_slave0_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log0_ams_slave0_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log0_ams_slave0_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log0_ams_slave0_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log0_ams_slave0_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log0_ams_slave0_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log0_ams_slave0_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log0_ams_slave0_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log0_ams_slave0_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log0_ams_slave0_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log0_ams_slave0_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log0_ams_slave0_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log0_ams_slave0_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave0_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave0_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave0_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave0_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave0_log1_unpack(
    struct can1_main_ft24_ams_slave0_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave0_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave0_log1_init(struct can1_main_ft24_ams_slave0_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log1_ams_slave0_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log1_ams_slave0_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log1_ams_slave0_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log1_ams_slave0_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log1_ams_slave0_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log1_ams_slave0_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log1_ams_slave0_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log1_ams_slave0_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log1_ams_slave0_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log1_ams_slave0_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log1_ams_slave0_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log1_ams_slave0_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave0_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave0_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave0_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave0_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave0_log2_unpack(
    struct can1_main_ft24_ams_slave0_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave0_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave0_log2_init(struct can1_main_ft24_ams_slave0_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log2_ams_slave0_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log2_ams_slave0_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log2_ams_slave0_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log2_ams_slave0_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log2_ams_slave0_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log2_ams_slave0_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log2_ams_slave0_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log2_ams_slave0_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log2_ams_slave0_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log2_ams_slave0_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log2_ams_slave0_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log2_ams_slave0_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave0_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave0_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave0_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave0_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave0_log3_unpack(
    struct can1_main_ft24_ams_slave0_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave0_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave0_log3_init(struct can1_main_ft24_ams_slave0_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log3_ams_slave0_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log3_ams_slave0_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log3_ams_slave0_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log3_ams_slave0_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log3_ams_slave0_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log3_ams_slave0_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log3_ams_slave0_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log3_ams_slave0_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log3_ams_slave0_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log3_ams_slave0_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log3_ams_slave0_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log3_ams_slave0_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave0_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave0_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave0_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave0_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave0_log4_unpack(
    struct can1_main_ft24_ams_slave0_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave0_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave0_log4_init(struct can1_main_ft24_ams_slave0_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_log4_ams_slave0_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log4_ams_slave0_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log4_ams_slave0_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave0_log4_ams_slave0_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log4_ams_slave0_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log4_ams_slave0_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave0_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave0_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave0_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave0_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave0_log5_unpack(
    struct can1_main_ft24_ams_slave0_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave0_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave0_log5_init(struct can1_main_ft24_ams_slave0_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log5_ams_slave0_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log5_ams_slave0_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log5_ams_slave0_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log5_ams_slave0_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log5_ams_slave0_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log5_ams_slave0_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log5_ams_slave0_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log5_ams_slave0_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log5_ams_slave0_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log5_ams_slave0_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log5_ams_slave0_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log5_ams_slave0_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log5_ams_slave0_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log5_ams_slave0_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log5_ams_slave0_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log5_ams_slave0_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log5_ams_slave0_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log5_ams_slave0_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log5_ams_slave0_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log5_ams_slave0_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log5_ams_slave0_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log5_ams_slave0_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log5_ams_slave0_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log5_ams_slave0_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave0_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave0_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave0_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave0_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave0_log6_unpack(
    struct can1_main_ft24_ams_slave0_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave0_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave0_log6_init(struct can1_main_ft24_ams_slave0_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log6_ams_slave0_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log6_ams_slave0_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log6_ams_slave0_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log6_ams_slave0_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log6_ams_slave0_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log6_ams_slave0_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log6_ams_slave0_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log6_ams_slave0_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log6_ams_slave0_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log6_ams_slave0_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log6_ams_slave0_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log6_ams_slave0_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log6_ams_slave0_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log6_ams_slave0_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log6_ams_slave0_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log6_ams_slave0_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log6_ams_slave0_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log6_ams_slave0_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log6_ams_slave0_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log6_ams_slave0_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log6_ams_slave0_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log6_ams_slave0_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log6_ams_slave0_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log6_ams_slave0_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave0_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave0_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave0_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave0_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave0_log7_unpack(
    struct can1_main_ft24_ams_slave0_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave0_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave0_log7_init(struct can1_main_ft24_ams_slave0_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log7_ams_slave0_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log7_ams_slave0_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log7_ams_slave0_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log7_ams_slave0_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log7_ams_slave0_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log7_ams_slave0_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log7_ams_slave0_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log7_ams_slave0_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log7_ams_slave0_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log7_ams_slave0_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log7_ams_slave0_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log7_ams_slave0_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log7_ams_slave0_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log7_ams_slave0_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log7_ams_slave0_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log7_ams_slave0_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log7_ams_slave0_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log7_ams_slave0_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log7_ams_slave0_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log7_ams_slave0_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log7_ams_slave0_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log7_ams_slave0_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log7_ams_slave0_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log7_ams_slave0_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave0_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave0_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave0_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave0_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave0_log8_unpack(
    struct can1_main_ft24_ams_slave0_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave0_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave0_log8_init(struct can1_main_ft24_ams_slave0_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log8_ams_slave0_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log8_ams_slave0_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log8_ams_slave0_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log8_ams_slave0_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log8_ams_slave0_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log8_ams_slave0_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log8_ams_slave0_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log8_ams_slave0_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log8_ams_slave0_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log8_ams_slave0_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log8_ams_slave0_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log8_ams_slave0_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log8_ams_slave0_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log8_ams_slave0_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log8_ams_slave0_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log8_ams_slave0_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log8_ams_slave0_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log8_ams_slave0_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log8_ams_slave0_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log8_ams_slave0_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log8_ams_slave0_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave0_log8_ams_slave0_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_log8_ams_slave0_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_log8_ams_slave0_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave1_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave1_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave1_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave1_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave1_log0_unpack(
    struct can1_main_ft24_ams_slave1_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave1_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave1_log0_init(struct can1_main_ft24_ams_slave1_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log0_ams_slave1_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log0_ams_slave1_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log0_ams_slave1_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log0_ams_slave1_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log0_ams_slave1_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log0_ams_slave1_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log0_ams_slave1_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log0_ams_slave1_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log0_ams_slave1_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log0_ams_slave1_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log0_ams_slave1_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log0_ams_slave1_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave1_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave1_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave1_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave1_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave1_log1_unpack(
    struct can1_main_ft24_ams_slave1_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave1_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave1_log1_init(struct can1_main_ft24_ams_slave1_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log1_ams_slave1_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log1_ams_slave1_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log1_ams_slave1_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log1_ams_slave1_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log1_ams_slave1_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log1_ams_slave1_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log1_ams_slave1_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log1_ams_slave1_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log1_ams_slave1_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log1_ams_slave1_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log1_ams_slave1_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log1_ams_slave1_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave1_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave1_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave1_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave1_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave1_log2_unpack(
    struct can1_main_ft24_ams_slave1_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave1_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave1_log2_init(struct can1_main_ft24_ams_slave1_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log2_ams_slave1_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log2_ams_slave1_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log2_ams_slave1_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log2_ams_slave1_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log2_ams_slave1_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log2_ams_slave1_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log2_ams_slave1_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log2_ams_slave1_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log2_ams_slave1_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log2_ams_slave1_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log2_ams_slave1_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log2_ams_slave1_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave1_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave1_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave1_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave1_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave1_log3_unpack(
    struct can1_main_ft24_ams_slave1_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave1_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave1_log3_init(struct can1_main_ft24_ams_slave1_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log3_ams_slave1_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log3_ams_slave1_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log3_ams_slave1_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log3_ams_slave1_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log3_ams_slave1_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log3_ams_slave1_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log3_ams_slave1_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log3_ams_slave1_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log3_ams_slave1_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log3_ams_slave1_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log3_ams_slave1_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log3_ams_slave1_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave1_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave1_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave1_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave1_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave1_log4_unpack(
    struct can1_main_ft24_ams_slave1_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave1_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave1_log4_init(struct can1_main_ft24_ams_slave1_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_log4_ams_slave1_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log4_ams_slave1_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log4_ams_slave1_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave1_log4_ams_slave1_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log4_ams_slave1_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log4_ams_slave1_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave1_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave1_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave1_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave1_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave1_log5_unpack(
    struct can1_main_ft24_ams_slave1_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave1_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave1_log5_init(struct can1_main_ft24_ams_slave1_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log5_ams_slave1_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log5_ams_slave1_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log5_ams_slave1_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log5_ams_slave1_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log5_ams_slave1_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log5_ams_slave1_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log5_ams_slave1_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log5_ams_slave1_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log5_ams_slave1_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log5_ams_slave1_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log5_ams_slave1_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log5_ams_slave1_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log5_ams_slave1_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log5_ams_slave1_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log5_ams_slave1_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log5_ams_slave1_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log5_ams_slave1_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log5_ams_slave1_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log5_ams_slave1_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log5_ams_slave1_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log5_ams_slave1_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log5_ams_slave1_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log5_ams_slave1_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log5_ams_slave1_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave1_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave1_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave1_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave1_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave1_log6_unpack(
    struct can1_main_ft24_ams_slave1_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave1_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave1_log6_init(struct can1_main_ft24_ams_slave1_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log6_ams_slave1_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log6_ams_slave1_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log6_ams_slave1_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log6_ams_slave1_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log6_ams_slave1_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log6_ams_slave1_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log6_ams_slave1_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log6_ams_slave1_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log6_ams_slave1_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log6_ams_slave1_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log6_ams_slave1_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log6_ams_slave1_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log6_ams_slave1_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log6_ams_slave1_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log6_ams_slave1_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log6_ams_slave1_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log6_ams_slave1_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log6_ams_slave1_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log6_ams_slave1_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log6_ams_slave1_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log6_ams_slave1_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log6_ams_slave1_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log6_ams_slave1_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log6_ams_slave1_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave1_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave1_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave1_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave1_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave1_log7_unpack(
    struct can1_main_ft24_ams_slave1_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave1_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave1_log7_init(struct can1_main_ft24_ams_slave1_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log7_ams_slave1_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log7_ams_slave1_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log7_ams_slave1_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log7_ams_slave1_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log7_ams_slave1_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log7_ams_slave1_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log7_ams_slave1_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log7_ams_slave1_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log7_ams_slave1_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log7_ams_slave1_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log7_ams_slave1_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log7_ams_slave1_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log7_ams_slave1_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log7_ams_slave1_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log7_ams_slave1_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log7_ams_slave1_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log7_ams_slave1_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log7_ams_slave1_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log7_ams_slave1_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log7_ams_slave1_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log7_ams_slave1_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log7_ams_slave1_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log7_ams_slave1_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log7_ams_slave1_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave1_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave1_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave1_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave1_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave1_log8_unpack(
    struct can1_main_ft24_ams_slave1_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave1_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave1_log8_init(struct can1_main_ft24_ams_slave1_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log8_ams_slave1_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log8_ams_slave1_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log8_ams_slave1_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log8_ams_slave1_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log8_ams_slave1_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log8_ams_slave1_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log8_ams_slave1_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log8_ams_slave1_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log8_ams_slave1_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log8_ams_slave1_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log8_ams_slave1_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log8_ams_slave1_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log8_ams_slave1_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log8_ams_slave1_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log8_ams_slave1_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log8_ams_slave1_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log8_ams_slave1_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log8_ams_slave1_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log8_ams_slave1_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log8_ams_slave1_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log8_ams_slave1_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave1_log8_ams_slave1_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_log8_ams_slave1_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_log8_ams_slave1_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave2_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave2_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave2_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave2_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave2_log0_unpack(
    struct can1_main_ft24_ams_slave2_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave2_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave2_log0_init(struct can1_main_ft24_ams_slave2_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log0_ams_slave2_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log0_ams_slave2_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log0_ams_slave2_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log0_ams_slave2_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log0_ams_slave2_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log0_ams_slave2_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log0_ams_slave2_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log0_ams_slave2_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log0_ams_slave2_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log0_ams_slave2_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log0_ams_slave2_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log0_ams_slave2_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave2_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave2_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave2_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave2_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave2_log1_unpack(
    struct can1_main_ft24_ams_slave2_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave2_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave2_log1_init(struct can1_main_ft24_ams_slave2_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log1_ams_slave2_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log1_ams_slave2_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log1_ams_slave2_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log1_ams_slave2_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log1_ams_slave2_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log1_ams_slave2_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log1_ams_slave2_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log1_ams_slave2_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log1_ams_slave2_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log1_ams_slave2_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log1_ams_slave2_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log1_ams_slave2_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave2_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave2_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave2_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave2_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave2_log2_unpack(
    struct can1_main_ft24_ams_slave2_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave2_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave2_log2_init(struct can1_main_ft24_ams_slave2_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log2_ams_slave2_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log2_ams_slave2_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log2_ams_slave2_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log2_ams_slave2_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log2_ams_slave2_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log2_ams_slave2_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log2_ams_slave2_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log2_ams_slave2_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log2_ams_slave2_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log2_ams_slave2_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log2_ams_slave2_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log2_ams_slave2_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave2_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave2_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave2_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave2_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave2_log3_unpack(
    struct can1_main_ft24_ams_slave2_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave2_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave2_log3_init(struct can1_main_ft24_ams_slave2_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log3_ams_slave2_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log3_ams_slave2_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log3_ams_slave2_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log3_ams_slave2_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log3_ams_slave2_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log3_ams_slave2_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log3_ams_slave2_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log3_ams_slave2_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log3_ams_slave2_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log3_ams_slave2_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log3_ams_slave2_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log3_ams_slave2_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave2_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave2_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave2_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave2_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave2_log4_unpack(
    struct can1_main_ft24_ams_slave2_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave2_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave2_log4_init(struct can1_main_ft24_ams_slave2_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_log4_ams_slave2_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log4_ams_slave2_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log4_ams_slave2_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave2_log4_ams_slave2_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log4_ams_slave2_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log4_ams_slave2_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave2_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave2_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave2_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave2_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave2_log5_unpack(
    struct can1_main_ft24_ams_slave2_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave2_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave2_log5_init(struct can1_main_ft24_ams_slave2_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log5_ams_slave2_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log5_ams_slave2_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log5_ams_slave2_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log5_ams_slave2_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log5_ams_slave2_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log5_ams_slave2_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log5_ams_slave2_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log5_ams_slave2_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log5_ams_slave2_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log5_ams_slave2_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log5_ams_slave2_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log5_ams_slave2_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log5_ams_slave2_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log5_ams_slave2_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log5_ams_slave2_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log5_ams_slave2_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log5_ams_slave2_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log5_ams_slave2_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log5_ams_slave2_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log5_ams_slave2_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log5_ams_slave2_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log5_ams_slave2_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log5_ams_slave2_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log5_ams_slave2_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave2_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave2_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave2_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave2_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave2_log6_unpack(
    struct can1_main_ft24_ams_slave2_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave2_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave2_log6_init(struct can1_main_ft24_ams_slave2_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log6_ams_slave2_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log6_ams_slave2_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log6_ams_slave2_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log6_ams_slave2_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log6_ams_slave2_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log6_ams_slave2_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log6_ams_slave2_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log6_ams_slave2_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log6_ams_slave2_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log6_ams_slave2_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log6_ams_slave2_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log6_ams_slave2_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log6_ams_slave2_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log6_ams_slave2_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log6_ams_slave2_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log6_ams_slave2_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log6_ams_slave2_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log6_ams_slave2_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log6_ams_slave2_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log6_ams_slave2_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log6_ams_slave2_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log6_ams_slave2_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log6_ams_slave2_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log6_ams_slave2_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave2_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave2_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave2_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave2_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave2_log7_unpack(
    struct can1_main_ft24_ams_slave2_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave2_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave2_log7_init(struct can1_main_ft24_ams_slave2_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log7_ams_slave2_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log7_ams_slave2_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log7_ams_slave2_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log7_ams_slave2_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log7_ams_slave2_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log7_ams_slave2_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log7_ams_slave2_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log7_ams_slave2_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log7_ams_slave2_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log7_ams_slave2_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log7_ams_slave2_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log7_ams_slave2_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log7_ams_slave2_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log7_ams_slave2_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log7_ams_slave2_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log7_ams_slave2_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log7_ams_slave2_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log7_ams_slave2_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log7_ams_slave2_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log7_ams_slave2_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log7_ams_slave2_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log7_ams_slave2_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log7_ams_slave2_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log7_ams_slave2_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave2_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave2_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave2_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave2_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave2_log8_unpack(
    struct can1_main_ft24_ams_slave2_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave2_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave2_log8_init(struct can1_main_ft24_ams_slave2_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log8_ams_slave2_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log8_ams_slave2_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log8_ams_slave2_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log8_ams_slave2_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log8_ams_slave2_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log8_ams_slave2_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log8_ams_slave2_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log8_ams_slave2_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log8_ams_slave2_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log8_ams_slave2_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log8_ams_slave2_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log8_ams_slave2_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log8_ams_slave2_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log8_ams_slave2_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log8_ams_slave2_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log8_ams_slave2_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log8_ams_slave2_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log8_ams_slave2_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log8_ams_slave2_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log8_ams_slave2_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log8_ams_slave2_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave2_log8_ams_slave2_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_log8_ams_slave2_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_log8_ams_slave2_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave3_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave3_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave3_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave3_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave3_log0_unpack(
    struct can1_main_ft24_ams_slave3_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave3_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave3_log0_init(struct can1_main_ft24_ams_slave3_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log0_ams_slave3_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log0_ams_slave3_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log0_ams_slave3_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log0_ams_slave3_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log0_ams_slave3_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log0_ams_slave3_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log0_ams_slave3_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log0_ams_slave3_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log0_ams_slave3_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log0_ams_slave3_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log0_ams_slave3_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log0_ams_slave3_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave3_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave3_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave3_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave3_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave3_log1_unpack(
    struct can1_main_ft24_ams_slave3_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave3_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave3_log1_init(struct can1_main_ft24_ams_slave3_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log1_ams_slave3_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log1_ams_slave3_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log1_ams_slave3_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log1_ams_slave3_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log1_ams_slave3_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log1_ams_slave3_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log1_ams_slave3_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log1_ams_slave3_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log1_ams_slave3_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log1_ams_slave3_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log1_ams_slave3_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log1_ams_slave3_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave3_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave3_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave3_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave3_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave3_log2_unpack(
    struct can1_main_ft24_ams_slave3_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave3_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave3_log2_init(struct can1_main_ft24_ams_slave3_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log2_ams_slave3_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log2_ams_slave3_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log2_ams_slave3_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log2_ams_slave3_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log2_ams_slave3_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log2_ams_slave3_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log2_ams_slave3_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log2_ams_slave3_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log2_ams_slave3_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log2_ams_slave3_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log2_ams_slave3_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log2_ams_slave3_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave3_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave3_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave3_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave3_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave3_log3_unpack(
    struct can1_main_ft24_ams_slave3_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave3_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave3_log3_init(struct can1_main_ft24_ams_slave3_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log3_ams_slave3_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log3_ams_slave3_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log3_ams_slave3_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log3_ams_slave3_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log3_ams_slave3_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log3_ams_slave3_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log3_ams_slave3_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log3_ams_slave3_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log3_ams_slave3_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log3_ams_slave3_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log3_ams_slave3_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log3_ams_slave3_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave3_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave3_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave3_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave3_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave3_log4_unpack(
    struct can1_main_ft24_ams_slave3_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave3_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave3_log4_init(struct can1_main_ft24_ams_slave3_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_log4_ams_slave3_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log4_ams_slave3_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log4_ams_slave3_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave3_log4_ams_slave3_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log4_ams_slave3_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log4_ams_slave3_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave3_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave3_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave3_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave3_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave3_log5_unpack(
    struct can1_main_ft24_ams_slave3_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave3_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave3_log5_init(struct can1_main_ft24_ams_slave3_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log5_ams_slave3_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log5_ams_slave3_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log5_ams_slave3_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log5_ams_slave3_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log5_ams_slave3_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log5_ams_slave3_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log5_ams_slave3_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log5_ams_slave3_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log5_ams_slave3_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log5_ams_slave3_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log5_ams_slave3_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log5_ams_slave3_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log5_ams_slave3_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log5_ams_slave3_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log5_ams_slave3_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log5_ams_slave3_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log5_ams_slave3_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log5_ams_slave3_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log5_ams_slave3_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log5_ams_slave3_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log5_ams_slave3_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log5_ams_slave3_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log5_ams_slave3_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log5_ams_slave3_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave3_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave3_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave3_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave3_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave3_log6_unpack(
    struct can1_main_ft24_ams_slave3_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave3_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave3_log6_init(struct can1_main_ft24_ams_slave3_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log6_ams_slave3_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log6_ams_slave3_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log6_ams_slave3_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log6_ams_slave3_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log6_ams_slave3_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log6_ams_slave3_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log6_ams_slave3_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log6_ams_slave3_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log6_ams_slave3_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log6_ams_slave3_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log6_ams_slave3_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log6_ams_slave3_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log6_ams_slave3_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log6_ams_slave3_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log6_ams_slave3_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log6_ams_slave3_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log6_ams_slave3_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log6_ams_slave3_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log6_ams_slave3_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log6_ams_slave3_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log6_ams_slave3_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log6_ams_slave3_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log6_ams_slave3_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log6_ams_slave3_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave3_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave3_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave3_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave3_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave3_log7_unpack(
    struct can1_main_ft24_ams_slave3_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave3_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave3_log7_init(struct can1_main_ft24_ams_slave3_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log7_ams_slave3_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log7_ams_slave3_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log7_ams_slave3_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log7_ams_slave3_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log7_ams_slave3_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log7_ams_slave3_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log7_ams_slave3_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log7_ams_slave3_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log7_ams_slave3_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log7_ams_slave3_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log7_ams_slave3_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log7_ams_slave3_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log7_ams_slave3_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log7_ams_slave3_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log7_ams_slave3_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log7_ams_slave3_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log7_ams_slave3_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log7_ams_slave3_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log7_ams_slave3_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log7_ams_slave3_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log7_ams_slave3_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log7_ams_slave3_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log7_ams_slave3_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log7_ams_slave3_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave3_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave3_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave3_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave3_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave3_log8_unpack(
    struct can1_main_ft24_ams_slave3_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave3_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave3_log8_init(struct can1_main_ft24_ams_slave3_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log8_ams_slave3_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log8_ams_slave3_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log8_ams_slave3_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log8_ams_slave3_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log8_ams_slave3_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log8_ams_slave3_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log8_ams_slave3_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log8_ams_slave3_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log8_ams_slave3_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log8_ams_slave3_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log8_ams_slave3_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log8_ams_slave3_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log8_ams_slave3_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log8_ams_slave3_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log8_ams_slave3_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log8_ams_slave3_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log8_ams_slave3_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log8_ams_slave3_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log8_ams_slave3_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log8_ams_slave3_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log8_ams_slave3_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave3_log8_ams_slave3_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_log8_ams_slave3_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_log8_ams_slave3_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave4_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave4_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave4_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave4_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave4_log0_unpack(
    struct can1_main_ft24_ams_slave4_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave4_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave4_log0_init(struct can1_main_ft24_ams_slave4_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log0_ams_slave4_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log0_ams_slave4_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log0_ams_slave4_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log0_ams_slave4_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log0_ams_slave4_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log0_ams_slave4_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log0_ams_slave4_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log0_ams_slave4_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log0_ams_slave4_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log0_ams_slave4_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log0_ams_slave4_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log0_ams_slave4_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave4_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave4_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave4_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave4_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave4_log1_unpack(
    struct can1_main_ft24_ams_slave4_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave4_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave4_log1_init(struct can1_main_ft24_ams_slave4_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log1_ams_slave4_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log1_ams_slave4_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log1_ams_slave4_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log1_ams_slave4_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log1_ams_slave4_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log1_ams_slave4_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log1_ams_slave4_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log1_ams_slave4_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log1_ams_slave4_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log1_ams_slave4_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log1_ams_slave4_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log1_ams_slave4_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave4_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave4_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave4_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave4_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave4_log2_unpack(
    struct can1_main_ft24_ams_slave4_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave4_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave4_log2_init(struct can1_main_ft24_ams_slave4_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log2_ams_slave4_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log2_ams_slave4_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log2_ams_slave4_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log2_ams_slave4_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log2_ams_slave4_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log2_ams_slave4_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log2_ams_slave4_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log2_ams_slave4_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log2_ams_slave4_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log2_ams_slave4_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log2_ams_slave4_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log2_ams_slave4_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave4_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave4_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave4_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave4_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave4_log3_unpack(
    struct can1_main_ft24_ams_slave4_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave4_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave4_log3_init(struct can1_main_ft24_ams_slave4_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log3_ams_slave4_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log3_ams_slave4_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log3_ams_slave4_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log3_ams_slave4_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log3_ams_slave4_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log3_ams_slave4_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log3_ams_slave4_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log3_ams_slave4_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log3_ams_slave4_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log3_ams_slave4_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log3_ams_slave4_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log3_ams_slave4_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave4_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave4_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave4_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave4_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave4_log4_unpack(
    struct can1_main_ft24_ams_slave4_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave4_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave4_log4_init(struct can1_main_ft24_ams_slave4_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_log4_ams_slave4_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log4_ams_slave4_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log4_ams_slave4_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave4_log4_ams_slave4_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log4_ams_slave4_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log4_ams_slave4_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave4_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave4_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave4_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave4_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave4_log5_unpack(
    struct can1_main_ft24_ams_slave4_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave4_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave4_log5_init(struct can1_main_ft24_ams_slave4_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log5_ams_slave4_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log5_ams_slave4_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log5_ams_slave4_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log5_ams_slave4_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log5_ams_slave4_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log5_ams_slave4_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log5_ams_slave4_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log5_ams_slave4_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log5_ams_slave4_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log5_ams_slave4_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log5_ams_slave4_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log5_ams_slave4_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log5_ams_slave4_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log5_ams_slave4_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log5_ams_slave4_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log5_ams_slave4_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log5_ams_slave4_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log5_ams_slave4_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log5_ams_slave4_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log5_ams_slave4_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log5_ams_slave4_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log5_ams_slave4_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log5_ams_slave4_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log5_ams_slave4_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave4_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave4_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave4_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave4_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave4_log6_unpack(
    struct can1_main_ft24_ams_slave4_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave4_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave4_log6_init(struct can1_main_ft24_ams_slave4_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log6_ams_slave4_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log6_ams_slave4_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log6_ams_slave4_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log6_ams_slave4_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log6_ams_slave4_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log6_ams_slave4_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log6_ams_slave4_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log6_ams_slave4_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log6_ams_slave4_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log6_ams_slave4_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log6_ams_slave4_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log6_ams_slave4_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log6_ams_slave4_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log6_ams_slave4_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log6_ams_slave4_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log6_ams_slave4_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log6_ams_slave4_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log6_ams_slave4_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log6_ams_slave4_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log6_ams_slave4_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log6_ams_slave4_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log6_ams_slave4_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log6_ams_slave4_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log6_ams_slave4_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave4_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave4_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave4_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave4_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave4_log7_unpack(
    struct can1_main_ft24_ams_slave4_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave4_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave4_log7_init(struct can1_main_ft24_ams_slave4_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log7_ams_slave4_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log7_ams_slave4_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log7_ams_slave4_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log7_ams_slave4_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log7_ams_slave4_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log7_ams_slave4_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log7_ams_slave4_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log7_ams_slave4_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log7_ams_slave4_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log7_ams_slave4_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log7_ams_slave4_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log7_ams_slave4_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log7_ams_slave4_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log7_ams_slave4_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log7_ams_slave4_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log7_ams_slave4_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log7_ams_slave4_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log7_ams_slave4_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log7_ams_slave4_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log7_ams_slave4_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log7_ams_slave4_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log7_ams_slave4_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log7_ams_slave4_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log7_ams_slave4_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave4_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave4_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave4_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave4_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave4_log8_unpack(
    struct can1_main_ft24_ams_slave4_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave4_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave4_log8_init(struct can1_main_ft24_ams_slave4_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log8_ams_slave4_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log8_ams_slave4_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log8_ams_slave4_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log8_ams_slave4_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log8_ams_slave4_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log8_ams_slave4_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log8_ams_slave4_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log8_ams_slave4_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log8_ams_slave4_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log8_ams_slave4_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log8_ams_slave4_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log8_ams_slave4_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log8_ams_slave4_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log8_ams_slave4_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log8_ams_slave4_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log8_ams_slave4_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log8_ams_slave4_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log8_ams_slave4_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log8_ams_slave4_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log8_ams_slave4_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log8_ams_slave4_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave4_log8_ams_slave4_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_log8_ams_slave4_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_log8_ams_slave4_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave5_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave5_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave5_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave5_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave5_log0_unpack(
    struct can1_main_ft24_ams_slave5_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave5_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave5_log0_init(struct can1_main_ft24_ams_slave5_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log0_ams_slave5_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log0_ams_slave5_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log0_ams_slave5_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log0_ams_slave5_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log0_ams_slave5_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log0_ams_slave5_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log0_ams_slave5_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log0_ams_slave5_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log0_ams_slave5_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log0_ams_slave5_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log0_ams_slave5_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log0_ams_slave5_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave5_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave5_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave5_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave5_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave5_log1_unpack(
    struct can1_main_ft24_ams_slave5_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave5_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave5_log1_init(struct can1_main_ft24_ams_slave5_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log1_ams_slave5_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log1_ams_slave5_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log1_ams_slave5_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log1_ams_slave5_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log1_ams_slave5_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log1_ams_slave5_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log1_ams_slave5_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log1_ams_slave5_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log1_ams_slave5_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log1_ams_slave5_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log1_ams_slave5_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log1_ams_slave5_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave5_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave5_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave5_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave5_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave5_log2_unpack(
    struct can1_main_ft24_ams_slave5_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave5_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave5_log2_init(struct can1_main_ft24_ams_slave5_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log2_ams_slave5_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log2_ams_slave5_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log2_ams_slave5_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log2_ams_slave5_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log2_ams_slave5_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log2_ams_slave5_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log2_ams_slave5_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log2_ams_slave5_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log2_ams_slave5_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log2_ams_slave5_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log2_ams_slave5_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log2_ams_slave5_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave5_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave5_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave5_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave5_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave5_log3_unpack(
    struct can1_main_ft24_ams_slave5_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave5_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave5_log3_init(struct can1_main_ft24_ams_slave5_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log3_ams_slave5_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log3_ams_slave5_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log3_ams_slave5_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log3_ams_slave5_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log3_ams_slave5_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log3_ams_slave5_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log3_ams_slave5_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log3_ams_slave5_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log3_ams_slave5_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log3_ams_slave5_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log3_ams_slave5_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log3_ams_slave5_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave5_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave5_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave5_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave5_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave5_log4_unpack(
    struct can1_main_ft24_ams_slave5_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave5_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave5_log4_init(struct can1_main_ft24_ams_slave5_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_log4_ams_slave5_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log4_ams_slave5_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log4_ams_slave5_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave5_log4_ams_slave5_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log4_ams_slave5_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log4_ams_slave5_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave5_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave5_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave5_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave5_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave5_log5_unpack(
    struct can1_main_ft24_ams_slave5_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave5_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave5_log5_init(struct can1_main_ft24_ams_slave5_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log5_ams_slave5_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log5_ams_slave5_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log5_ams_slave5_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log5_ams_slave5_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log5_ams_slave5_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log5_ams_slave5_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log5_ams_slave5_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log5_ams_slave5_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log5_ams_slave5_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log5_ams_slave5_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log5_ams_slave5_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log5_ams_slave5_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log5_ams_slave5_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log5_ams_slave5_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log5_ams_slave5_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log5_ams_slave5_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log5_ams_slave5_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log5_ams_slave5_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log5_ams_slave5_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log5_ams_slave5_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log5_ams_slave5_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log5_ams_slave5_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log5_ams_slave5_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log5_ams_slave5_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave5_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave5_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave5_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave5_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave5_log6_unpack(
    struct can1_main_ft24_ams_slave5_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave5_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave5_log6_init(struct can1_main_ft24_ams_slave5_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log6_ams_slave5_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log6_ams_slave5_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log6_ams_slave5_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log6_ams_slave5_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log6_ams_slave5_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log6_ams_slave5_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log6_ams_slave5_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log6_ams_slave5_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log6_ams_slave5_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log6_ams_slave5_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log6_ams_slave5_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log6_ams_slave5_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log6_ams_slave5_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log6_ams_slave5_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log6_ams_slave5_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log6_ams_slave5_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log6_ams_slave5_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log6_ams_slave5_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log6_ams_slave5_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log6_ams_slave5_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log6_ams_slave5_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log6_ams_slave5_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log6_ams_slave5_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log6_ams_slave5_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave5_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave5_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave5_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave5_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave5_log7_unpack(
    struct can1_main_ft24_ams_slave5_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave5_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave5_log7_init(struct can1_main_ft24_ams_slave5_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log7_ams_slave5_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log7_ams_slave5_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log7_ams_slave5_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log7_ams_slave5_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log7_ams_slave5_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log7_ams_slave5_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log7_ams_slave5_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log7_ams_slave5_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log7_ams_slave5_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log7_ams_slave5_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log7_ams_slave5_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log7_ams_slave5_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log7_ams_slave5_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log7_ams_slave5_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log7_ams_slave5_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log7_ams_slave5_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log7_ams_slave5_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log7_ams_slave5_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log7_ams_slave5_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log7_ams_slave5_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log7_ams_slave5_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log7_ams_slave5_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log7_ams_slave5_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log7_ams_slave5_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave5_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave5_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave5_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave5_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave5_log8_unpack(
    struct can1_main_ft24_ams_slave5_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave5_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave5_log8_init(struct can1_main_ft24_ams_slave5_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log8_ams_slave5_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log8_ams_slave5_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log8_ams_slave5_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log8_ams_slave5_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log8_ams_slave5_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log8_ams_slave5_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log8_ams_slave5_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log8_ams_slave5_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log8_ams_slave5_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log8_ams_slave5_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log8_ams_slave5_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log8_ams_slave5_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log8_ams_slave5_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log8_ams_slave5_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log8_ams_slave5_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log8_ams_slave5_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log8_ams_slave5_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log8_ams_slave5_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log8_ams_slave5_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log8_ams_slave5_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log8_ams_slave5_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave5_log8_ams_slave5_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_log8_ams_slave5_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_log8_ams_slave5_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave6_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave6_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave6_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave6_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave6_log0_unpack(
    struct can1_main_ft24_ams_slave6_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave6_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave6_log0_init(struct can1_main_ft24_ams_slave6_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log0_ams_slave6_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log0_ams_slave6_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log0_ams_slave6_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log0_ams_slave6_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log0_ams_slave6_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log0_ams_slave6_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log0_ams_slave6_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log0_ams_slave6_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log0_ams_slave6_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log0_ams_slave6_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log0_ams_slave6_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log0_ams_slave6_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave6_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave6_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave6_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave6_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave6_log1_unpack(
    struct can1_main_ft24_ams_slave6_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave6_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave6_log1_init(struct can1_main_ft24_ams_slave6_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log1_ams_slave6_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log1_ams_slave6_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log1_ams_slave6_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log1_ams_slave6_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log1_ams_slave6_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log1_ams_slave6_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log1_ams_slave6_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log1_ams_slave6_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log1_ams_slave6_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log1_ams_slave6_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log1_ams_slave6_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log1_ams_slave6_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave6_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave6_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave6_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave6_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave6_log2_unpack(
    struct can1_main_ft24_ams_slave6_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave6_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave6_log2_init(struct can1_main_ft24_ams_slave6_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log2_ams_slave6_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log2_ams_slave6_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log2_ams_slave6_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log2_ams_slave6_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log2_ams_slave6_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log2_ams_slave6_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log2_ams_slave6_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log2_ams_slave6_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log2_ams_slave6_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log2_ams_slave6_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log2_ams_slave6_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log2_ams_slave6_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave6_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave6_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave6_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave6_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave6_log3_unpack(
    struct can1_main_ft24_ams_slave6_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave6_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave6_log3_init(struct can1_main_ft24_ams_slave6_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log3_ams_slave6_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log3_ams_slave6_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log3_ams_slave6_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log3_ams_slave6_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log3_ams_slave6_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log3_ams_slave6_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log3_ams_slave6_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log3_ams_slave6_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log3_ams_slave6_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log3_ams_slave6_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log3_ams_slave6_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log3_ams_slave6_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave6_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave6_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave6_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave6_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave6_log4_unpack(
    struct can1_main_ft24_ams_slave6_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave6_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave6_log4_init(struct can1_main_ft24_ams_slave6_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_log4_ams_slave6_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log4_ams_slave6_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log4_ams_slave6_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave6_log4_ams_slave6_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log4_ams_slave6_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log4_ams_slave6_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave6_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave6_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave6_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave6_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave6_log5_unpack(
    struct can1_main_ft24_ams_slave6_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave6_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave6_log5_init(struct can1_main_ft24_ams_slave6_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log5_ams_slave6_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log5_ams_slave6_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log5_ams_slave6_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log5_ams_slave6_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log5_ams_slave6_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log5_ams_slave6_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log5_ams_slave6_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log5_ams_slave6_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log5_ams_slave6_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log5_ams_slave6_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log5_ams_slave6_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log5_ams_slave6_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log5_ams_slave6_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log5_ams_slave6_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log5_ams_slave6_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log5_ams_slave6_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log5_ams_slave6_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log5_ams_slave6_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log5_ams_slave6_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log5_ams_slave6_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log5_ams_slave6_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log5_ams_slave6_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log5_ams_slave6_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log5_ams_slave6_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave6_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave6_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave6_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave6_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave6_log6_unpack(
    struct can1_main_ft24_ams_slave6_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave6_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave6_log6_init(struct can1_main_ft24_ams_slave6_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log6_ams_slave6_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log6_ams_slave6_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log6_ams_slave6_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log6_ams_slave6_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log6_ams_slave6_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log6_ams_slave6_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log6_ams_slave6_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log6_ams_slave6_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log6_ams_slave6_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log6_ams_slave6_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log6_ams_slave6_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log6_ams_slave6_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log6_ams_slave6_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log6_ams_slave6_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log6_ams_slave6_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log6_ams_slave6_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log6_ams_slave6_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log6_ams_slave6_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log6_ams_slave6_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log6_ams_slave6_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log6_ams_slave6_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log6_ams_slave6_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log6_ams_slave6_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log6_ams_slave6_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave6_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave6_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave6_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave6_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave6_log7_unpack(
    struct can1_main_ft24_ams_slave6_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave6_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave6_log7_init(struct can1_main_ft24_ams_slave6_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log7_ams_slave6_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log7_ams_slave6_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log7_ams_slave6_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log7_ams_slave6_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log7_ams_slave6_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log7_ams_slave6_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log7_ams_slave6_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log7_ams_slave6_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log7_ams_slave6_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log7_ams_slave6_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log7_ams_slave6_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log7_ams_slave6_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log7_ams_slave6_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log7_ams_slave6_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log7_ams_slave6_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log7_ams_slave6_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log7_ams_slave6_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log7_ams_slave6_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log7_ams_slave6_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log7_ams_slave6_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log7_ams_slave6_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log7_ams_slave6_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log7_ams_slave6_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log7_ams_slave6_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave6_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave6_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave6_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave6_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave6_log8_unpack(
    struct can1_main_ft24_ams_slave6_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave6_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave6_log8_init(struct can1_main_ft24_ams_slave6_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log8_ams_slave6_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log8_ams_slave6_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log8_ams_slave6_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log8_ams_slave6_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log8_ams_slave6_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log8_ams_slave6_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log8_ams_slave6_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log8_ams_slave6_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log8_ams_slave6_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log8_ams_slave6_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log8_ams_slave6_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log8_ams_slave6_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log8_ams_slave6_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log8_ams_slave6_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log8_ams_slave6_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log8_ams_slave6_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log8_ams_slave6_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log8_ams_slave6_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log8_ams_slave6_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log8_ams_slave6_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log8_ams_slave6_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave6_log8_ams_slave6_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_log8_ams_slave6_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_log8_ams_slave6_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave7_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave7_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave7_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave7_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave7_log0_unpack(
    struct can1_main_ft24_ams_slave7_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave7_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave7_log0_init(struct can1_main_ft24_ams_slave7_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log0_ams_slave7_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log0_ams_slave7_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log0_ams_slave7_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log0_ams_slave7_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log0_ams_slave7_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log0_ams_slave7_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log0_ams_slave7_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log0_ams_slave7_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log0_ams_slave7_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log0_ams_slave7_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log0_ams_slave7_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log0_ams_slave7_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave7_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave7_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave7_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave7_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave7_log1_unpack(
    struct can1_main_ft24_ams_slave7_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave7_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave7_log1_init(struct can1_main_ft24_ams_slave7_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log1_ams_slave7_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log1_ams_slave7_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log1_ams_slave7_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log1_ams_slave7_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log1_ams_slave7_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log1_ams_slave7_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log1_ams_slave7_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log1_ams_slave7_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log1_ams_slave7_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log1_ams_slave7_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log1_ams_slave7_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log1_ams_slave7_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave7_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave7_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave7_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave7_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave7_log2_unpack(
    struct can1_main_ft24_ams_slave7_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave7_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave7_log2_init(struct can1_main_ft24_ams_slave7_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log2_ams_slave7_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log2_ams_slave7_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log2_ams_slave7_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log2_ams_slave7_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log2_ams_slave7_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log2_ams_slave7_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log2_ams_slave7_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log2_ams_slave7_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log2_ams_slave7_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log2_ams_slave7_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log2_ams_slave7_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log2_ams_slave7_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave7_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave7_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave7_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave7_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave7_log3_unpack(
    struct can1_main_ft24_ams_slave7_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave7_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave7_log3_init(struct can1_main_ft24_ams_slave7_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log3_ams_slave7_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log3_ams_slave7_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log3_ams_slave7_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log3_ams_slave7_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log3_ams_slave7_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log3_ams_slave7_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log3_ams_slave7_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log3_ams_slave7_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log3_ams_slave7_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log3_ams_slave7_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log3_ams_slave7_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log3_ams_slave7_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave7_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave7_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave7_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave7_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave7_log4_unpack(
    struct can1_main_ft24_ams_slave7_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave7_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave7_log4_init(struct can1_main_ft24_ams_slave7_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_log4_ams_slave7_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log4_ams_slave7_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log4_ams_slave7_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave7_log4_ams_slave7_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log4_ams_slave7_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log4_ams_slave7_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave7_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave7_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave7_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave7_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave7_log5_unpack(
    struct can1_main_ft24_ams_slave7_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave7_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave7_log5_init(struct can1_main_ft24_ams_slave7_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log5_ams_slave7_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log5_ams_slave7_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log5_ams_slave7_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log5_ams_slave7_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log5_ams_slave7_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log5_ams_slave7_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log5_ams_slave7_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log5_ams_slave7_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log5_ams_slave7_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log5_ams_slave7_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log5_ams_slave7_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log5_ams_slave7_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log5_ams_slave7_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log5_ams_slave7_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log5_ams_slave7_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log5_ams_slave7_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log5_ams_slave7_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log5_ams_slave7_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log5_ams_slave7_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log5_ams_slave7_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log5_ams_slave7_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log5_ams_slave7_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log5_ams_slave7_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log5_ams_slave7_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave7_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave7_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave7_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave7_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave7_log6_unpack(
    struct can1_main_ft24_ams_slave7_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave7_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave7_log6_init(struct can1_main_ft24_ams_slave7_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log6_ams_slave7_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log6_ams_slave7_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log6_ams_slave7_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log6_ams_slave7_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log6_ams_slave7_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log6_ams_slave7_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log6_ams_slave7_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log6_ams_slave7_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log6_ams_slave7_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log6_ams_slave7_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log6_ams_slave7_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log6_ams_slave7_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log6_ams_slave7_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log6_ams_slave7_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log6_ams_slave7_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log6_ams_slave7_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log6_ams_slave7_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log6_ams_slave7_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log6_ams_slave7_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log6_ams_slave7_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log6_ams_slave7_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log6_ams_slave7_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log6_ams_slave7_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log6_ams_slave7_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave7_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave7_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave7_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave7_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave7_log7_unpack(
    struct can1_main_ft24_ams_slave7_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave7_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave7_log7_init(struct can1_main_ft24_ams_slave7_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log7_ams_slave7_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log7_ams_slave7_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log7_ams_slave7_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log7_ams_slave7_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log7_ams_slave7_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log7_ams_slave7_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log7_ams_slave7_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log7_ams_slave7_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log7_ams_slave7_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log7_ams_slave7_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log7_ams_slave7_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log7_ams_slave7_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log7_ams_slave7_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log7_ams_slave7_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log7_ams_slave7_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log7_ams_slave7_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log7_ams_slave7_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log7_ams_slave7_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log7_ams_slave7_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log7_ams_slave7_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log7_ams_slave7_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log7_ams_slave7_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log7_ams_slave7_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log7_ams_slave7_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave7_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave7_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave7_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave7_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave7_log8_unpack(
    struct can1_main_ft24_ams_slave7_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave7_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave7_log8_init(struct can1_main_ft24_ams_slave7_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log8_ams_slave7_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log8_ams_slave7_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log8_ams_slave7_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log8_ams_slave7_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log8_ams_slave7_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log8_ams_slave7_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log8_ams_slave7_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log8_ams_slave7_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log8_ams_slave7_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log8_ams_slave7_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log8_ams_slave7_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log8_ams_slave7_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log8_ams_slave7_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log8_ams_slave7_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log8_ams_slave7_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log8_ams_slave7_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log8_ams_slave7_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log8_ams_slave7_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log8_ams_slave7_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log8_ams_slave7_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log8_ams_slave7_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave7_log8_ams_slave7_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_log8_ams_slave7_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_log8_ams_slave7_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave8_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave8_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave8_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave8_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave8_log0_unpack(
    struct can1_main_ft24_ams_slave8_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave8_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave8_log0_init(struct can1_main_ft24_ams_slave8_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log0_ams_slave8_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log0_ams_slave8_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log0_ams_slave8_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log0_ams_slave8_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log0_ams_slave8_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log0_ams_slave8_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log0_ams_slave8_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log0_ams_slave8_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log0_ams_slave8_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log0_ams_slave8_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log0_ams_slave8_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log0_ams_slave8_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave8_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave8_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave8_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave8_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave8_log1_unpack(
    struct can1_main_ft24_ams_slave8_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave8_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave8_log1_init(struct can1_main_ft24_ams_slave8_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log1_ams_slave8_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log1_ams_slave8_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log1_ams_slave8_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log1_ams_slave8_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log1_ams_slave8_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log1_ams_slave8_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log1_ams_slave8_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log1_ams_slave8_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log1_ams_slave8_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log1_ams_slave8_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log1_ams_slave8_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log1_ams_slave8_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave8_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave8_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave8_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave8_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave8_log2_unpack(
    struct can1_main_ft24_ams_slave8_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave8_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave8_log2_init(struct can1_main_ft24_ams_slave8_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log2_ams_slave8_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log2_ams_slave8_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log2_ams_slave8_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log2_ams_slave8_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log2_ams_slave8_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log2_ams_slave8_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log2_ams_slave8_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log2_ams_slave8_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log2_ams_slave8_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log2_ams_slave8_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log2_ams_slave8_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log2_ams_slave8_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave8_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave8_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave8_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave8_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave8_log3_unpack(
    struct can1_main_ft24_ams_slave8_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave8_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave8_log3_init(struct can1_main_ft24_ams_slave8_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log3_ams_slave8_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log3_ams_slave8_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log3_ams_slave8_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log3_ams_slave8_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log3_ams_slave8_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log3_ams_slave8_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log3_ams_slave8_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log3_ams_slave8_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log3_ams_slave8_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log3_ams_slave8_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log3_ams_slave8_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log3_ams_slave8_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave8_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave8_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave8_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave8_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave8_log4_unpack(
    struct can1_main_ft24_ams_slave8_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave8_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave8_log4_init(struct can1_main_ft24_ams_slave8_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_log4_ams_slave8_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log4_ams_slave8_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log4_ams_slave8_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave8_log4_ams_slave8_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log4_ams_slave8_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log4_ams_slave8_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave8_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave8_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave8_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave8_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave8_log5_unpack(
    struct can1_main_ft24_ams_slave8_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave8_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave8_log5_init(struct can1_main_ft24_ams_slave8_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log5_ams_slave8_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log5_ams_slave8_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log5_ams_slave8_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log5_ams_slave8_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log5_ams_slave8_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log5_ams_slave8_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log5_ams_slave8_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log5_ams_slave8_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log5_ams_slave8_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log5_ams_slave8_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log5_ams_slave8_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log5_ams_slave8_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log5_ams_slave8_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log5_ams_slave8_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log5_ams_slave8_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log5_ams_slave8_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log5_ams_slave8_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log5_ams_slave8_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log5_ams_slave8_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log5_ams_slave8_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log5_ams_slave8_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log5_ams_slave8_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log5_ams_slave8_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log5_ams_slave8_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave8_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave8_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave8_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave8_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave8_log6_unpack(
    struct can1_main_ft24_ams_slave8_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave8_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave8_log6_init(struct can1_main_ft24_ams_slave8_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log6_ams_slave8_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log6_ams_slave8_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log6_ams_slave8_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log6_ams_slave8_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log6_ams_slave8_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log6_ams_slave8_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log6_ams_slave8_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log6_ams_slave8_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log6_ams_slave8_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log6_ams_slave8_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log6_ams_slave8_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log6_ams_slave8_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log6_ams_slave8_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log6_ams_slave8_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log6_ams_slave8_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log6_ams_slave8_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log6_ams_slave8_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log6_ams_slave8_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log6_ams_slave8_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log6_ams_slave8_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log6_ams_slave8_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log6_ams_slave8_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log6_ams_slave8_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log6_ams_slave8_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave8_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave8_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave8_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave8_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave8_log7_unpack(
    struct can1_main_ft24_ams_slave8_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave8_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave8_log7_init(struct can1_main_ft24_ams_slave8_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log7_ams_slave8_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log7_ams_slave8_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log7_ams_slave8_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log7_ams_slave8_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log7_ams_slave8_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log7_ams_slave8_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log7_ams_slave8_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log7_ams_slave8_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log7_ams_slave8_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log7_ams_slave8_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log7_ams_slave8_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log7_ams_slave8_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log7_ams_slave8_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log7_ams_slave8_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log7_ams_slave8_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log7_ams_slave8_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log7_ams_slave8_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log7_ams_slave8_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log7_ams_slave8_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log7_ams_slave8_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log7_ams_slave8_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log7_ams_slave8_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log7_ams_slave8_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log7_ams_slave8_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave8_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave8_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave8_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave8_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave8_log8_unpack(
    struct can1_main_ft24_ams_slave8_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave8_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave8_log8_init(struct can1_main_ft24_ams_slave8_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log8_ams_slave8_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log8_ams_slave8_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log8_ams_slave8_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log8_ams_slave8_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log8_ams_slave8_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log8_ams_slave8_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log8_ams_slave8_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log8_ams_slave8_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log8_ams_slave8_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log8_ams_slave8_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log8_ams_slave8_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log8_ams_slave8_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log8_ams_slave8_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log8_ams_slave8_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log8_ams_slave8_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log8_ams_slave8_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log8_ams_slave8_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log8_ams_slave8_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log8_ams_slave8_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log8_ams_slave8_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log8_ams_slave8_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave8_log8_ams_slave8_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_log8_ams_slave8_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_log8_ams_slave8_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave9_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave9_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave9_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave9_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave9_log0_unpack(
    struct can1_main_ft24_ams_slave9_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave9_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave9_log0_init(struct can1_main_ft24_ams_slave9_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log0_ams_slave9_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log0_ams_slave9_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log0_ams_slave9_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log0_ams_slave9_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log0_ams_slave9_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log0_ams_slave9_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log0_ams_slave9_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log0_ams_slave9_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log0_ams_slave9_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log0_ams_slave9_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log0_ams_slave9_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log0_ams_slave9_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave9_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave9_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave9_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave9_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave9_log1_unpack(
    struct can1_main_ft24_ams_slave9_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave9_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave9_log1_init(struct can1_main_ft24_ams_slave9_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log1_ams_slave9_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log1_ams_slave9_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log1_ams_slave9_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log1_ams_slave9_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log1_ams_slave9_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log1_ams_slave9_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log1_ams_slave9_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log1_ams_slave9_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log1_ams_slave9_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log1_ams_slave9_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log1_ams_slave9_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log1_ams_slave9_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave9_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave9_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave9_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave9_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave9_log2_unpack(
    struct can1_main_ft24_ams_slave9_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave9_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave9_log2_init(struct can1_main_ft24_ams_slave9_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log2_ams_slave9_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log2_ams_slave9_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log2_ams_slave9_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log2_ams_slave9_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log2_ams_slave9_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log2_ams_slave9_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log2_ams_slave9_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log2_ams_slave9_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log2_ams_slave9_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log2_ams_slave9_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log2_ams_slave9_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log2_ams_slave9_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave9_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave9_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave9_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave9_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave9_log3_unpack(
    struct can1_main_ft24_ams_slave9_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave9_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave9_log3_init(struct can1_main_ft24_ams_slave9_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log3_ams_slave9_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log3_ams_slave9_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log3_ams_slave9_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log3_ams_slave9_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log3_ams_slave9_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log3_ams_slave9_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log3_ams_slave9_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log3_ams_slave9_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log3_ams_slave9_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log3_ams_slave9_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log3_ams_slave9_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log3_ams_slave9_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave9_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave9_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave9_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave9_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave9_log4_unpack(
    struct can1_main_ft24_ams_slave9_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave9_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave9_log4_init(struct can1_main_ft24_ams_slave9_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_log4_ams_slave9_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log4_ams_slave9_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log4_ams_slave9_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave9_log4_ams_slave9_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log4_ams_slave9_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log4_ams_slave9_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave9_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave9_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave9_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave9_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave9_log5_unpack(
    struct can1_main_ft24_ams_slave9_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave9_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave9_log5_init(struct can1_main_ft24_ams_slave9_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log5_ams_slave9_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log5_ams_slave9_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log5_ams_slave9_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log5_ams_slave9_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log5_ams_slave9_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log5_ams_slave9_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log5_ams_slave9_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log5_ams_slave9_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log5_ams_slave9_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log5_ams_slave9_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log5_ams_slave9_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log5_ams_slave9_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log5_ams_slave9_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log5_ams_slave9_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log5_ams_slave9_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log5_ams_slave9_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log5_ams_slave9_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log5_ams_slave9_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log5_ams_slave9_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log5_ams_slave9_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log5_ams_slave9_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log5_ams_slave9_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log5_ams_slave9_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log5_ams_slave9_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave9_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave9_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave9_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave9_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave9_log6_unpack(
    struct can1_main_ft24_ams_slave9_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave9_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave9_log6_init(struct can1_main_ft24_ams_slave9_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log6_ams_slave9_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log6_ams_slave9_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log6_ams_slave9_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log6_ams_slave9_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log6_ams_slave9_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log6_ams_slave9_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log6_ams_slave9_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log6_ams_slave9_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log6_ams_slave9_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log6_ams_slave9_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log6_ams_slave9_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log6_ams_slave9_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log6_ams_slave9_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log6_ams_slave9_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log6_ams_slave9_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log6_ams_slave9_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log6_ams_slave9_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log6_ams_slave9_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log6_ams_slave9_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log6_ams_slave9_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log6_ams_slave9_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log6_ams_slave9_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log6_ams_slave9_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log6_ams_slave9_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave9_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave9_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave9_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave9_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave9_log7_unpack(
    struct can1_main_ft24_ams_slave9_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave9_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave9_log7_init(struct can1_main_ft24_ams_slave9_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log7_ams_slave9_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log7_ams_slave9_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log7_ams_slave9_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log7_ams_slave9_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log7_ams_slave9_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log7_ams_slave9_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log7_ams_slave9_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log7_ams_slave9_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log7_ams_slave9_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log7_ams_slave9_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log7_ams_slave9_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log7_ams_slave9_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log7_ams_slave9_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log7_ams_slave9_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log7_ams_slave9_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log7_ams_slave9_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log7_ams_slave9_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log7_ams_slave9_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log7_ams_slave9_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log7_ams_slave9_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log7_ams_slave9_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log7_ams_slave9_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log7_ams_slave9_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log7_ams_slave9_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave9_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave9_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave9_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave9_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave9_log8_unpack(
    struct can1_main_ft24_ams_slave9_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave9_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave9_log8_init(struct can1_main_ft24_ams_slave9_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log8_ams_slave9_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log8_ams_slave9_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log8_ams_slave9_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log8_ams_slave9_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log8_ams_slave9_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log8_ams_slave9_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log8_ams_slave9_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log8_ams_slave9_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log8_ams_slave9_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log8_ams_slave9_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log8_ams_slave9_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log8_ams_slave9_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log8_ams_slave9_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log8_ams_slave9_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log8_ams_slave9_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log8_ams_slave9_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log8_ams_slave9_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log8_ams_slave9_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log8_ams_slave9_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log8_ams_slave9_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log8_ams_slave9_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave9_log8_ams_slave9_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_log8_ams_slave9_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_log8_ams_slave9_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave10_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave10_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave10_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave10_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave10_log0_unpack(
    struct can1_main_ft24_ams_slave10_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave10_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave10_log0_init(struct can1_main_ft24_ams_slave10_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log0_ams_slave10_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log0_ams_slave10_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log0_ams_slave10_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log0_ams_slave10_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log0_ams_slave10_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log0_ams_slave10_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log0_ams_slave10_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log0_ams_slave10_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log0_ams_slave10_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log0_ams_slave10_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log0_ams_slave10_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log0_ams_slave10_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave10_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave10_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave10_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave10_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave10_log1_unpack(
    struct can1_main_ft24_ams_slave10_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave10_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave10_log1_init(struct can1_main_ft24_ams_slave10_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log1_ams_slave10_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log1_ams_slave10_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log1_ams_slave10_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log1_ams_slave10_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log1_ams_slave10_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log1_ams_slave10_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log1_ams_slave10_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log1_ams_slave10_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log1_ams_slave10_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log1_ams_slave10_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log1_ams_slave10_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log1_ams_slave10_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave10_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave10_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave10_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave10_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave10_log2_unpack(
    struct can1_main_ft24_ams_slave10_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave10_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave10_log2_init(struct can1_main_ft24_ams_slave10_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log2_ams_slave10_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log2_ams_slave10_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log2_ams_slave10_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log2_ams_slave10_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log2_ams_slave10_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log2_ams_slave10_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log2_ams_slave10_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log2_ams_slave10_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log2_ams_slave10_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log2_ams_slave10_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log2_ams_slave10_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log2_ams_slave10_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave10_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave10_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave10_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave10_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave10_log3_unpack(
    struct can1_main_ft24_ams_slave10_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave10_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave10_log3_init(struct can1_main_ft24_ams_slave10_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log3_ams_slave10_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log3_ams_slave10_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log3_ams_slave10_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log3_ams_slave10_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log3_ams_slave10_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log3_ams_slave10_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log3_ams_slave10_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log3_ams_slave10_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log3_ams_slave10_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log3_ams_slave10_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log3_ams_slave10_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log3_ams_slave10_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave10_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave10_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave10_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave10_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave10_log4_unpack(
    struct can1_main_ft24_ams_slave10_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave10_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave10_log4_init(struct can1_main_ft24_ams_slave10_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_log4_ams_slave10_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log4_ams_slave10_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log4_ams_slave10_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave10_log4_ams_slave10_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log4_ams_slave10_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log4_ams_slave10_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave10_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave10_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave10_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave10_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave10_log5_unpack(
    struct can1_main_ft24_ams_slave10_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave10_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave10_log5_init(struct can1_main_ft24_ams_slave10_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log5_ams_slave10_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log5_ams_slave10_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log5_ams_slave10_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log5_ams_slave10_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log5_ams_slave10_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log5_ams_slave10_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log5_ams_slave10_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log5_ams_slave10_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log5_ams_slave10_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log5_ams_slave10_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log5_ams_slave10_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log5_ams_slave10_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log5_ams_slave10_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log5_ams_slave10_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log5_ams_slave10_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log5_ams_slave10_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log5_ams_slave10_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log5_ams_slave10_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log5_ams_slave10_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log5_ams_slave10_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log5_ams_slave10_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log5_ams_slave10_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log5_ams_slave10_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log5_ams_slave10_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave10_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave10_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave10_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave10_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave10_log6_unpack(
    struct can1_main_ft24_ams_slave10_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave10_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave10_log6_init(struct can1_main_ft24_ams_slave10_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log6_ams_slave10_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log6_ams_slave10_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log6_ams_slave10_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log6_ams_slave10_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log6_ams_slave10_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log6_ams_slave10_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log6_ams_slave10_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log6_ams_slave10_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log6_ams_slave10_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log6_ams_slave10_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log6_ams_slave10_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log6_ams_slave10_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log6_ams_slave10_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log6_ams_slave10_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log6_ams_slave10_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log6_ams_slave10_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log6_ams_slave10_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log6_ams_slave10_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log6_ams_slave10_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log6_ams_slave10_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log6_ams_slave10_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log6_ams_slave10_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log6_ams_slave10_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log6_ams_slave10_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave10_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave10_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave10_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave10_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave10_log7_unpack(
    struct can1_main_ft24_ams_slave10_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave10_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave10_log7_init(struct can1_main_ft24_ams_slave10_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log7_ams_slave10_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log7_ams_slave10_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log7_ams_slave10_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log7_ams_slave10_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log7_ams_slave10_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log7_ams_slave10_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log7_ams_slave10_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log7_ams_slave10_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log7_ams_slave10_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log7_ams_slave10_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log7_ams_slave10_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log7_ams_slave10_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log7_ams_slave10_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log7_ams_slave10_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log7_ams_slave10_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log7_ams_slave10_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log7_ams_slave10_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log7_ams_slave10_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log7_ams_slave10_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log7_ams_slave10_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log7_ams_slave10_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log7_ams_slave10_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log7_ams_slave10_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log7_ams_slave10_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave10_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave10_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave10_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave10_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave10_log8_unpack(
    struct can1_main_ft24_ams_slave10_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave10_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave10_log8_init(struct can1_main_ft24_ams_slave10_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log8_ams_slave10_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log8_ams_slave10_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log8_ams_slave10_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log8_ams_slave10_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log8_ams_slave10_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log8_ams_slave10_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log8_ams_slave10_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log8_ams_slave10_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log8_ams_slave10_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log8_ams_slave10_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log8_ams_slave10_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log8_ams_slave10_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log8_ams_slave10_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log8_ams_slave10_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log8_ams_slave10_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log8_ams_slave10_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log8_ams_slave10_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log8_ams_slave10_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log8_ams_slave10_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log8_ams_slave10_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log8_ams_slave10_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave10_log8_ams_slave10_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_log8_ams_slave10_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_log8_ams_slave10_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave11_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave11_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave11_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave11_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave11_log0_unpack(
    struct can1_main_ft24_ams_slave11_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave11_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave11_log0_init(struct can1_main_ft24_ams_slave11_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log0_ams_slave11_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log0_ams_slave11_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log0_ams_slave11_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log0_ams_slave11_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log0_ams_slave11_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log0_ams_slave11_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log0_ams_slave11_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log0_ams_slave11_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log0_ams_slave11_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log0_ams_slave11_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log0_ams_slave11_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log0_ams_slave11_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave11_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave11_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave11_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave11_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave11_log1_unpack(
    struct can1_main_ft24_ams_slave11_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave11_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave11_log1_init(struct can1_main_ft24_ams_slave11_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log1_ams_slave11_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log1_ams_slave11_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log1_ams_slave11_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log1_ams_slave11_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log1_ams_slave11_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log1_ams_slave11_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log1_ams_slave11_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log1_ams_slave11_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log1_ams_slave11_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log1_ams_slave11_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log1_ams_slave11_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log1_ams_slave11_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave11_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave11_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave11_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave11_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave11_log2_unpack(
    struct can1_main_ft24_ams_slave11_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave11_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave11_log2_init(struct can1_main_ft24_ams_slave11_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log2_ams_slave11_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log2_ams_slave11_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log2_ams_slave11_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log2_ams_slave11_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log2_ams_slave11_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log2_ams_slave11_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log2_ams_slave11_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log2_ams_slave11_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log2_ams_slave11_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log2_ams_slave11_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log2_ams_slave11_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log2_ams_slave11_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave11_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave11_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave11_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave11_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave11_log3_unpack(
    struct can1_main_ft24_ams_slave11_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave11_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave11_log3_init(struct can1_main_ft24_ams_slave11_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log3_ams_slave11_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log3_ams_slave11_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log3_ams_slave11_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log3_ams_slave11_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log3_ams_slave11_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log3_ams_slave11_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log3_ams_slave11_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log3_ams_slave11_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log3_ams_slave11_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log3_ams_slave11_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log3_ams_slave11_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log3_ams_slave11_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave11_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave11_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave11_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave11_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave11_log4_unpack(
    struct can1_main_ft24_ams_slave11_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave11_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave11_log4_init(struct can1_main_ft24_ams_slave11_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_log4_ams_slave11_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log4_ams_slave11_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log4_ams_slave11_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave11_log4_ams_slave11_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log4_ams_slave11_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log4_ams_slave11_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave11_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave11_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave11_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave11_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave11_log5_unpack(
    struct can1_main_ft24_ams_slave11_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave11_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave11_log5_init(struct can1_main_ft24_ams_slave11_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log5_ams_slave11_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log5_ams_slave11_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log5_ams_slave11_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log5_ams_slave11_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log5_ams_slave11_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log5_ams_slave11_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log5_ams_slave11_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log5_ams_slave11_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log5_ams_slave11_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log5_ams_slave11_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log5_ams_slave11_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log5_ams_slave11_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log5_ams_slave11_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log5_ams_slave11_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log5_ams_slave11_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log5_ams_slave11_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log5_ams_slave11_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log5_ams_slave11_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log5_ams_slave11_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log5_ams_slave11_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log5_ams_slave11_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log5_ams_slave11_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log5_ams_slave11_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log5_ams_slave11_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave11_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave11_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave11_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave11_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave11_log6_unpack(
    struct can1_main_ft24_ams_slave11_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave11_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave11_log6_init(struct can1_main_ft24_ams_slave11_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log6_ams_slave11_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log6_ams_slave11_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log6_ams_slave11_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log6_ams_slave11_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log6_ams_slave11_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log6_ams_slave11_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log6_ams_slave11_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log6_ams_slave11_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log6_ams_slave11_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log6_ams_slave11_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log6_ams_slave11_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log6_ams_slave11_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log6_ams_slave11_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log6_ams_slave11_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log6_ams_slave11_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log6_ams_slave11_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log6_ams_slave11_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log6_ams_slave11_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log6_ams_slave11_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log6_ams_slave11_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log6_ams_slave11_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log6_ams_slave11_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log6_ams_slave11_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log6_ams_slave11_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave11_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave11_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave11_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave11_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave11_log7_unpack(
    struct can1_main_ft24_ams_slave11_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave11_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave11_log7_init(struct can1_main_ft24_ams_slave11_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log7_ams_slave11_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log7_ams_slave11_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log7_ams_slave11_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log7_ams_slave11_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log7_ams_slave11_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log7_ams_slave11_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log7_ams_slave11_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log7_ams_slave11_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log7_ams_slave11_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log7_ams_slave11_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log7_ams_slave11_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log7_ams_slave11_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log7_ams_slave11_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log7_ams_slave11_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log7_ams_slave11_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log7_ams_slave11_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log7_ams_slave11_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log7_ams_slave11_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log7_ams_slave11_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log7_ams_slave11_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log7_ams_slave11_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log7_ams_slave11_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log7_ams_slave11_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log7_ams_slave11_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave11_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave11_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave11_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave11_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave11_log8_unpack(
    struct can1_main_ft24_ams_slave11_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave11_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave11_log8_init(struct can1_main_ft24_ams_slave11_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log8_ams_slave11_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log8_ams_slave11_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log8_ams_slave11_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log8_ams_slave11_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log8_ams_slave11_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log8_ams_slave11_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log8_ams_slave11_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log8_ams_slave11_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log8_ams_slave11_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log8_ams_slave11_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log8_ams_slave11_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log8_ams_slave11_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log8_ams_slave11_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log8_ams_slave11_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log8_ams_slave11_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log8_ams_slave11_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log8_ams_slave11_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log8_ams_slave11_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log8_ams_slave11_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log8_ams_slave11_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log8_ams_slave11_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave11_log8_ams_slave11_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_log8_ams_slave11_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_log8_ams_slave11_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave12_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave12_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave12_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave12_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave12_log0_unpack(
    struct can1_main_ft24_ams_slave12_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave12_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave12_log0_init(struct can1_main_ft24_ams_slave12_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log0_ams_slave12_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log0_ams_slave12_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log0_ams_slave12_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log0_ams_slave12_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log0_ams_slave12_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log0_ams_slave12_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log0_ams_slave12_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log0_ams_slave12_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log0_ams_slave12_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log0_ams_slave12_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log0_ams_slave12_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log0_ams_slave12_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave12_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave12_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave12_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave12_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave12_log1_unpack(
    struct can1_main_ft24_ams_slave12_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave12_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave12_log1_init(struct can1_main_ft24_ams_slave12_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log1_ams_slave12_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log1_ams_slave12_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log1_ams_slave12_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log1_ams_slave12_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log1_ams_slave12_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log1_ams_slave12_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log1_ams_slave12_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log1_ams_slave12_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log1_ams_slave12_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log1_ams_slave12_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log1_ams_slave12_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log1_ams_slave12_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave12_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave12_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave12_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave12_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave12_log2_unpack(
    struct can1_main_ft24_ams_slave12_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave12_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave12_log2_init(struct can1_main_ft24_ams_slave12_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log2_ams_slave12_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log2_ams_slave12_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log2_ams_slave12_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log2_ams_slave12_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log2_ams_slave12_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log2_ams_slave12_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log2_ams_slave12_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log2_ams_slave12_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log2_ams_slave12_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log2_ams_slave12_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log2_ams_slave12_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log2_ams_slave12_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave12_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave12_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave12_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave12_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave12_log3_unpack(
    struct can1_main_ft24_ams_slave12_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave12_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave12_log3_init(struct can1_main_ft24_ams_slave12_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log3_ams_slave12_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log3_ams_slave12_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log3_ams_slave12_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log3_ams_slave12_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log3_ams_slave12_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log3_ams_slave12_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log3_ams_slave12_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log3_ams_slave12_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log3_ams_slave12_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log3_ams_slave12_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log3_ams_slave12_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log3_ams_slave12_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave12_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave12_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave12_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave12_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave12_log4_unpack(
    struct can1_main_ft24_ams_slave12_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave12_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave12_log4_init(struct can1_main_ft24_ams_slave12_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_log4_ams_slave12_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log4_ams_slave12_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log4_ams_slave12_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave12_log4_ams_slave12_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log4_ams_slave12_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log4_ams_slave12_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave12_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave12_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave12_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave12_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave12_log5_unpack(
    struct can1_main_ft24_ams_slave12_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave12_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave12_log5_init(struct can1_main_ft24_ams_slave12_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log5_ams_slave12_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log5_ams_slave12_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log5_ams_slave12_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log5_ams_slave12_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log5_ams_slave12_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log5_ams_slave12_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log5_ams_slave12_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log5_ams_slave12_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log5_ams_slave12_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log5_ams_slave12_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log5_ams_slave12_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log5_ams_slave12_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log5_ams_slave12_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log5_ams_slave12_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log5_ams_slave12_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log5_ams_slave12_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log5_ams_slave12_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log5_ams_slave12_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log5_ams_slave12_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log5_ams_slave12_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log5_ams_slave12_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log5_ams_slave12_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log5_ams_slave12_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log5_ams_slave12_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave12_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave12_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave12_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave12_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave12_log6_unpack(
    struct can1_main_ft24_ams_slave12_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave12_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave12_log6_init(struct can1_main_ft24_ams_slave12_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log6_ams_slave12_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log6_ams_slave12_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log6_ams_slave12_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log6_ams_slave12_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log6_ams_slave12_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log6_ams_slave12_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log6_ams_slave12_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log6_ams_slave12_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log6_ams_slave12_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log6_ams_slave12_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log6_ams_slave12_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log6_ams_slave12_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log6_ams_slave12_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log6_ams_slave12_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log6_ams_slave12_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log6_ams_slave12_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log6_ams_slave12_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log6_ams_slave12_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log6_ams_slave12_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log6_ams_slave12_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log6_ams_slave12_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log6_ams_slave12_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log6_ams_slave12_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log6_ams_slave12_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave12_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave12_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave12_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave12_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave12_log7_unpack(
    struct can1_main_ft24_ams_slave12_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave12_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave12_log7_init(struct can1_main_ft24_ams_slave12_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log7_ams_slave12_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log7_ams_slave12_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log7_ams_slave12_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log7_ams_slave12_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log7_ams_slave12_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log7_ams_slave12_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log7_ams_slave12_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log7_ams_slave12_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log7_ams_slave12_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log7_ams_slave12_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log7_ams_slave12_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log7_ams_slave12_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log7_ams_slave12_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log7_ams_slave12_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log7_ams_slave12_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log7_ams_slave12_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log7_ams_slave12_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log7_ams_slave12_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log7_ams_slave12_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log7_ams_slave12_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log7_ams_slave12_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log7_ams_slave12_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log7_ams_slave12_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log7_ams_slave12_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave12_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave12_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave12_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave12_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave12_log8_unpack(
    struct can1_main_ft24_ams_slave12_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave12_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave12_log8_init(struct can1_main_ft24_ams_slave12_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log8_ams_slave12_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log8_ams_slave12_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log8_ams_slave12_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log8_ams_slave12_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log8_ams_slave12_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log8_ams_slave12_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log8_ams_slave12_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log8_ams_slave12_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log8_ams_slave12_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log8_ams_slave12_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log8_ams_slave12_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log8_ams_slave12_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log8_ams_slave12_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log8_ams_slave12_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log8_ams_slave12_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log8_ams_slave12_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log8_ams_slave12_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log8_ams_slave12_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log8_ams_slave12_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log8_ams_slave12_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log8_ams_slave12_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave12_log8_ams_slave12_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_log8_ams_slave12_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_log8_ams_slave12_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave13_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave13_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave13_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave13_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave13_log0_unpack(
    struct can1_main_ft24_ams_slave13_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave13_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave13_log0_init(struct can1_main_ft24_ams_slave13_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log0_ams_slave13_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log0_ams_slave13_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log0_ams_slave13_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log0_ams_slave13_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log0_ams_slave13_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log0_ams_slave13_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log0_ams_slave13_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log0_ams_slave13_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log0_ams_slave13_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log0_ams_slave13_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log0_ams_slave13_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log0_ams_slave13_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave13_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave13_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave13_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave13_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave13_log1_unpack(
    struct can1_main_ft24_ams_slave13_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave13_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave13_log1_init(struct can1_main_ft24_ams_slave13_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log1_ams_slave13_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log1_ams_slave13_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log1_ams_slave13_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log1_ams_slave13_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log1_ams_slave13_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log1_ams_slave13_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log1_ams_slave13_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log1_ams_slave13_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log1_ams_slave13_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log1_ams_slave13_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log1_ams_slave13_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log1_ams_slave13_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave13_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave13_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave13_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave13_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave13_log2_unpack(
    struct can1_main_ft24_ams_slave13_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave13_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave13_log2_init(struct can1_main_ft24_ams_slave13_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log2_ams_slave13_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log2_ams_slave13_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log2_ams_slave13_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log2_ams_slave13_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log2_ams_slave13_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log2_ams_slave13_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log2_ams_slave13_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log2_ams_slave13_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log2_ams_slave13_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log2_ams_slave13_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log2_ams_slave13_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log2_ams_slave13_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave13_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave13_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave13_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave13_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave13_log3_unpack(
    struct can1_main_ft24_ams_slave13_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave13_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave13_log3_init(struct can1_main_ft24_ams_slave13_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log3_ams_slave13_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log3_ams_slave13_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log3_ams_slave13_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log3_ams_slave13_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log3_ams_slave13_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log3_ams_slave13_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log3_ams_slave13_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log3_ams_slave13_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log3_ams_slave13_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log3_ams_slave13_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log3_ams_slave13_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log3_ams_slave13_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave13_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave13_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave13_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave13_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave13_log4_unpack(
    struct can1_main_ft24_ams_slave13_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave13_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave13_log4_init(struct can1_main_ft24_ams_slave13_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_log4_ams_slave13_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log4_ams_slave13_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log4_ams_slave13_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave13_log4_ams_slave13_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log4_ams_slave13_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log4_ams_slave13_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave13_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave13_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave13_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave13_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave13_log5_unpack(
    struct can1_main_ft24_ams_slave13_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave13_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave13_log5_init(struct can1_main_ft24_ams_slave13_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log5_ams_slave13_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log5_ams_slave13_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log5_ams_slave13_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log5_ams_slave13_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log5_ams_slave13_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log5_ams_slave13_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log5_ams_slave13_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log5_ams_slave13_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log5_ams_slave13_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log5_ams_slave13_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log5_ams_slave13_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log5_ams_slave13_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log5_ams_slave13_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log5_ams_slave13_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log5_ams_slave13_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log5_ams_slave13_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log5_ams_slave13_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log5_ams_slave13_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log5_ams_slave13_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log5_ams_slave13_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log5_ams_slave13_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log5_ams_slave13_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log5_ams_slave13_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log5_ams_slave13_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave13_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave13_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave13_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave13_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave13_log6_unpack(
    struct can1_main_ft24_ams_slave13_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave13_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave13_log6_init(struct can1_main_ft24_ams_slave13_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log6_ams_slave13_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log6_ams_slave13_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log6_ams_slave13_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log6_ams_slave13_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log6_ams_slave13_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log6_ams_slave13_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log6_ams_slave13_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log6_ams_slave13_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log6_ams_slave13_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log6_ams_slave13_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log6_ams_slave13_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log6_ams_slave13_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log6_ams_slave13_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log6_ams_slave13_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log6_ams_slave13_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log6_ams_slave13_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log6_ams_slave13_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log6_ams_slave13_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log6_ams_slave13_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log6_ams_slave13_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log6_ams_slave13_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log6_ams_slave13_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log6_ams_slave13_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log6_ams_slave13_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave13_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave13_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave13_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave13_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave13_log7_unpack(
    struct can1_main_ft24_ams_slave13_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave13_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave13_log7_init(struct can1_main_ft24_ams_slave13_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log7_ams_slave13_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log7_ams_slave13_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log7_ams_slave13_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log7_ams_slave13_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log7_ams_slave13_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log7_ams_slave13_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log7_ams_slave13_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log7_ams_slave13_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log7_ams_slave13_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log7_ams_slave13_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log7_ams_slave13_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log7_ams_slave13_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log7_ams_slave13_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log7_ams_slave13_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log7_ams_slave13_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log7_ams_slave13_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log7_ams_slave13_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log7_ams_slave13_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log7_ams_slave13_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log7_ams_slave13_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log7_ams_slave13_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log7_ams_slave13_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log7_ams_slave13_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log7_ams_slave13_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave13_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave13_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave13_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave13_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave13_log8_unpack(
    struct can1_main_ft24_ams_slave13_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave13_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave13_log8_init(struct can1_main_ft24_ams_slave13_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log8_ams_slave13_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log8_ams_slave13_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log8_ams_slave13_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log8_ams_slave13_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log8_ams_slave13_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log8_ams_slave13_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log8_ams_slave13_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log8_ams_slave13_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log8_ams_slave13_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log8_ams_slave13_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log8_ams_slave13_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log8_ams_slave13_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log8_ams_slave13_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log8_ams_slave13_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log8_ams_slave13_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log8_ams_slave13_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log8_ams_slave13_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log8_ams_slave13_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log8_ams_slave13_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log8_ams_slave13_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log8_ams_slave13_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave13_log8_ams_slave13_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_log8_ams_slave13_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_log8_ams_slave13_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave14_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave14_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave14_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave14_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave14_log0_unpack(
    struct can1_main_ft24_ams_slave14_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave14_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave14_log0_init(struct can1_main_ft24_ams_slave14_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log0_ams_slave14_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log0_ams_slave14_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log0_ams_slave14_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log0_ams_slave14_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log0_ams_slave14_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log0_ams_slave14_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log0_ams_slave14_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log0_ams_slave14_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log0_ams_slave14_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log0_ams_slave14_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log0_ams_slave14_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log0_ams_slave14_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave14_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave14_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave14_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave14_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave14_log1_unpack(
    struct can1_main_ft24_ams_slave14_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave14_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave14_log1_init(struct can1_main_ft24_ams_slave14_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log1_ams_slave14_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log1_ams_slave14_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log1_ams_slave14_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log1_ams_slave14_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log1_ams_slave14_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log1_ams_slave14_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log1_ams_slave14_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log1_ams_slave14_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log1_ams_slave14_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log1_ams_slave14_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log1_ams_slave14_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log1_ams_slave14_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave14_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave14_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave14_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave14_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave14_log2_unpack(
    struct can1_main_ft24_ams_slave14_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave14_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave14_log2_init(struct can1_main_ft24_ams_slave14_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log2_ams_slave14_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log2_ams_slave14_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log2_ams_slave14_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log2_ams_slave14_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log2_ams_slave14_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log2_ams_slave14_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log2_ams_slave14_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log2_ams_slave14_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log2_ams_slave14_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log2_ams_slave14_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log2_ams_slave14_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log2_ams_slave14_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave14_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave14_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave14_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave14_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave14_log3_unpack(
    struct can1_main_ft24_ams_slave14_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave14_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave14_log3_init(struct can1_main_ft24_ams_slave14_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log3_ams_slave14_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log3_ams_slave14_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log3_ams_slave14_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log3_ams_slave14_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log3_ams_slave14_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log3_ams_slave14_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log3_ams_slave14_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log3_ams_slave14_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log3_ams_slave14_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log3_ams_slave14_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log3_ams_slave14_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log3_ams_slave14_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave14_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave14_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave14_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave14_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave14_log4_unpack(
    struct can1_main_ft24_ams_slave14_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave14_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave14_log4_init(struct can1_main_ft24_ams_slave14_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_log4_ams_slave14_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log4_ams_slave14_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log4_ams_slave14_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave14_log4_ams_slave14_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log4_ams_slave14_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log4_ams_slave14_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave14_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave14_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave14_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave14_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave14_log5_unpack(
    struct can1_main_ft24_ams_slave14_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave14_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave14_log5_init(struct can1_main_ft24_ams_slave14_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log5_ams_slave14_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log5_ams_slave14_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log5_ams_slave14_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log5_ams_slave14_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log5_ams_slave14_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log5_ams_slave14_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log5_ams_slave14_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log5_ams_slave14_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log5_ams_slave14_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log5_ams_slave14_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log5_ams_slave14_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log5_ams_slave14_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log5_ams_slave14_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log5_ams_slave14_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log5_ams_slave14_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log5_ams_slave14_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log5_ams_slave14_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log5_ams_slave14_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log5_ams_slave14_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log5_ams_slave14_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log5_ams_slave14_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log5_ams_slave14_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log5_ams_slave14_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log5_ams_slave14_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave14_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave14_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave14_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave14_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave14_log6_unpack(
    struct can1_main_ft24_ams_slave14_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave14_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave14_log6_init(struct can1_main_ft24_ams_slave14_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log6_ams_slave14_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log6_ams_slave14_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log6_ams_slave14_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log6_ams_slave14_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log6_ams_slave14_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log6_ams_slave14_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log6_ams_slave14_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log6_ams_slave14_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log6_ams_slave14_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log6_ams_slave14_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log6_ams_slave14_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log6_ams_slave14_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log6_ams_slave14_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log6_ams_slave14_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log6_ams_slave14_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log6_ams_slave14_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log6_ams_slave14_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log6_ams_slave14_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log6_ams_slave14_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log6_ams_slave14_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log6_ams_slave14_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log6_ams_slave14_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log6_ams_slave14_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log6_ams_slave14_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave14_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave14_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave14_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave14_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave14_log7_unpack(
    struct can1_main_ft24_ams_slave14_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave14_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave14_log7_init(struct can1_main_ft24_ams_slave14_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log7_ams_slave14_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log7_ams_slave14_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log7_ams_slave14_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log7_ams_slave14_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log7_ams_slave14_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log7_ams_slave14_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log7_ams_slave14_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log7_ams_slave14_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log7_ams_slave14_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log7_ams_slave14_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log7_ams_slave14_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log7_ams_slave14_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log7_ams_slave14_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log7_ams_slave14_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log7_ams_slave14_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log7_ams_slave14_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log7_ams_slave14_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log7_ams_slave14_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log7_ams_slave14_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log7_ams_slave14_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log7_ams_slave14_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log7_ams_slave14_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log7_ams_slave14_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log7_ams_slave14_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave14_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave14_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave14_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave14_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave14_log8_unpack(
    struct can1_main_ft24_ams_slave14_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave14_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave14_log8_init(struct can1_main_ft24_ams_slave14_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log8_ams_slave14_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log8_ams_slave14_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log8_ams_slave14_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log8_ams_slave14_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log8_ams_slave14_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log8_ams_slave14_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log8_ams_slave14_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log8_ams_slave14_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log8_ams_slave14_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log8_ams_slave14_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log8_ams_slave14_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log8_ams_slave14_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log8_ams_slave14_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log8_ams_slave14_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log8_ams_slave14_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log8_ams_slave14_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log8_ams_slave14_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log8_ams_slave14_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log8_ams_slave14_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log8_ams_slave14_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log8_ams_slave14_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave14_log8_ams_slave14_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_log8_ams_slave14_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_log8_ams_slave14_t31_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave15_Log0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave15_log0_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave15_log0_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave15_Log0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave15_log0_unpack(
    struct can1_main_ft24_ams_slave15_log0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave15_Log0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave15_log0_init(struct can1_main_ft24_ams_slave15_log0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log0_ams_slave15_v0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log0_ams_slave15_v0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log0_ams_slave15_v0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log0_ams_slave15_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log0_ams_slave15_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log0_ams_slave15_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log0_ams_slave15_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log0_ams_slave15_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log0_ams_slave15_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log0_ams_slave15_v3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log0_ams_slave15_v3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log0_ams_slave15_v3_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave15_Log1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave15_log1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave15_log1_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave15_Log1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave15_log1_unpack(
    struct can1_main_ft24_ams_slave15_log1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave15_Log1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave15_log1_init(struct can1_main_ft24_ams_slave15_log1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log1_ams_slave15_v4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log1_ams_slave15_v4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log1_ams_slave15_v4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log1_ams_slave15_v5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log1_ams_slave15_v5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log1_ams_slave15_v5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log1_ams_slave15_v6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log1_ams_slave15_v6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log1_ams_slave15_v6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log1_ams_slave15_v7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log1_ams_slave15_v7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log1_ams_slave15_v7_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave15_Log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave15_log2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave15_log2_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave15_Log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave15_log2_unpack(
    struct can1_main_ft24_ams_slave15_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave15_Log2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave15_log2_init(struct can1_main_ft24_ams_slave15_log2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log2_ams_slave15_v8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log2_ams_slave15_v8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log2_ams_slave15_v8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log2_ams_slave15_v9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log2_ams_slave15_v9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log2_ams_slave15_v9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log2_ams_slave15_v10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log2_ams_slave15_v10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log2_ams_slave15_v10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log2_ams_slave15_v11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log2_ams_slave15_v11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log2_ams_slave15_v11_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave15_Log3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave15_log3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave15_log3_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave15_Log3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave15_log3_unpack(
    struct can1_main_ft24_ams_slave15_log3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave15_Log3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave15_log3_init(struct can1_main_ft24_ams_slave15_log3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log3_ams_slave15_v12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log3_ams_slave15_v12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log3_ams_slave15_v12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log3_ams_slave15_v13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log3_ams_slave15_v13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log3_ams_slave15_v13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log3_ams_slave15_v14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log3_ams_slave15_v14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log3_ams_slave15_v14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log3_ams_slave15_v15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log3_ams_slave15_v15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log3_ams_slave15_v15_is_in_range(uint16_t value);

/**
 * Pack message AMS_Slave15_Log4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave15_log4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave15_log4_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave15_Log4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave15_log4_unpack(
    struct can1_main_ft24_ams_slave15_log4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave15_Log4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave15_log4_init(struct can1_main_ft24_ams_slave15_log4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_log4_ams_slave15_v16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log4_ams_slave15_v16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log4_ams_slave15_v16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave15_log4_ams_slave15_failed_sensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log4_ams_slave15_failed_sensors_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log4_ams_slave15_failed_sensors_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave15_Log5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave15_log5_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave15_log5_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave15_Log5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave15_log5_unpack(
    struct can1_main_ft24_ams_slave15_log5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave15_Log5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave15_log5_init(struct can1_main_ft24_ams_slave15_log5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log5_ams_slave15_t0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log5_ams_slave15_t0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log5_ams_slave15_t0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log5_ams_slave15_t1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log5_ams_slave15_t1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log5_ams_slave15_t1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log5_ams_slave15_t2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log5_ams_slave15_t2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log5_ams_slave15_t2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log5_ams_slave15_t3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log5_ams_slave15_t3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log5_ams_slave15_t3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log5_ams_slave15_t4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log5_ams_slave15_t4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log5_ams_slave15_t4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log5_ams_slave15_t5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log5_ams_slave15_t5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log5_ams_slave15_t5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log5_ams_slave15_t6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log5_ams_slave15_t6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log5_ams_slave15_t6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log5_ams_slave15_t7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log5_ams_slave15_t7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log5_ams_slave15_t7_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave15_Log6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave15_log6_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave15_log6_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave15_Log6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave15_log6_unpack(
    struct can1_main_ft24_ams_slave15_log6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave15_Log6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave15_log6_init(struct can1_main_ft24_ams_slave15_log6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log6_ams_slave15_t8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log6_ams_slave15_t8_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log6_ams_slave15_t8_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log6_ams_slave15_t9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log6_ams_slave15_t9_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log6_ams_slave15_t9_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log6_ams_slave15_t10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log6_ams_slave15_t10_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log6_ams_slave15_t10_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log6_ams_slave15_t11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log6_ams_slave15_t11_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log6_ams_slave15_t11_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log6_ams_slave15_t12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log6_ams_slave15_t12_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log6_ams_slave15_t12_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log6_ams_slave15_t13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log6_ams_slave15_t13_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log6_ams_slave15_t13_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log6_ams_slave15_t14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log6_ams_slave15_t14_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log6_ams_slave15_t14_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log6_ams_slave15_t15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log6_ams_slave15_t15_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log6_ams_slave15_t15_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave15_Log7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave15_log7_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave15_log7_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave15_Log7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave15_log7_unpack(
    struct can1_main_ft24_ams_slave15_log7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave15_Log7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave15_log7_init(struct can1_main_ft24_ams_slave15_log7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log7_ams_slave15_t16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log7_ams_slave15_t16_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log7_ams_slave15_t16_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log7_ams_slave15_t17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log7_ams_slave15_t17_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log7_ams_slave15_t17_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log7_ams_slave15_t18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log7_ams_slave15_t18_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log7_ams_slave15_t18_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log7_ams_slave15_t19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log7_ams_slave15_t19_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log7_ams_slave15_t19_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log7_ams_slave15_t20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log7_ams_slave15_t20_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log7_ams_slave15_t20_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log7_ams_slave15_t21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log7_ams_slave15_t21_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log7_ams_slave15_t21_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log7_ams_slave15_t22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log7_ams_slave15_t22_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log7_ams_slave15_t22_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log7_ams_slave15_t23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log7_ams_slave15_t23_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log7_ams_slave15_t23_is_in_range(int8_t value);

/**
 * Pack message AMS_Slave15_Log8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave15_log8_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave15_log8_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave15_Log8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave15_log8_unpack(
    struct can1_main_ft24_ams_slave15_log8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave15_Log8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave15_log8_init(struct can1_main_ft24_ams_slave15_log8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log8_ams_slave15_t24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log8_ams_slave15_t24_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log8_ams_slave15_t24_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log8_ams_slave15_t25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log8_ams_slave15_t25_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log8_ams_slave15_t25_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log8_ams_slave15_t26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log8_ams_slave15_t26_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log8_ams_slave15_t26_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log8_ams_slave15_t27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log8_ams_slave15_t27_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log8_ams_slave15_t27_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log8_ams_slave15_t28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log8_ams_slave15_t28_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log8_ams_slave15_t28_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log8_ams_slave15_t29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log8_ams_slave15_t29_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log8_ams_slave15_t29_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log8_ams_slave15_t30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log8_ams_slave15_t30_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log8_ams_slave15_t30_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_slave15_log8_ams_slave15_t31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_log8_ams_slave15_t31_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_log8_ams_slave15_t31_is_in_range(int8_t value);

/**
 * Pack message JetsonRX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_jetson_rx_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_jetson_rx_t *src_p,
    size_t size);

/**
 * Unpack message JetsonRX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_jetson_rx_unpack(
    struct can1_main_ft24_jetson_rx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from JetsonRX.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_jetson_rx_init(struct can1_main_ft24_jetson_rx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_rx_jetson_as_mission_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_rx_jetson_as_mission_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_rx_jetson_as_mission_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_rx_jetson_as_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_rx_jetson_as_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_rx_jetson_as_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_rx_jetson_power_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_rx_jetson_power_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_rx_jetson_power_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_rx_jetson_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_rx_jetson_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_rx_jetson_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_rx_jetson_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_rx_jetson_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_rx_jetson_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_rx_jetson_speed_x_sens_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_rx_jetson_speed_x_sens_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_rx_jetson_speed_x_sens_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_jetson_rx_jetson_allow_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_jetson_rx_jetson_allow_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_jetson_rx_jetson_allow_torque_is_in_range(uint8_t value);

/**
 * Pack message AMS_Slave15Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave15_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave15_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave15Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave15_status_unpack(
    struct can1_main_ft24_ams_slave15_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave15Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave15_status_init(struct can1_main_ft24_ams_slave15_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave15_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave15_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave15_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave15_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave15_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave15_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave15_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave14Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave14_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave14_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave14Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave14_status_unpack(
    struct can1_main_ft24_ams_slave14_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave14Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave14_status_init(struct can1_main_ft24_ams_slave14_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave14_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave14_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave14_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave14_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave14_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave14_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave14_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave13Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave13_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave13_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave13Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave13_status_unpack(
    struct can1_main_ft24_ams_slave13_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave13Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave13_status_init(struct can1_main_ft24_ams_slave13_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave13_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave13_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave13_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave13_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave13_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave13_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave13_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave12Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave12_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave12_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave12Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave12_status_unpack(
    struct can1_main_ft24_ams_slave12_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave12Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave12_status_init(struct can1_main_ft24_ams_slave12_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave12_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave12_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave12_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave12_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave12_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave12_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave12_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave11Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave11_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave11_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave11Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave11_status_unpack(
    struct can1_main_ft24_ams_slave11_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave11Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave11_status_init(struct can1_main_ft24_ams_slave11_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave11_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave11_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave11_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave11_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave11_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave11_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave11_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave10Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave10_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave10_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave10Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave10_status_unpack(
    struct can1_main_ft24_ams_slave10_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave10Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave10_status_init(struct can1_main_ft24_ams_slave10_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave10_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave10_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave10_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave10_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave10_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave10_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave10_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave9Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave9_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave9_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave9Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave9_status_unpack(
    struct can1_main_ft24_ams_slave9_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave9Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave9_status_init(struct can1_main_ft24_ams_slave9_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave9_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave9_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave9_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave9_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave9_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave9_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave9_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave8Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave8_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave8_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave8Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave8_status_unpack(
    struct can1_main_ft24_ams_slave8_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave8Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave8_status_init(struct can1_main_ft24_ams_slave8_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave8_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave8_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave8_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave8_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave8_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave8_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave8_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave7Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave7_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave7_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave7Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave7_status_unpack(
    struct can1_main_ft24_ams_slave7_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave7Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave7_status_init(struct can1_main_ft24_ams_slave7_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave7_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave7_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave7_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave7_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave7_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave7_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave7_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave6Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave6_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave6_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave6Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave6_status_unpack(
    struct can1_main_ft24_ams_slave6_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave6Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave6_status_init(struct can1_main_ft24_ams_slave6_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave6_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave6_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave6_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave6_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave6_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave6_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave6_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave5Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave5_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave5_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave5Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave5_status_unpack(
    struct can1_main_ft24_ams_slave5_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave5Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave5_status_init(struct can1_main_ft24_ams_slave5_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave5_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave5_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave5_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave5_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave5_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave5_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave5_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave4Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave4_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave4_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave4Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave4_status_unpack(
    struct can1_main_ft24_ams_slave4_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave4Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave4_status_init(struct can1_main_ft24_ams_slave4_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave4_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave4_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave4_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave4_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave4_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave4_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave4_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave3Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave3_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave3_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave3Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave3_status_unpack(
    struct can1_main_ft24_ams_slave3_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave3Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave3_status_init(struct can1_main_ft24_ams_slave3_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave3_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave3_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave3_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave3_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave3_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave3_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave3_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave2Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave2_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave2_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave2Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave2_status_unpack(
    struct can1_main_ft24_ams_slave2_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave2Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave2_status_init(struct can1_main_ft24_ams_slave2_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave2_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave2_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave2_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave2_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave2_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave2_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave2_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Slave1Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave1_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave1_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave1Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave1_status_unpack(
    struct can1_main_ft24_ams_slave1_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave1Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave1_status_init(struct can1_main_ft24_ams_slave1_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave1_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave1_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave1_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave1_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave1_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave1_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave1_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message ABX_Misc.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_abx_misc_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_abx_misc_t *src_p,
    size_t size);

/**
 * Unpack message ABX_Misc.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_abx_misc_unpack(
    struct can1_main_ft24_abx_misc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ABX_Misc.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_abx_misc_init(struct can1_main_ft24_abx_misc_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_abx_misc_abx_driver_protocol_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_misc_abx_driver_protocol_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_misc_abx_driver_protocol_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_misc_abx_distance_session_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_misc_abx_distance_session_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_misc_abx_distance_session_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_misc_abx_distance_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_misc_abx_distance_total_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_misc_abx_distance_total_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_abx_misc_abx_lv_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_misc_abx_lv_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_misc_abx_lv_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_abx_misc_abx_lv_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_misc_abx_lv_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_misc_abx_lv_voltage_is_in_range(uint8_t value);

/**
 * Pack message AMS_Error.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_error_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_error_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Error.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_error_unpack(
    struct can1_main_ft24_ams_error_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Error.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_error_init(struct can1_main_ft24_ams_error_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_error_ams_error_kind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_error_ams_error_kind_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_error_ams_error_kind_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_ams_error_ams_error_arg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_error_ams_error_arg_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_error_ams_error_arg_is_in_range(int8_t value);

/**
 * Pack message ABX_CoolingSys_Internal.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_abx_cooling_sys_internal_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_abx_cooling_sys_internal_t *src_p,
    size_t size);

/**
 * Unpack message ABX_CoolingSys_Internal.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_abx_cooling_sys_internal_unpack(
    struct can1_main_ft24_abx_cooling_sys_internal_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ABX_CoolingSys_Internal.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_abx_cooling_sys_internal_init(struct can1_main_ft24_abx_cooling_sys_internal_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_cooling_sys_internal_abx_cs_t_inv_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_internal_abx_cs_t_inv_l_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_internal_abx_cs_t_inv_l_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_cooling_sys_internal_abx_cs_t_inv_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_internal_abx_cs_t_inv_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_internal_abx_cs_t_inv_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_cooling_sys_internal_abx_cs_t_mot_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_internal_abx_cs_t_mot_l_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_internal_abx_cs_t_mot_l_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_cooling_sys_internal_abx_cs_t_mot_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_internal_abx_cs_t_mot_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_internal_abx_cs_t_mot_r_is_in_range(uint16_t value);

/**
 * Pack message ABX_CoolingSys_Acc.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_abx_cooling_sys_acc_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_abx_cooling_sys_acc_t *src_p,
    size_t size);

/**
 * Unpack message ABX_CoolingSys_Acc.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_abx_cooling_sys_acc_unpack(
    struct can1_main_ft24_abx_cooling_sys_acc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ABX_CoolingSys_Acc.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_abx_cooling_sys_acc_init(struct can1_main_ft24_abx_cooling_sys_acc_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_abx_cooling_sys_acc_abx_cs_p_acc_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_acc_abx_cs_p_acc_in_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_acc_abx_cs_p_acc_in_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_abx_cooling_sys_acc_abx_cs_p_acc_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_acc_abx_cs_p_acc_out_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_acc_abx_cs_p_acc_out_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_cooling_sys_acc_abx_cs_t_acc_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_acc_abx_cs_t_acc_in_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_acc_abx_cs_t_acc_in_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_cooling_sys_acc_abx_cs_t_acc_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_acc_abx_cs_t_acc_out_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_acc_abx_cs_t_acc_out_is_in_range(uint16_t value);

/**
 * Pack message ABX_CoolingSys_MotInv.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_abx_cooling_sys_mot_inv_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_abx_cooling_sys_mot_inv_t *src_p,
    size_t size);

/**
 * Unpack message ABX_CoolingSys_MotInv.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_abx_cooling_sys_mot_inv_unpack(
    struct can1_main_ft24_abx_cooling_sys_mot_inv_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ABX_CoolingSys_MotInv.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_abx_cooling_sys_mot_inv_init(struct can1_main_ft24_abx_cooling_sys_mot_inv_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_p_inv_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_p_inv_in_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_p_inv_in_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_p_mot_l_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_p_mot_l_in_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_p_mot_l_in_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_p_rad_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_p_rad_in_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_p_rad_in_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_p_mot_r_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_p_mot_r_in_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_p_mot_r_in_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_t_inv_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_t_inv_in_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_t_inv_in_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_t_mot_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_t_mot_in_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_t_mot_in_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_t_rad_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_t_rad_in_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_cooling_sys_mot_inv_abx_cs_t_rad_in_is_in_range(uint16_t value);

/**
 * Pack message ABX_BrakeT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_abx_brake_t_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_abx_brake_t_t *src_p,
    size_t size);

/**
 * Unpack message ABX_BrakeT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_abx_brake_t_unpack(
    struct can1_main_ft24_abx_brake_t_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ABX_BrakeT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_abx_brake_t_init(struct can1_main_ft24_abx_brake_t_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_brake_t_abx_brake_t_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_brake_t_abx_brake_t_fl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_brake_t_abx_brake_t_fl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_brake_t_abx_brake_t_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_brake_t_abx_brake_t_fr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_brake_t_abx_brake_t_fr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_brake_t_abx_brake_t_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_brake_t_abx_brake_t_rl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_brake_t_abx_brake_t_rl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_brake_t_abx_brake_t_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_brake_t_abx_brake_t_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_brake_t_abx_brake_t_rr_is_in_range(uint16_t value);

/**
 * Pack message ABX_Wheelspeed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_abx_wheelspeed_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_abx_wheelspeed_t *src_p,
    size_t size);

/**
 * Unpack message ABX_Wheelspeed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_abx_wheelspeed_unpack(
    struct can1_main_ft24_abx_wheelspeed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ABX_Wheelspeed.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_abx_wheelspeed_init(struct can1_main_ft24_abx_wheelspeed_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_abx_wheelspeed_abx_wheelspeed_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_wheelspeed_abx_wheelspeed_fl_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_wheelspeed_abx_wheelspeed_fl_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_abx_wheelspeed_abx_wheelspeed_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_wheelspeed_abx_wheelspeed_fr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_wheelspeed_abx_wheelspeed_fr_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_abx_wheelspeed_abx_wheelspeed_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_wheelspeed_abx_wheelspeed_rl_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_wheelspeed_abx_wheelspeed_rl_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_abx_wheelspeed_abx_wheelspeed_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_wheelspeed_abx_wheelspeed_rr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_wheelspeed_abx_wheelspeed_rr_is_in_range(int16_t value);

/**
 * Pack message ABX_Dampers.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_abx_dampers_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_abx_dampers_t *src_p,
    size_t size);

/**
 * Unpack message ABX_Dampers.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_abx_dampers_unpack(
    struct can1_main_ft24_abx_dampers_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ABX_Dampers.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_abx_dampers_init(struct can1_main_ft24_abx_dampers_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_dampers_abx_damper_heave_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_dampers_abx_damper_heave_f_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_dampers_abx_damper_heave_f_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_dampers_abx_damper_roll_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_dampers_abx_damper_roll_f_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_dampers_abx_damper_roll_f_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_dampers_abx_damper_heave_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_dampers_abx_damper_heave_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_dampers_abx_damper_heave_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_dampers_abx_damper_roll_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_dampers_abx_damper_roll_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_dampers_abx_damper_roll_r_is_in_range(uint16_t value);

/**
 * Pack message ABX_Timings.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_abx_timings_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_abx_timings_t *src_p,
    size_t size);

/**
 * Unpack message ABX_Timings.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_abx_timings_unpack(
    struct can1_main_ft24_abx_timings_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ABX_Timings.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_abx_timings_init(struct can1_main_ft24_abx_timings_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_timings_abx_laptime_best_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_timings_abx_laptime_best_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_timings_abx_laptime_best_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_timings_abx_laptime_last_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_timings_abx_laptime_last_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_timings_abx_laptime_last_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_timings_abx_sectortime_best_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_timings_abx_sectortime_best_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_timings_abx_sectortime_best_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_timings_abx_sectortime_last_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_timings_abx_sectortime_last_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_timings_abx_sectortime_last_is_in_range(uint16_t value);

/**
 * Pack message ABX_Driver.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_abx_driver_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_abx_driver_t *src_p,
    size_t size);

/**
 * Unpack message ABX_Driver.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_abx_driver_unpack(
    struct can1_main_ft24_abx_driver_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ABX_Driver.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_abx_driver_init(struct can1_main_ft24_abx_driver_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_abx_driver_abx_apps_percent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_driver_abx_apps_percent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_driver_abx_apps_percent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_driver_abx_brake_p_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_driver_abx_brake_p_f_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_driver_abx_brake_p_f_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_abx_driver_abx_brake_p_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_driver_abx_brake_p_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_driver_abx_brake_p_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_abx_driver_abx_steering_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_driver_abx_steering_angle_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_driver_abx_steering_angle_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_abx_driver_abx_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_driver_abx_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_driver_abx_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_abx_driver_abx_lapcounter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_driver_abx_lapcounter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_driver_abx_lapcounter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_abx_driver_abx_sectorcounter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_abx_driver_abx_sectorcounter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_abx_driver_abx_sectorcounter_is_in_range(uint8_t value);

/**
 * Pack message TTS_Config.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_tts_config_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_tts_config_t *src_p,
    size_t size);

/**
 * Unpack message TTS_Config.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_tts_config_unpack(
    struct can1_main_ft24_tts_config_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TTS_Config.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_tts_config_init(struct can1_main_ft24_tts_config_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tts_config_tts_new_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_config_tts_new_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_config_tts_new_id_is_in_range(uint8_t value);

/**
 * Pack message TTS_RR.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_tts_rr_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_tts_rr_t *src_p,
    size_t size);

/**
 * Unpack message TTS_RR.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_tts_rr_unpack(
    struct can1_main_ft24_tts_rr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TTS_RR.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_tts_rr_init(struct can1_main_ft24_tts_rr_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_rr_tts_rr_inner_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_rr_tts_rr_inner_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_rr_tts_rr_inner_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_rr_tts_rr_center_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_rr_tts_rr_center_in_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_rr_tts_rr_center_in_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_rr_tts_rr_center_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_rr_tts_rr_center_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_rr_tts_rr_center_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_rr_tts_rr_center_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_rr_tts_rr_center_out_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_rr_tts_rr_center_out_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_rr_tts_rr_outer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_rr_tts_rr_outer_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_rr_tts_rr_outer_is_in_range(int16_t value);

/**
 * Pack message TTS_RL.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_tts_rl_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_tts_rl_t *src_p,
    size_t size);

/**
 * Unpack message TTS_RL.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_tts_rl_unpack(
    struct can1_main_ft24_tts_rl_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TTS_RL.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_tts_rl_init(struct can1_main_ft24_tts_rl_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_rl_tts_rl_outer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_rl_tts_rl_outer_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_rl_tts_rl_outer_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_rl_tts_rl_center_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_rl_tts_rl_center_out_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_rl_tts_rl_center_out_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_rl_tts_rl_center_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_rl_tts_rl_center_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_rl_tts_rl_center_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_rl_tts_rl_center_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_rl_tts_rl_center_in_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_rl_tts_rl_center_in_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_rl_tts_rl_inner_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_rl_tts_rl_inner_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_rl_tts_rl_inner_is_in_range(int16_t value);

/**
 * Pack message TTS_FR.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_tts_fr_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_tts_fr_t *src_p,
    size_t size);

/**
 * Unpack message TTS_FR.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_tts_fr_unpack(
    struct can1_main_ft24_tts_fr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TTS_FR.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_tts_fr_init(struct can1_main_ft24_tts_fr_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_fr_tts_fr_inner_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_fr_tts_fr_inner_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_fr_tts_fr_inner_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_fr_tts_fr_center_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_fr_tts_fr_center_in_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_fr_tts_fr_center_in_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_fr_tts_fr_center_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_fr_tts_fr_center_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_fr_tts_fr_center_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_fr_tts_fr_center_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_fr_tts_fr_center_out_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_fr_tts_fr_center_out_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_fr_tts_fr_outer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_fr_tts_fr_outer_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_fr_tts_fr_outer_is_in_range(int16_t value);

/**
 * Pack message TTS_FL.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_tts_fl_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_tts_fl_t *src_p,
    size_t size);

/**
 * Unpack message TTS_FL.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_tts_fl_unpack(
    struct can1_main_ft24_tts_fl_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TTS_FL.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_tts_fl_init(struct can1_main_ft24_tts_fl_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_fl_tts_fl_outer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_fl_tts_fl_outer_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_fl_tts_fl_outer_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_fl_tts_fl_center_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_fl_tts_fl_center_out_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_fl_tts_fl_center_out_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_fl_tts_fl_center_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_fl_tts_fl_center_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_fl_tts_fl_center_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_fl_tts_fl_center_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_fl_tts_fl_center_in_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_fl_tts_fl_center_in_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_tts_fl_tts_fl_inner_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tts_fl_tts_fl_inner_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tts_fl_tts_fl_inner_is_in_range(int16_t value);

/**
 * Pack message STW_Param_Set.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_stw_param_set_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_stw_param_set_t *src_p,
    size_t size);

/**
 * Unpack message STW_Param_Set.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_stw_param_set_unpack(
    struct can1_main_ft24_stw_param_set_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from STW_Param_Set.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_stw_param_set_init(struct can1_main_ft24_stw_param_set_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_param_set_stw_param_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_param_set_stw_param_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_param_set_stw_param_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_stw_param_set_stw_param_b_bal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_param_set_stw_param_b_bal_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_param_set_stw_param_b_bal_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_stw_param_set_stw_param_slipref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_param_set_stw_param_slipref_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_param_set_stw_param_slipref_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_stw_param_set_stw_param_asrp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_param_set_stw_param_asrp_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_param_set_stw_param_asrp_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_stw_param_set_stw_param_asron_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_param_set_stw_param_asron_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_param_set_stw_param_asron_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_stw_param_set_stw_param_asri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_param_set_stw_param_asri_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_param_set_stw_param_asri_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_stw_param_set_stw_param_endu_power_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_param_set_stw_param_endu_power_limit_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_param_set_stw_param_endu_power_limit_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_stw_param_set_stw_param_test3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_param_set_stw_param_test3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_param_set_stw_param_test3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_stw_param_set_stw_param_test4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_param_set_stw_param_test4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_param_set_stw_param_test4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_stw_param_set_stw_param_mumax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_param_set_stw_param_mumax_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_param_set_stw_param_mumax_is_in_range(uint32_t value);

/**
 * Pack message AMS_Slave0Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave0_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave0_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Slave0Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave0_status_unpack(
    struct can1_main_ft24_ams_slave0_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Slave0Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave0_status_init(struct can1_main_ft24_ams_slave0_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave0_status_ams_slave_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_status_ams_slave_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_status_ams_slave_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave0_status_ams_slave_status_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_status_ams_slave_status_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_status_ams_slave_status_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave0_status_ams_slave_status_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_status_ams_slave_status_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_status_ams_slave_status_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_status_ams_slave_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_status_ams_slave_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_status_ams_slave_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_slave0_status_ams_slave_status_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_status_ams_slave_status_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_status_ams_slave_status_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ams_slave0_status_ams_slave_status_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave0_status_ams_slave_status_max_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave0_status_ams_slave_status_max_temp_is_in_range(int16_t value);

/**
 * Pack message SSU_Message.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ssu_message_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ssu_message_t *src_p,
    size_t size);

/**
 * Unpack message SSU_Message.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ssu_message_unpack(
    struct can1_main_ft24_ssu_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SSU_Message.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ssu_message_init(struct can1_main_ft24_ssu_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ssu_message_ssu_air_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ssu_message_ssu_air_pressure_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ssu_message_ssu_air_pressure_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_ssu_message_ssu_air_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ssu_message_ssu_air_temp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ssu_message_ssu_air_temp_is_in_range(int16_t value);

/**
 * Pack message AMS_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_status_unpack(
    struct can1_main_ft24_ams_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_status_init(struct can1_main_ft24_ams_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_status_ams_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_status_ams_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_status_ams_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_status_sdc_closed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_status_sdc_closed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_status_sdc_closed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_status_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_status_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_status_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_status_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_status_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_status_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_ams_status_max_cell_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_status_max_cell_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_status_max_cell_temp_is_in_range(uint16_t value);

/**
 * Pack message AMS_SlavePanic.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_slave_panic_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_slave_panic_t *src_p,
    size_t size);

/**
 * Unpack message AMS_SlavePanic.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_slave_panic_unpack(
    struct can1_main_ft24_ams_slave_panic_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_SlavePanic.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_slave_panic_init(struct can1_main_ft24_ams_slave_panic_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave_panic_ams_slave_panic_slave_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave_panic_ams_slave_panic_slave_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave_panic_ams_slave_panic_slave_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_slave_panic_ams_slave_panic_kind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave_panic_ams_slave_panic_kind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave_panic_ams_slave_panic_kind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_ams_slave_panic_ams_slave_panic_arg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_slave_panic_ams_slave_panic_arg_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_slave_panic_ams_slave_panic_arg_is_in_range(uint32_t value);

/**
 * Pack message AMS_In.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_ams_in_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_ams_in_t *src_p,
    size_t size);

/**
 * Unpack message AMS_In.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_ams_in_unpack(
    struct can1_main_ft24_ams_in_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AMS_In.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_ams_in_init(struct can1_main_ft24_ams_in_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_in_ts_activate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_in_ts_activate_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_in_ts_activate_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_in_inverters_discharged_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_in_inverters_discharged_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_in_inverters_discharged_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_ams_in_lap_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_ams_in_lap_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_ams_in_lap_number_is_in_range(uint8_t value);

/**
 * Pack message Shunt_Current.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_shunt_current_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_shunt_current_t *src_p,
    size_t size);

/**
 * Unpack message Shunt_Current.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_shunt_current_unpack(
    struct can1_main_ft24_shunt_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Shunt_Current.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_shunt_current_init(struct can1_main_ft24_shunt_current_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can1_main_ft24_shunt_current_shunt_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_shunt_current_shunt_current_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_shunt_current_shunt_current_is_in_range(int32_t value);

/**
 * Pack message Shunt_Voltage1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_shunt_voltage1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_shunt_voltage1_t *src_p,
    size_t size);

/**
 * Unpack message Shunt_Voltage1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_shunt_voltage1_unpack(
    struct can1_main_ft24_shunt_voltage1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Shunt_Voltage1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_shunt_voltage1_init(struct can1_main_ft24_shunt_voltage1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can1_main_ft24_shunt_voltage1_shunt_voltage1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_shunt_voltage1_shunt_voltage1_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_shunt_voltage1_shunt_voltage1_is_in_range(int32_t value);

/**
 * Pack message Shunt_Voltage2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_shunt_voltage2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_shunt_voltage2_t *src_p,
    size_t size);

/**
 * Unpack message Shunt_Voltage2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_shunt_voltage2_unpack(
    struct can1_main_ft24_shunt_voltage2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Shunt_Voltage2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_shunt_voltage2_init(struct can1_main_ft24_shunt_voltage2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can1_main_ft24_shunt_voltage2_shunt_voltage2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_shunt_voltage2_shunt_voltage2_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_shunt_voltage2_shunt_voltage2_is_in_range(int32_t value);

/**
 * Pack message Shunt_Voltage3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_shunt_voltage3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_shunt_voltage3_t *src_p,
    size_t size);

/**
 * Unpack message Shunt_Voltage3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_shunt_voltage3_unpack(
    struct can1_main_ft24_shunt_voltage3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Shunt_Voltage3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_shunt_voltage3_init(struct can1_main_ft24_shunt_voltage3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can1_main_ft24_shunt_voltage3_shunt_voltage3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_shunt_voltage3_shunt_voltage3_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_shunt_voltage3_shunt_voltage3_is_in_range(int32_t value);

/**
 * Pack message Shunt_Temperature.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_shunt_temperature_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_shunt_temperature_t *src_p,
    size_t size);

/**
 * Unpack message Shunt_Temperature.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_shunt_temperature_unpack(
    struct can1_main_ft24_shunt_temperature_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Shunt_Temperature.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_shunt_temperature_init(struct can1_main_ft24_shunt_temperature_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_shunt_temperature_shunt_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_shunt_temperature_shunt_temperature_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_shunt_temperature_shunt_temperature_is_in_range(uint32_t value);

/**
 * Pack message SDCL_tx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_sdcl_tx_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_sdcl_tx_t *src_p,
    size_t size);

/**
 * Unpack message SDCL_tx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_sdcl_tx_unpack(
    struct can1_main_ft24_sdcl_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SDCL_tx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_sdcl_tx_init(struct can1_main_ft24_sdcl_tx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_tx_asms_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_tx_asms_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_tx_asms_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_tx_sdc_state_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_tx_sdc_state_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_tx_sdc_state_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_tx_sdc_state_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_tx_sdc_state_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_tx_sdc_state_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_tx_sdc_state_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_tx_sdc_state_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_tx_sdc_state_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_tx_heartbeat_ok_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_tx_heartbeat_ok_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_tx_heartbeat_ok_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_tx_sdcl_sdc_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_tx_sdcl_sdc_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_tx_sdcl_sdc_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_tx_ts_start_muxed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_tx_ts_start_muxed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_tx_ts_start_muxed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_tx_latch_init_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_tx_latch_init_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_tx_latch_init_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_tx_latch_closed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_tx_latch_closed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_tx_latch_closed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_tx_latch_reopened_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_tx_latch_reopened_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_tx_latch_reopened_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_tx_as_mission_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_tx_as_mission_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_tx_as_mission_is_in_range(uint8_t value);

/**
 * Pack message SDCL_rx.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_sdcl_rx_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_sdcl_rx_t *src_p,
    size_t size);

/**
 * Unpack message SDCL_rx.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_sdcl_rx_unpack(
    struct can1_main_ft24_sdcl_rx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SDCL_rx.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_sdcl_rx_init(struct can1_main_ft24_sdcl_rx_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_rx_as_close_sdc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_rx_as_close_sdc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_rx_as_close_sdc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_rx_sdcl_heartbeat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_rx_sdcl_heartbeat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_rx_sdcl_heartbeat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_rx_asb_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_rx_asb_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_rx_asb_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_sdcl_rx_as_mission_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_sdcl_rx_as_mission_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_sdcl_rx_as_mission_is_in_range(uint8_t value);

/**
 * Pack message PDU_Command.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_pdu_command_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_pdu_command_t *src_p,
    size_t size);

/**
 * Unpack message PDU_Command.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_pdu_command_unpack(
    struct can1_main_ft24_pdu_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PDU_Command.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_pdu_command_init(struct can1_main_ft24_pdu_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_inverter_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_inverter_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_inverter_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_mode_valve_2_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_mode_valve_2_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_mode_valve_2_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_ebs_valve_2_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_ebs_valve_2_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_ebs_valve_2_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_shutdown_circuit_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_shutdown_circuit_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_shutdown_circuit_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_alwayson_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_alwayson_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_alwayson_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_misc_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_misc_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_misc_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_servo_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_servo_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_servo_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_led1_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_led1_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_led1_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_led2_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_led2_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_led2_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_led3_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_led3_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_led3_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_sensorbox_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_sensorbox_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_sensorbox_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_service_brake_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_service_brake_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_service_brake_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_ebs_valve_1_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_ebs_valve_1_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_ebs_valve_1_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_steering_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_steering_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_steering_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_mode_valve_1_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_mode_valve_1_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_mode_valve_1_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_pwm_fans_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_pwm_fans_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_pwm_fans_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_pwm_aggregat_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_pwm_aggregat_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_pwm_aggregat_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_pwm_pump_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_pwm_pump_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_pwm_pump_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_command_pdu_checksum_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_command_pdu_checksum_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_command_pdu_checksum_rx_is_in_range(uint8_t value);

/**
 * Pack message PDU_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_pdu_response_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_pdu_response_t *src_p,
    size_t size);

/**
 * Unpack message PDU_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_pdu_response_unpack(
    struct can1_main_ft24_pdu_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PDU_Response.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_pdu_response_init(struct can1_main_ft24_pdu_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_inverter_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_inverter_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_inverter_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_mode_valve_2_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_mode_valve_2_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_mode_valve_2_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_evs_valve_2_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_evs_valve_2_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_evs_valve_2_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_shutdown_circuit_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_shutdown_circuit_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_shutdown_circuit_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_alwayson_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_alwayson_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_alwayson_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_misc_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_misc_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_misc_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_servo_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_servo_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_servo_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_led1_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_led1_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_led1_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_led2_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_led2_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_led2_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_led3_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_led3_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_led3_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_sensorbox_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_sensorbox_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_sensorbox_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_service_brake_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_service_brake_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_service_brake_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_ebs_valve_1_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_ebs_valve_1_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_ebs_valve_1_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_steering_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_steering_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_steering_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_mode_valve_1_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_mode_valve_1_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_mode_valve_1_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_pwm_fans_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_pwm_fans_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_pwm_fans_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_pwm_aggregat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_pwm_aggregat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_pwm_aggregat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_pwm_pump_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_pwm_pump_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_pwm_pump_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_pdu_response_pdu_checksum_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_response_pdu_checksum_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_response_pdu_checksum_tx_is_in_range(uint8_t value);

/**
 * Pack message TxPDO.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_tx_pdo_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_tx_pdo_t *src_p,
    size_t size);

/**
 * Unpack message TxPDO.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_tx_pdo_unpack(
    struct can1_main_ft24_tx_pdo_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TxPDO.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_tx_pdo_init(struct can1_main_ft24_tx_pdo_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_powersupply_less_8v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_powersupply_less_8v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_powersupply_less_8v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_powersupply_greater_32v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_powersupply_greater_32v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_powersupply_greater_32v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_canbus_timeout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_canbus_timeout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_canbus_timeout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_canbus_startupmissing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_canbus_startupmissing_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_canbus_startupmissing_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_canbus_statewarning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_canbus_statewarning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_canbus_statewarning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_analoginput_middleposition_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_analoginput_middleposition_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_analoginput_middleposition_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_analoginput_cablebreak_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_analoginput_cablebreak_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_analoginput_cablebreak_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_analoginput_shortcircuit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_analoginput_shortcircuit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_analoginput_shortcircuit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_analoginput_currentoverload_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_analoginput_currentoverload_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_analoginput_currentoverload_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_temperature_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_temperature_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_temperature_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_temperature_shutdown_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_temperature_shutdown_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_temperature_shutdown_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_output1_controllerrange_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_output1_controllerrange_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_output1_controllerrange_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_output2_controllerrange_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_output2_controllerrange_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_output2_controllerrange_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_output1_cablebreak_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_output1_cablebreak_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_output1_cablebreak_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_output2_cablebreak_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_output2_cablebreak_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_output2_cablebreak_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_output1_shortcircuit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_output1_shortcircuit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_output1_shortcircuit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_tx_pdo_pdm_output2_shortcircuit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_output2_shortcircuit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_output2_shortcircuit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_tx_pdo_pdm_analoginput_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_tx_pdo_pdm_analoginput_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_tx_pdo_pdm_analoginput_is_in_range(uint16_t value);

/**
 * Pack message XSens_Error.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_x_sens_error_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_x_sens_error_t *src_p,
    size_t size);

/**
 * Unpack message XSens_Error.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_x_sens_error_unpack(
    struct can1_main_ft24_x_sens_error_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from XSens_Error.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_x_sens_error_init(struct can1_main_ft24_x_sens_error_t *msg_p);

/**
 * Pack message XSens_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_x_sens_warning_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_x_sens_warning_t *src_p,
    size_t size);

/**
 * Unpack message XSens_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_x_sens_warning_unpack(
    struct can1_main_ft24_x_sens_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from XSens_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_x_sens_warning_init(struct can1_main_ft24_x_sens_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_warning_warning_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_warning_warning_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_warning_warning_code_is_in_range(uint8_t value);

/**
 * Pack message XSens_SampleTime.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_x_sens_sample_time_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_x_sens_sample_time_t *src_p,
    size_t size);

/**
 * Unpack message XSens_SampleTime.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_x_sens_sample_time_unpack(
    struct can1_main_ft24_x_sens_sample_time_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from XSens_SampleTime.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_x_sens_sample_time_init(struct can1_main_ft24_x_sens_sample_time_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can1_main_ft24_x_sens_sample_time_timestamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_sample_time_timestamp_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_sample_time_timestamp_is_in_range(uint32_t value);

/**
 * Pack message XSens_GroupCounter.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_x_sens_group_counter_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_x_sens_group_counter_t *src_p,
    size_t size);

/**
 * Unpack message XSens_GroupCounter.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_x_sens_group_counter_unpack(
    struct can1_main_ft24_x_sens_group_counter_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from XSens_GroupCounter.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_x_sens_group_counter_init(struct can1_main_ft24_x_sens_group_counter_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_x_sens_group_counter_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_group_counter_counter_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_group_counter_counter_is_in_range(uint16_t value);

/**
 * Pack message XSens_StatusWord.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_x_sens_status_word_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_x_sens_status_word_t *src_p,
    size_t size);

/**
 * Unpack message XSens_StatusWord.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_x_sens_status_word_unpack(
    struct can1_main_ft24_x_sens_status_word_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from XSens_StatusWord.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_x_sens_status_word_init(struct can1_main_ft24_x_sens_status_word_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_have_gnss_time_pulse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_have_gnss_time_pulse_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_have_gnss_time_pulse_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_rtk_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_rtk_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_rtk_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_filter_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_filter_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_filter_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_clip_mag_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_clip_mag_z_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_clip_mag_z_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_retransmitted_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_retransmitted_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_retransmitted_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_clipping_detected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_clipping_detected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_clipping_detected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_interpolated_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_interpolated_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_interpolated_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_sync_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_sync_in_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_sync_in_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_sync_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_sync_out_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_sync_out_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_clip_acc_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_clip_acc_x_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_clip_acc_x_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_clip_acc_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_clip_acc_y_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_clip_acc_y_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_clip_acc_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_clip_acc_z_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_clip_acc_z_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_clip_gyr_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_clip_gyr_x_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_clip_gyr_x_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_clip_gyr_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_clip_gyr_y_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_clip_gyr_y_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_clip_gyr_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_clip_gyr_z_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_clip_gyr_z_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_clip_mag_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_clip_mag_x_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_clip_mag_x_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_clip_mag_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_clip_mag_y_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_clip_mag_y_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_self_test_ok_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_self_test_ok_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_self_test_ok_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_orientation_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_orientation_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_orientation_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_gps_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_gps_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_gps_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_no_rotation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_no_rotation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_no_rotation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_representative_motion_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_representative_motion_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_representative_motion_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_x_sens_status_word_external_clock_synced_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_status_word_external_clock_synced_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_status_word_external_clock_synced_is_in_range(uint8_t value);

/**
 * Pack message XSens_RateOfTurn.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_x_sens_rate_of_turn_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_x_sens_rate_of_turn_t *src_p,
    size_t size);

/**
 * Unpack message XSens_RateOfTurn.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_x_sens_rate_of_turn_unpack(
    struct can1_main_ft24_x_sens_rate_of_turn_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from XSens_RateOfTurn.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_x_sens_rate_of_turn_init(struct can1_main_ft24_x_sens_rate_of_turn_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_x_sens_rate_of_turn_x_sens_gyr_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_rate_of_turn_x_sens_gyr_x_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_rate_of_turn_x_sens_gyr_x_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_x_sens_rate_of_turn_x_sens_gyr_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_rate_of_turn_x_sens_gyr_y_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_rate_of_turn_x_sens_gyr_y_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_x_sens_rate_of_turn_x_sens_gyr_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_rate_of_turn_x_sens_gyr_z_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_rate_of_turn_x_sens_gyr_z_is_in_range(int16_t value);

/**
 * Pack message XSens_Acceleration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_x_sens_acceleration_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_x_sens_acceleration_t *src_p,
    size_t size);

/**
 * Unpack message XSens_Acceleration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_x_sens_acceleration_unpack(
    struct can1_main_ft24_x_sens_acceleration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from XSens_Acceleration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_x_sens_acceleration_init(struct can1_main_ft24_x_sens_acceleration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_x_sens_acceleration_x_sens_acc_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_acceleration_x_sens_acc_x_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_acceleration_x_sens_acc_x_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_x_sens_acceleration_x_sens_acc_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_acceleration_x_sens_acc_y_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_acceleration_x_sens_acc_y_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_x_sens_acceleration_x_sens_acc_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_acceleration_x_sens_acc_z_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_acceleration_x_sens_acc_z_is_in_range(int16_t value);

/**
 * Pack message XSens_LongLat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_x_sens_long_lat_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_x_sens_long_lat_t *src_p,
    size_t size);

/**
 * Unpack message XSens_LongLat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_x_sens_long_lat_unpack(
    struct can1_main_ft24_x_sens_long_lat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from XSens_LongLat.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_x_sens_long_lat_init(struct can1_main_ft24_x_sens_long_lat_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can1_main_ft24_x_sens_long_lat_latitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_long_lat_latitude_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_long_lat_latitude_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can1_main_ft24_x_sens_long_lat_longitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_long_lat_longitude_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_long_lat_longitude_is_in_range(int32_t value);

/**
 * Pack message XSens_Velocity.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_x_sens_velocity_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_x_sens_velocity_t *src_p,
    size_t size);

/**
 * Unpack message XSens_Velocity.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_x_sens_velocity_unpack(
    struct can1_main_ft24_x_sens_velocity_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from XSens_Velocity.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_x_sens_velocity_init(struct can1_main_ft24_x_sens_velocity_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_x_sens_velocity_vel_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_velocity_vel_x_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_velocity_vel_x_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_x_sens_velocity_vel_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_velocity_vel_y_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_velocity_vel_y_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_x_sens_velocity_vel_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_x_sens_velocity_vel_z_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_x_sens_velocity_vel_z_is_in_range(int16_t value);

/**
 * Pack message AS_Mission_fb.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_as_mission_fb_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_as_mission_fb_t *src_p,
    size_t size);

/**
 * Unpack message AS_Mission_fb.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_as_mission_fb_unpack(
    struct can1_main_ft24_as_mission_fb_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AS_Mission_fb.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_as_mission_fb_init(struct can1_main_ft24_as_mission_fb_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_as_mission_fb_mission_selection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_as_mission_fb_mission_selection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_as_mission_fb_mission_selection_is_in_range(uint8_t value);

/**
 * Pack message STW_mission_selected.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_stw_mission_selected_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_stw_mission_selected_t *src_p,
    size_t size);

/**
 * Unpack message STW_mission_selected.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_stw_mission_selected_unpack(
    struct can1_main_ft24_stw_mission_selected_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from STW_mission_selected.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_stw_mission_selected_init(struct can1_main_ft24_stw_mission_selected_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_mission_selected_mission_selection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_mission_selected_mission_selection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_mission_selected_mission_selection_is_in_range(uint8_t value);

/**
 * Pack message EPSC_out.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_epsc_out_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_epsc_out_t *src_p,
    size_t size);

/**
 * Unpack message EPSC_out.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_epsc_out_unpack(
    struct can1_main_ft24_epsc_out_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EPSC_out.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_epsc_out_init(struct can1_main_ft24_epsc_out_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_epsc_out_epsc_measured_steering_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_out_epsc_measured_steering_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_out_epsc_measured_steering_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_out_epsc_measured_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_out_epsc_measured_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_out_epsc_measured_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_out_epsc_measured_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_out_epsc_measured_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_out_epsc_measured_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_epsc_out_epsc_measured_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_out_epsc_measured_rpm_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_out_epsc_measured_rpm_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_epsc_out_epsc_measured_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_out_epsc_measured_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_out_epsc_measured_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_epsc_out_epsc_measured_internal_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_out_epsc_measured_internal_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_out_epsc_measured_internal_temp_is_in_range(uint16_t value);

/**
 * Pack message EPSC_Steering_In.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_epsc_steering_in_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_epsc_steering_in_t *src_p,
    size_t size);

/**
 * Unpack message EPSC_Steering_In.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_epsc_steering_in_unpack(
    struct can1_main_ft24_epsc_steering_in_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EPSC_Steering_In.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_epsc_steering_in_init(struct can1_main_ft24_epsc_steering_in_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can1_main_ft24_epsc_steering_in_epsc_desired_steering_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_steering_in_epsc_desired_steering_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_steering_in_epsc_desired_steering_angle_is_in_range(int16_t value);

/**
 * Pack message STW_buttons.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_stw_buttons_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_stw_buttons_t *src_p,
    size_t size);

/**
 * Unpack message STW_buttons.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_stw_buttons_unpack(
    struct can1_main_ft24_stw_buttons_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from STW_buttons.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_stw_buttons_init(struct can1_main_ft24_stw_buttons_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_buttons_stw_button_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_buttons_stw_button_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_buttons_stw_button_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_buttons_stw_button_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_buttons_stw_button_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_buttons_stw_button_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_buttons_stw_button_r2_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_buttons_stw_button_r2_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_buttons_stw_button_r2_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_buttons_stw_button_enter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_buttons_stw_button_enter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_buttons_stw_button_enter_is_in_range(uint8_t value);

/**
 * Pack message STW_status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_stw_status_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_stw_status_t *src_p,
    size_t size);

/**
 * Unpack message STW_status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_stw_status_unpack(
    struct can1_main_ft24_stw_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from STW_status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_stw_status_init(struct can1_main_ft24_stw_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_as_state_stw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_as_state_stw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_as_state_stw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_r2_d_progress_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_r2_d_progress_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_r2_d_progress_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_inv_l_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_inv_l_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_inv_l_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_inv_r_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_inv_r_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_inv_r_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_sdc_bfl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_sdc_bfl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_sdc_bfl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_sdc_brl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_sdc_brl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_sdc_brl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_sdc_acc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_sdc_acc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_sdc_acc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_sdc_hvb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_sdc_hvb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_sdc_hvb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_lap_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_lap_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_lap_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_ini_chk_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_ini_chk_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_ini_chk_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_err_sdc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_err_sdc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_err_sdc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_err_ams_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_err_ams_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_err_ams_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_err_pdu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_err_pdu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_err_pdu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_err_ini_chk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_err_ini_chk_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_err_ini_chk_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_err_con_mon_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_err_con_mon_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_err_con_mon_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_err_scs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_err_scs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_err_scs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_err_s_bspd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_err_s_bspd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_err_s_bspd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_err_app_sp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_err_app_sp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_err_app_sp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_err_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_err_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_err_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_err_ros_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_err_ros_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_err_ros_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_err_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_err_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_err_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_err_inv_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_err_inv_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_err_inv_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_stw_status_err_inv_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_stw_status_err_inv_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_stw_status_err_inv_r_is_in_range(uint8_t value);

/**
 * Pack message PDU_Current_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_pdu_current_1_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_pdu_current_1_t *src_p,
    size_t size);

/**
 * Unpack message PDU_Current_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_pdu_current_1_unpack(
    struct can1_main_ft24_pdu_current_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PDU_Current_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_pdu_current_1_init(struct can1_main_ft24_pdu_current_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_1_pdu_alwayson_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_1_pdu_alwayson_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_1_pdu_alwayson_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_1_pdu_misc_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_1_pdu_misc_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_1_pdu_misc_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_1_pdu_inverter_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_1_pdu_inverter_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_1_pdu_inverter_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_1_pdu_shutdown_circuit_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_1_pdu_shutdown_circuit_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_1_pdu_shutdown_circuit_curr_is_in_range(uint16_t value);

/**
 * Pack message PDU_Current_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_pdu_current_2_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_pdu_current_2_t *src_p,
    size_t size);

/**
 * Unpack message PDU_Current_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_pdu_current_2_unpack(
    struct can1_main_ft24_pdu_current_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PDU_Current_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_pdu_current_2_init(struct can1_main_ft24_pdu_current_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_2_pdu_fans_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_2_pdu_fans_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_2_pdu_fans_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_2_pdu_pump_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_2_pdu_pump_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_2_pdu_pump_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_2_pdu_aggregat_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_2_pdu_aggregat_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_2_pdu_aggregat_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_2_pdu_steering_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_2_pdu_steering_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_2_pdu_steering_curr_is_in_range(uint16_t value);

/**
 * Pack message PDU_Current_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_pdu_current_3_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_pdu_current_3_t *src_p,
    size_t size);

/**
 * Unpack message PDU_Current_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_pdu_current_3_unpack(
    struct can1_main_ft24_pdu_current_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PDU_Current_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_pdu_current_3_init(struct can1_main_ft24_pdu_current_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_3_pdu_ebs_valve_1_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_3_pdu_ebs_valve_1_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_3_pdu_ebs_valve_1_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_3_pdu_ebs_valve_2_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_3_pdu_ebs_valve_2_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_3_pdu_ebs_valve_2_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_3_pdu_mode_valve_1_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_3_pdu_mode_valve_1_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_3_pdu_mode_valve_1_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_3_pdu_mode_valve_2_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_3_pdu_mode_valve_2_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_3_pdu_mode_valve_2_curr_is_in_range(uint16_t value);

/**
 * Pack message PDU_Current_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_pdu_current_4_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_pdu_current_4_t *src_p,
    size_t size);

/**
 * Unpack message PDU_Current_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_pdu_current_4_unpack(
    struct can1_main_ft24_pdu_current_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PDU_Current_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_pdu_current_4_init(struct can1_main_ft24_pdu_current_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_4_pdu_sensorbox_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_4_pdu_sensorbox_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_4_pdu_sensorbox_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_4_pdu_service_brake_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_4_pdu_service_brake_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_4_pdu_service_brake_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_4_pdu_servos_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_4_pdu_servos_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_4_pdu_servos_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can1_main_ft24_pdu_current_4_pdu_shutdown_circuit_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_pdu_current_4_pdu_shutdown_circuit_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_pdu_current_4_pdu_shutdown_circuit_curr_is_in_range(uint16_t value);

/**
 * Pack message EPSC_Config_In.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can1_main_ft24_epsc_config_in_pack(
    uint8_t *dst_p,
    const struct can1_main_ft24_epsc_config_in_t *src_p,
    size_t size);

/**
 * Unpack message EPSC_Config_In.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can1_main_ft24_epsc_config_in_unpack(
    struct can1_main_ft24_epsc_config_in_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EPSC_Config_In.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can1_main_ft24_epsc_config_in_init(struct can1_main_ft24_epsc_config_in_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can1_main_ft24_epsc_config_in_epsc_should_calibrate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_should_calibrate_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_should_calibrate_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_config_in_epsc_should_change_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_should_change_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_should_change_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_config_in_epsc_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_config_in_epsc_flag3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_flag3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_flag3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_config_in_epsc_flag4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_flag4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_flag4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_config_in_epsc_flag5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_flag5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_flag5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_config_in_epsc_flag6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_flag6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_flag6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_config_in_epsc_flag7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_flag7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_flag7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_config_in_epsc_kp_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_kp_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_kp_pos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_config_in_epsc_ki_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_ki_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_ki_pos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_config_in_epsc_kp_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_kp_rpm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_kp_rpm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_config_in_epsc_ki_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_ki_rpm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_ki_rpm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_config_in_epsc_kp_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_kp_curr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_kp_curr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can1_main_ft24_epsc_config_in_epsc_ki_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can1_main_ft24_epsc_config_in_epsc_ki_curr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can1_main_ft24_epsc_config_in_epsc_ki_curr_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
