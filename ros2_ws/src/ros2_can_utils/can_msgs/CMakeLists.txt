cmake_minimum_required(VERSION 3.8)
project(can_msgs)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

set(AUTOGENERATED_FILE_NAME can1_main_ft24)
set(CAN_DBC_FILE_NAME CAN1MainFT24.dbc)

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rosidl_default_generators REQUIRED)
find_package(can_interface REQUIRED)
find_package(std_msgs REQUIRED)

include_directories(${CAN_INTERFACE_INCLUDE_DIR})
link_libraries(${CAN_INTERFACE_LIBRARIES})

# message(can_interface_INCLUDE_DIR=${can_interface_INCLUDE_DIR})
# add_custom_command(OUTPUT my_file.stamp  
#   COMMAND python3 -m cantools generate_c_source_ros2_msgs --prune /home/koeppe/ros2_can_bridge/ros2_ws/src/ros2_can_utils/can_interface/dbc/${CAN_DBC_FILE_NAME} --database-name ${AUTOGENERATED_FILE_NAME}
#   COMMAND ${CMAKE_COMMAND} -E touch my_file.stamp
#   WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/msgs"
#   PRE_BUILD
#   COMMENT "Generating ROS2 msgs for CAN based on DBC file"
#   VERBATIM
# )

set(list_rel_paths)
file(GLOB msgs_SRC "msgs/*.msg")

foreach(msg ${msgs_SRC})
  file(RELATIVE_PATH relative_path ${PROJECT_SOURCE_DIR} ${msg})
  list(APPEND list_rel_paths ${relative_path})
endforeach()

rosidl_generate_interfaces(${PROJECT_NAME}
  ${list_rel_paths}
  DEPENDENCIES std_msgs
)
ament_export_dependencies(rosidl_default_runtime)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
